
Reflow_Oven_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af4c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006bc  0800b060  0800b060  0001b060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b71c  0800b71c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800b71c  0800b71c  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b71c  0800b71c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b71c  0800b71c  0001b71c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b720  0800b720  0001b720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800b724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001240  200001f0  0800b910  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001430  0800b910  00021430  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebf4  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e8  00000000  00000000  0002ee09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  000314f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  000325b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019397  00000000  00000000  00033570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011438  00000000  00000000  0004c907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ef11  00000000  00000000  0005dd3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  000ecc50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bd0  00000000  00000000  000ecd10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000005c  00000000  00000000  000f28e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b044 	.word	0x0800b044

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800b044 	.word	0x0800b044

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2uiz>:
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	d20e      	bcs.n	8001132 <__aeabi_f2uiz+0x22>
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30b      	bcc.n	8001132 <__aeabi_f2uiz+0x22>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d409      	bmi.n	8001138 <__aeabi_f2uiz+0x28>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2uiz+0x32>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d102      	bne.n	8001148 <__aeabi_f2uiz+0x38>
 8001142:	f04f 30ff 	mov.w	r0, #4294967295
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <__aeabi_d2lz>:
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	4605      	mov	r5, r0
 8001154:	460c      	mov	r4, r1
 8001156:	2200      	movs	r2, #0
 8001158:	2300      	movs	r3, #0
 800115a:	4628      	mov	r0, r5
 800115c:	4621      	mov	r1, r4
 800115e:	f7ff fc2d 	bl	80009bc <__aeabi_dcmplt>
 8001162:	b928      	cbnz	r0, 8001170 <__aeabi_d2lz+0x20>
 8001164:	4628      	mov	r0, r5
 8001166:	4621      	mov	r1, r4
 8001168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800116c:	f000 b80a 	b.w	8001184 <__aeabi_d2ulz>
 8001170:	4628      	mov	r0, r5
 8001172:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001176:	f000 f805 	bl	8001184 <__aeabi_d2ulz>
 800117a:	4240      	negs	r0, r0
 800117c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001180:	bd38      	pop	{r3, r4, r5, pc}
 8001182:	bf00      	nop

08001184 <__aeabi_d2ulz>:
 8001184:	b5d0      	push	{r4, r6, r7, lr}
 8001186:	2200      	movs	r2, #0
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <__aeabi_d2ulz+0x34>)
 800118a:	4606      	mov	r6, r0
 800118c:	460f      	mov	r7, r1
 800118e:	f7ff f9a3 	bl	80004d8 <__aeabi_dmul>
 8001192:	f7ff fc79 	bl	8000a88 <__aeabi_d2uiz>
 8001196:	4604      	mov	r4, r0
 8001198:	f7ff f924 	bl	80003e4 <__aeabi_ui2d>
 800119c:	2200      	movs	r2, #0
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <__aeabi_d2ulz+0x38>)
 80011a0:	f7ff f99a 	bl	80004d8 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4630      	mov	r0, r6
 80011aa:	4639      	mov	r1, r7
 80011ac:	f7fe ffdc 	bl	8000168 <__aeabi_dsub>
 80011b0:	f7ff fc6a 	bl	8000a88 <__aeabi_d2uiz>
 80011b4:	4621      	mov	r1, r4
 80011b6:	bdd0      	pop	{r4, r6, r7, pc}
 80011b8:	3df00000 	.word	0x3df00000
 80011bc:	41f00000 	.word	0x41f00000

080011c0 <GetPage>:
#include "string.h"
#include "stdio.h"


static uint32_t GetPage(uint32_t Address)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  for (uint32_t indx=0; indx<128; indx++)
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	e016      	b.n	80011fc <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (1024 *(indx+1))) ) && (Address >= (0x08000000 + 1024*indx)))
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80011d4:	3301      	adds	r3, #1
 80011d6:	029b      	lsls	r3, r3, #10
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d20b      	bcs.n	80011f6 <GetPage+0x36>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80011e4:	029b      	lsls	r3, r3, #10
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d304      	bcc.n	80011f6 <GetPage+0x36>
	  {
		  return (0x08000000 + 1024*indx);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80011f2:	029b      	lsls	r3, r3, #10
 80011f4:	e007      	b.n	8001206 <GetPage+0x46>
  for (uint32_t indx=0; indx<128; indx++)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3301      	adds	r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b7f      	cmp	r3, #127	; 0x7f
 8001200:	d9e5      	bls.n	80011ce <GetPage+0xe>
	  }
  }

  return -1;
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001206:	4618      	mov	r0, r3
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <Flash_Write_Data>:

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *DATA_32, uint32_t NumberWords)
{
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 800121c:	2300      	movs	r3, #0
 800121e:	627b      	str	r3, [r7, #36]	; 0x24

	int numberofwords = NumberWords;//(strlen(DATA_32)/4) + ((strlen(DATA_32) % 4) != 0);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	623b      	str	r3, [r7, #32]

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8001224:	f002 fcac 	bl	8003b80 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f7ff ffc9 	bl	80011c0 <GetPage>
 800122e:	61f8      	str	r0, [r7, #28]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	461a      	mov	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4413      	add	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
	  uint32_t EndPage = GetPage(EndPageAdress);
 800123c:	69b8      	ldr	r0, [r7, #24]
 800123e:	f7ff ffbf 	bl	80011c0 <GetPage>
 8001242:	6178      	str	r0, [r7, #20]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001244:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <Flash_Write_Data+0xb8>)
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 800124a:	4a1f      	ldr	r2, [pc, #124]	; (80012c8 <Flash_Write_Data+0xb8>)
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	0a9b      	lsrs	r3, r3, #10
 8001258:	3301      	adds	r3, #1
 800125a:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <Flash_Write_Data+0xb8>)
 800125c:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	4619      	mov	r1, r3
 8001264:	4818      	ldr	r0, [pc, #96]	; (80012c8 <Flash_Write_Data+0xb8>)
 8001266:	f002 fd7d 	bl	8003d64 <HAL_FLASHEx_Erase>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d01f      	beq.n	80012b0 <Flash_Write_Data+0xa0>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8001270:	f002 fcbc 	bl	8003bec <HAL_FLASH_GetError>
 8001274:	4603      	mov	r3, r0
 8001276:	e022      	b.n	80012be <Flash_Write_Data+0xae>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, DATA_32[sofar]) == HAL_OK)
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	4413      	add	r3, r2
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2200      	movs	r2, #0
 8001284:	461c      	mov	r4, r3
 8001286:	4615      	mov	r5, r2
 8001288:	4622      	mov	r2, r4
 800128a:	462b      	mov	r3, r5
 800128c:	68f9      	ldr	r1, [r7, #12]
 800128e:	2002      	movs	r0, #2
 8001290:	f002 fc06 	bl	8003aa0 <HAL_FLASH_Program>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d106      	bne.n	80012a8 <Flash_Write_Data+0x98>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3304      	adds	r3, #4
 800129e:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	3301      	adds	r3, #1
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
 80012a6:	e003      	b.n	80012b0 <Flash_Write_Data+0xa0>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 80012a8:	f002 fca0 	bl	8003bec <HAL_FLASH_GetError>
 80012ac:	4603      	mov	r3, r0
 80012ae:	e006      	b.n	80012be <Flash_Write_Data+0xae>
	   while (sofar<numberofwords)
 80012b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012b2:	6a3b      	ldr	r3, [r7, #32]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	dbdf      	blt.n	8001278 <Flash_Write_Data+0x68>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 80012b8:	f002 fc88 	bl	8003bcc <HAL_FLASH_Lock>

	   return 0;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3728      	adds	r7, #40	; 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bdb0      	pop	{r4, r5, r7, pc}
 80012c6:	bf00      	nop
 80012c8:	2000020c 	.word	0x2000020c

080012cc <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, __IO uint32_t * DATA_32)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
	while (1)
	{
		*DATA_32 = *(__IO uint32_t *)StartPageAddress;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	601a      	str	r2, [r3, #0]
		if (*DATA_32 == 0xffffffff)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e6:	d103      	bne.n	80012f0 <Flash_Read_Data+0x24>
		{
			*DATA_32 = '\0';
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
			break;
 80012ee:	e006      	b.n	80012fe <Flash_Read_Data+0x32>
		}
		StartPageAddress += 4;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3304      	adds	r3, #4
 80012f4:	607b      	str	r3, [r7, #4]
		DATA_32++;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	3304      	adds	r3, #4
 80012fa:	603b      	str	r3, [r7, #0]
		*DATA_32 = *(__IO uint32_t *)StartPageAddress;
 80012fc:	e7eb      	b.n	80012d6 <Flash_Read_Data+0xa>
	}
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <arm_pid_f32>:
   * @return out processed output sample.
   */
  static __INLINE float32_t arm_pid_f32(
  arm_pid_instance_f32 * S,
  float32_t in)
  {
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6839      	ldr	r1, [r7, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fd33 	bl	8000d84 <__aeabi_fmul>
 800131e:	4603      	mov	r3, r0
 8001320:	461c      	mov	r4, r3
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	4619      	mov	r1, r3
 800132c:	4610      	mov	r0, r2
 800132e:	f7ff fd29 	bl	8000d84 <__aeabi_fmul>
 8001332:	4603      	mov	r3, r0
    out = (S->A0 * in) +
 8001334:	4619      	mov	r1, r3
 8001336:	4620      	mov	r0, r4
 8001338:	f7ff fc1c 	bl	8000b74 <__addsf3>
 800133c:	4603      	mov	r3, r0
 800133e:	461c      	mov	r4, r3
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	4619      	mov	r1, r3
 800134a:	4610      	mov	r0, r2
 800134c:	f7ff fd1a 	bl	8000d84 <__aeabi_fmul>
 8001350:	4603      	mov	r3, r0
 8001352:	4619      	mov	r1, r3
 8001354:	4620      	mov	r0, r4
 8001356:	f7ff fc0d 	bl	8000b74 <__addsf3>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	695b      	ldr	r3, [r3, #20]
    out = (S->A0 * in) +
 8001362:	4619      	mov	r1, r3
 8001364:	4610      	mov	r0, r2
 8001366:	f7ff fc05 	bl	8000b74 <__addsf3>
 800136a:	4603      	mov	r3, r0
 800136c:	60fb      	str	r3, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001382:	68fb      	ldr	r3, [r7, #12]

  }
 8001384:	4618      	mov	r0, r3
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	bd90      	pop	{r4, r7, pc}

0800138c <SaveReflowParameters>:
uint8_t TempDrawEnable = 0;
uint32_t TempDrawCounter = 0;



void SaveReflowParameters(){
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	Flash_Write_Data(0x0801FC00, (uint32_t *)&ReflowParameters, 34);
 8001390:	2222      	movs	r2, #34	; 0x22
 8001392:	4903      	ldr	r1, [pc, #12]	; (80013a0 <SaveReflowParameters+0x14>)
 8001394:	4803      	ldr	r0, [pc, #12]	; (80013a4 <SaveReflowParameters+0x18>)
 8001396:	f7ff ff3b 	bl	8001210 <Flash_Write_Data>
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20001328 	.word	0x20001328
 80013a4:	0801fc00 	.word	0x0801fc00

080013a8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_Recieved_Data, 5);
 80013b0:	2205      	movs	r2, #5
 80013b2:	4905      	ldr	r1, [pc, #20]	; (80013c8 <HAL_UART_RxCpltCallback+0x20>)
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <HAL_UART_RxCpltCallback+0x24>)
 80013b6:	f004 ffe9 	bl	800638c <HAL_UART_Receive_IT>
	UART_Recieved_Flag =1;
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_UART_RxCpltCallback+0x28>)
 80013bc:	2201      	movs	r2, #1
 80013be:	701a      	strb	r2, [r3, #0]
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000004 	.word	0x20000004
 80013cc:	20000304 	.word	0x20000304
 80013d0:	200013b4 	.word	0x200013b4

080013d4 <NEXTION_SendString>:


void NEXTION_SendString (char *ID, char *string){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b090      	sub	sp, #64	; 0x40
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%s\"", ID, string);
 80013de:	f107 0008 	add.w	r0, r7, #8
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	490b      	ldr	r1, [pc, #44]	; (8001414 <NEXTION_SendString+0x40>)
 80013e8:	f006 f8e6 	bl	80075b8 <siprintf>
 80013ec:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 80013ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	f107 0108 	add.w	r1, r7, #8
 80013f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fa:	4807      	ldr	r0, [pc, #28]	; (8001418 <NEXTION_SendString+0x44>)
 80013fc:	f004 ff34 	bl	8006268 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8001400:	2364      	movs	r3, #100	; 0x64
 8001402:	2203      	movs	r2, #3
 8001404:	4905      	ldr	r1, [pc, #20]	; (800141c <NEXTION_SendString+0x48>)
 8001406:	4804      	ldr	r0, [pc, #16]	; (8001418 <NEXTION_SendString+0x44>)
 8001408:	f004 ff2e 	bl	8006268 <HAL_UART_Transmit>

}
 800140c:	bf00      	nop
 800140e:	3740      	adds	r7, #64	; 0x40
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	0800b060 	.word	0x0800b060
 8001418:	20000304 	.word	0x20000304
 800141c:	20000000 	.word	0x20000000

08001420 <NEXTION_SendFloat>:


void NEXTION_SendFloat (char *ID, float32_t number){
 8001420:	b580      	push	{r7, lr}
 8001422:	b092      	sub	sp, #72	; 0x48
 8001424:	af02      	add	r7, sp, #8
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%.2f\"", ID, number);
 800142a:	6838      	ldr	r0, [r7, #0]
 800142c:	f7fe fffc 	bl	8000428 <__aeabi_f2d>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	f107 0008 	add.w	r0, r7, #8
 8001438:	e9cd 2300 	strd	r2, r3, [sp]
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	490b      	ldr	r1, [pc, #44]	; (800146c <NEXTION_SendFloat+0x4c>)
 8001440:	f006 f8ba 	bl	80075b8 <siprintf>
 8001444:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 8001446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001448:	b29a      	uxth	r2, r3
 800144a:	f107 0108 	add.w	r1, r7, #8
 800144e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001452:	4807      	ldr	r0, [pc, #28]	; (8001470 <NEXTION_SendFloat+0x50>)
 8001454:	f004 ff08 	bl	8006268 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8001458:	2364      	movs	r3, #100	; 0x64
 800145a:	2203      	movs	r2, #3
 800145c:	4905      	ldr	r1, [pc, #20]	; (8001474 <NEXTION_SendFloat+0x54>)
 800145e:	4804      	ldr	r0, [pc, #16]	; (8001470 <NEXTION_SendFloat+0x50>)
 8001460:	f004 ff02 	bl	8006268 <HAL_UART_Transmit>
}
 8001464:	bf00      	nop
 8001466:	3740      	adds	r7, #64	; 0x40
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	0800b06c 	.word	0x0800b06c
 8001470:	20000304 	.word	0x20000304
 8001474:	20000000 	.word	0x20000000

08001478 <NEXTION_SendFloat_CurrentTemp>:

void NEXTION_SendFloat_CurrentTemp (char *ID, float32_t number){
 8001478:	b580      	push	{r7, lr}
 800147a:	b092      	sub	sp, #72	; 0x48
 800147c:	af02      	add	r7, sp, #8
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%.1f\"", ID, number);
 8001482:	6838      	ldr	r0, [r7, #0]
 8001484:	f7fe ffd0 	bl	8000428 <__aeabi_f2d>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	f107 0008 	add.w	r0, r7, #8
 8001490:	e9cd 2300 	strd	r2, r3, [sp]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	490b      	ldr	r1, [pc, #44]	; (80014c4 <NEXTION_SendFloat_CurrentTemp+0x4c>)
 8001498:	f006 f88e 	bl	80075b8 <siprintf>
 800149c:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 800149e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	f107 0108 	add.w	r1, r7, #8
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	4807      	ldr	r0, [pc, #28]	; (80014c8 <NEXTION_SendFloat_CurrentTemp+0x50>)
 80014ac:	f004 fedc 	bl	8006268 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 80014b0:	2364      	movs	r3, #100	; 0x64
 80014b2:	2203      	movs	r2, #3
 80014b4:	4905      	ldr	r1, [pc, #20]	; (80014cc <NEXTION_SendFloat_CurrentTemp+0x54>)
 80014b6:	4804      	ldr	r0, [pc, #16]	; (80014c8 <NEXTION_SendFloat_CurrentTemp+0x50>)
 80014b8:	f004 fed6 	bl	8006268 <HAL_UART_Transmit>
}
 80014bc:	bf00      	nop
 80014be:	3740      	adds	r7, #64	; 0x40
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	0800b07c 	.word	0x0800b07c
 80014c8:	20000304 	.word	0x20000304
 80014cc:	20000000 	.word	0x20000000

080014d0 <NEXTION_SenduInt>:


void NEXTION_SenduInt (char *ID, uint32_t number){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b090      	sub	sp, #64	; 0x40
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%lu\"", ID, number);
 80014da:	f107 0008 	add.w	r0, r7, #8
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	490b      	ldr	r1, [pc, #44]	; (8001510 <NEXTION_SenduInt+0x40>)
 80014e4:	f006 f868 	bl	80075b8 <siprintf>
 80014e8:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 80014ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	f107 0108 	add.w	r1, r7, #8
 80014f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f6:	4807      	ldr	r0, [pc, #28]	; (8001514 <NEXTION_SenduInt+0x44>)
 80014f8:	f004 feb6 	bl	8006268 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 80014fc:	2364      	movs	r3, #100	; 0x64
 80014fe:	2203      	movs	r2, #3
 8001500:	4905      	ldr	r1, [pc, #20]	; (8001518 <NEXTION_SenduInt+0x48>)
 8001502:	4804      	ldr	r0, [pc, #16]	; (8001514 <NEXTION_SenduInt+0x44>)
 8001504:	f004 feb0 	bl	8006268 <HAL_UART_Transmit>
}
 8001508:	bf00      	nop
 800150a:	3740      	adds	r7, #64	; 0x40
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	0800b08c 	.word	0x0800b08c
 8001514:	20000304 	.word	0x20000304
 8001518:	20000000 	.word	0x20000000

0800151c <NEXTION_CMD>:


void NEXTION_CMD (char *string){
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)string, strlen(string), 1000);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7fe fe13 	bl	8000150 <strlen>
 800152a:	4603      	mov	r3, r0
 800152c:	b29a      	uxth	r2, r3
 800152e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4806      	ldr	r0, [pc, #24]	; (8001550 <NEXTION_CMD+0x34>)
 8001536:	f004 fe97 	bl	8006268 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 800153a:	2364      	movs	r3, #100	; 0x64
 800153c:	2203      	movs	r2, #3
 800153e:	4905      	ldr	r1, [pc, #20]	; (8001554 <NEXTION_CMD+0x38>)
 8001540:	4803      	ldr	r0, [pc, #12]	; (8001550 <NEXTION_CMD+0x34>)
 8001542:	f004 fe91 	bl	8006268 <HAL_UART_Transmit>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000304 	.word	0x20000304
 8001554:	20000000 	.word	0x20000000

08001558 <NextionDrawDot>:
	NEXTION_SenduInt("t5", ReflowParameters.ReflowTempeture);
	NEXTION_SenduInt("t6", ReflowParameters.ReflowTime);
}


void NextionDrawDot(uint32_t x, uint32_t y){
 8001558:	b580      	push	{r7, lr}
 800155a:	b090      	sub	sp, #64	; 0x40
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]

	char buf[50];
	int len = sprintf(buf, "cirs %lu,%lu,2,1311", x, y);	//RGB888: 0.160.255 RGB565:1311
 8001562:	f107 0008 	add.w	r0, r7, #8
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	490b      	ldr	r1, [pc, #44]	; (8001598 <NextionDrawDot+0x40>)
 800156c:	f006 f824 	bl	80075b8 <siprintf>
 8001570:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 8001572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001574:	b29a      	uxth	r2, r3
 8001576:	f107 0108 	add.w	r1, r7, #8
 800157a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157e:	4807      	ldr	r0, [pc, #28]	; (800159c <NextionDrawDot+0x44>)
 8001580:	f004 fe72 	bl	8006268 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8001584:	2364      	movs	r3, #100	; 0x64
 8001586:	2203      	movs	r2, #3
 8001588:	4905      	ldr	r1, [pc, #20]	; (80015a0 <NextionDrawDot+0x48>)
 800158a:	4804      	ldr	r0, [pc, #16]	; (800159c <NextionDrawDot+0x44>)
 800158c:	f004 fe6c 	bl	8006268 <HAL_UART_Transmit>
}
 8001590:	bf00      	nop
 8001592:	3740      	adds	r7, #64	; 0x40
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	0800b0b4 	.word	0x0800b0b4
 800159c:	20000304 	.word	0x20000304
 80015a0:	20000000 	.word	0x20000000

080015a4 <NextionDrawTemp>:


void NextionDrawTemp(uint32_t x, uint32_t y){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b090      	sub	sp, #64	; 0x40
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]

	char buf[50];
	int len = sprintf(buf, "cirs %lu,%lu,2,RED", x, y);
 80015ae:	f107 0008 	add.w	r0, r7, #8
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	490b      	ldr	r1, [pc, #44]	; (80015e4 <NextionDrawTemp+0x40>)
 80015b8:	f005 fffe 	bl	80075b8 <siprintf>
 80015bc:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 80015be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	f107 0108 	add.w	r1, r7, #8
 80015c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ca:	4807      	ldr	r0, [pc, #28]	; (80015e8 <NextionDrawTemp+0x44>)
 80015cc:	f004 fe4c 	bl	8006268 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 80015d0:	2364      	movs	r3, #100	; 0x64
 80015d2:	2203      	movs	r2, #3
 80015d4:	4905      	ldr	r1, [pc, #20]	; (80015ec <NextionDrawTemp+0x48>)
 80015d6:	4804      	ldr	r0, [pc, #16]	; (80015e8 <NextionDrawTemp+0x44>)
 80015d8:	f004 fe46 	bl	8006268 <HAL_UART_Transmit>
}
 80015dc:	bf00      	nop
 80015de:	3740      	adds	r7, #64	; 0x40
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	0800b0c8 	.word	0x0800b0c8
 80015e8:	20000304 	.word	0x20000304
 80015ec:	20000000 	.word	0x20000000

080015f0 <HandleKeyPad>:

float32_t HandleKeyPad() {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0

	//clear Input
	for (int i = 0; i < 20; i++) {
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	e007      	b.n	800160c <HandleKeyPad+0x1c>
		input[i] = 0;
 80015fc:	4a29      	ldr	r2, [pc, #164]	; (80016a4 <HandleKeyPad+0xb4>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 20; i++) {
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3301      	adds	r3, #1
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b13      	cmp	r3, #19
 8001610:	ddf4      	ble.n	80015fc <HandleKeyPad+0xc>
	}

	uint8_t index = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	70fb      	strb	r3, [r7, #3]

	NEXTION_SendString("t0", "");
 8001616:	4924      	ldr	r1, [pc, #144]	; (80016a8 <HandleKeyPad+0xb8>)
 8001618:	4824      	ldr	r0, [pc, #144]	; (80016ac <HandleKeyPad+0xbc>)
 800161a:	f7ff fedb 	bl	80013d4 <NEXTION_SendString>
	UART_Recieved_Flag = 0;
 800161e:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <HandleKeyPad+0xc0>)
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]

	while (strncmp((char*) UART_Recieved_Data, "enter", 5) != 0) {
 8001624:	e027      	b.n	8001676 <HandleKeyPad+0x86>

		if(strncmp((char*) UART_Recieved_Data, "abbre", 5) == 0)
 8001626:	2205      	movs	r2, #5
 8001628:	4922      	ldr	r1, [pc, #136]	; (80016b4 <HandleKeyPad+0xc4>)
 800162a:	4823      	ldr	r0, [pc, #140]	; (80016b8 <HandleKeyPad+0xc8>)
 800162c:	f005 ffe4 	bl	80075f8 <strncmp>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HandleKeyPad+0x4a>
				return 9999;
 8001636:	4b21      	ldr	r3, [pc, #132]	; (80016bc <HandleKeyPad+0xcc>)
 8001638:	e02f      	b.n	800169a <HandleKeyPad+0xaa>
		if(strncmp((char*) UART_Recieved_Data, "kback", 5) == 0)
 800163a:	2205      	movs	r2, #5
 800163c:	4920      	ldr	r1, [pc, #128]	; (80016c0 <HandleKeyPad+0xd0>)
 800163e:	481e      	ldr	r0, [pc, #120]	; (80016b8 <HandleKeyPad+0xc8>)
 8001640:	f005 ffda 	bl	80075f8 <strncmp>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HandleKeyPad+0x5e>
				return 8888;
 800164a:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <HandleKeyPad+0xd4>)
 800164c:	e025      	b.n	800169a <HandleKeyPad+0xaa>

		if (UART_Recieved_Flag == 1) {
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <HandleKeyPad+0xc0>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b01      	cmp	r3, #1
 8001656:	d10e      	bne.n	8001676 <HandleKeyPad+0x86>
			input[index] = UART_Recieved_Data[4];
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	4a17      	ldr	r2, [pc, #92]	; (80016b8 <HandleKeyPad+0xc8>)
 800165c:	7911      	ldrb	r1, [r2, #4]
 800165e:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <HandleKeyPad+0xb4>)
 8001660:	54d1      	strb	r1, [r2, r3]
			UART_Recieved_Flag = 0;
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <HandleKeyPad+0xc0>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
			index++;
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	3301      	adds	r3, #1
 800166c:	70fb      	strb	r3, [r7, #3]
			NEXTION_SendString("t0", input);
 800166e:	490d      	ldr	r1, [pc, #52]	; (80016a4 <HandleKeyPad+0xb4>)
 8001670:	480e      	ldr	r0, [pc, #56]	; (80016ac <HandleKeyPad+0xbc>)
 8001672:	f7ff feaf 	bl	80013d4 <NEXTION_SendString>
	while (strncmp((char*) UART_Recieved_Data, "enter", 5) != 0) {
 8001676:	2205      	movs	r2, #5
 8001678:	4913      	ldr	r1, [pc, #76]	; (80016c8 <HandleKeyPad+0xd8>)
 800167a:	480f      	ldr	r0, [pc, #60]	; (80016b8 <HandleKeyPad+0xc8>)
 800167c:	f005 ffbc 	bl	80075f8 <strncmp>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1cf      	bne.n	8001626 <HandleKeyPad+0x36>
		}
	}
	return atof(input);
 8001686:	4807      	ldr	r0, [pc, #28]	; (80016a4 <HandleKeyPad+0xb4>)
 8001688:	f005 fb00 	bl	8006c8c <atof>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fa18 	bl	8000ac8 <__aeabi_d2f>
 8001698:	4603      	mov	r3, r0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200013b8 	.word	0x200013b8
 80016a8:	0800b0dc 	.word	0x0800b0dc
 80016ac:	0800b0e0 	.word	0x0800b0e0
 80016b0:	200013b4 	.word	0x200013b4
 80016b4:	0800b0e4 	.word	0x0800b0e4
 80016b8:	20000004 	.word	0x20000004
 80016bc:	461c3c00 	.word	0x461c3c00
 80016c0:	0800b0ec 	.word	0x0800b0ec
 80016c4:	460ae000 	.word	0x460ae000
 80016c8:	0800b0f4 	.word	0x0800b0f4

080016cc <Update_Page_3>:


void Update_Page_3() {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
	uint8_t defaultUart[5] = {'p','3','x','x','x'};
 80016d2:	4a20      	ldr	r2, [pc, #128]	; (8001754 <Update_Page_3+0x88>)
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016da:	6018      	str	r0, [r3, #0]
 80016dc:	3304      	adds	r3, #4
 80016de:	7019      	strb	r1, [r3, #0]
	for(int i=0;i<5;i++){
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	e00b      	b.n	80016fe <Update_Page_3+0x32>
		UART_Recieved_Data[i]=defaultUart[i];
 80016e6:	1d3a      	adds	r2, r7, #4
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4413      	add	r3, r2
 80016ec:	7819      	ldrb	r1, [r3, #0]
 80016ee:	4a1a      	ldr	r2, [pc, #104]	; (8001758 <Update_Page_3+0x8c>)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4413      	add	r3, r2
 80016f4:	460a      	mov	r2, r1
 80016f6:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<5;i++){
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	3301      	adds	r3, #1
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2b04      	cmp	r3, #4
 8001702:	ddf0      	ble.n	80016e6 <Update_Page_3+0x1a>
	}

	NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <Update_Page_3+0x90>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	4619      	mov	r1, r3
 800170a:	4815      	ldr	r0, [pc, #84]	; (8001760 <Update_Page_3+0x94>)
 800170c:	f7ff fe88 	bl	8001420 <NEXTION_SendFloat>
	NEXTION_SenduInt("t1", ReflowParameters.SoakTime);
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <Update_Page_3+0x90>)
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	4619      	mov	r1, r3
 8001716:	4813      	ldr	r0, [pc, #76]	; (8001764 <Update_Page_3+0x98>)
 8001718:	f7ff feda 	bl	80014d0 <NEXTION_SenduInt>
	NEXTION_SenduInt("t2", ReflowParameters.SoakTempeture);
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <Update_Page_3+0x90>)
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	4619      	mov	r1, r3
 8001722:	4811      	ldr	r0, [pc, #68]	; (8001768 <Update_Page_3+0x9c>)
 8001724:	f7ff fed4 	bl	80014d0 <NEXTION_SenduInt>
	NEXTION_SendFloat("t3", ReflowParameters.secondHeatUpRate);
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <Update_Page_3+0x90>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	4619      	mov	r1, r3
 800172e:	480f      	ldr	r0, [pc, #60]	; (800176c <Update_Page_3+0xa0>)
 8001730:	f7ff fe76 	bl	8001420 <NEXTION_SendFloat>
	NEXTION_SenduInt("t4", ReflowParameters.ReflowTime);
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <Update_Page_3+0x90>)
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4619      	mov	r1, r3
 800173a:	480d      	ldr	r0, [pc, #52]	; (8001770 <Update_Page_3+0xa4>)
 800173c:	f7ff fec8 	bl	80014d0 <NEXTION_SenduInt>
	NEXTION_SenduInt("t5", ReflowParameters.ReflowTempeture);
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <Update_Page_3+0x90>)
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	4619      	mov	r1, r3
 8001746:	480b      	ldr	r0, [pc, #44]	; (8001774 <Update_Page_3+0xa8>)
 8001748:	f7ff fec2 	bl	80014d0 <NEXTION_SenduInt>

}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	0800b0fc 	.word	0x0800b0fc
 8001758:	20000004 	.word	0x20000004
 800175c:	20001328 	.word	0x20001328
 8001760:	0800b0e0 	.word	0x0800b0e0
 8001764:	0800b09c 	.word	0x0800b09c
 8001768:	0800b0a0 	.word	0x0800b0a0
 800176c:	0800b0a4 	.word	0x0800b0a4
 8001770:	0800b0a8 	.word	0x0800b0a8
 8001774:	0800b0ac 	.word	0x0800b0ac

08001778 <Update_Page_0>:


void Update_Page_0() {
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b089      	sub	sp, #36	; 0x24
 800177c:	af00      	add	r7, sp, #0
	uint8_t defaultUart[5] = {'p','0','x','x','x'};
 800177e:	4a44      	ldr	r2, [pc, #272]	; (8001890 <Update_Page_0+0x118>)
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001786:	6018      	str	r0, [r3, #0]
 8001788:	3304      	adds	r3, #4
 800178a:	7019      	strb	r1, [r3, #0]
	for(int i=0;i<5;i++)	{
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
 8001790:	e00b      	b.n	80017aa <Update_Page_0+0x32>
		UART_Recieved_Data[i]=defaultUart[i];
 8001792:	1d3a      	adds	r2, r7, #4
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	4413      	add	r3, r2
 8001798:	7819      	ldrb	r1, [r3, #0]
 800179a:	4a3e      	ldr	r2, [pc, #248]	; (8001894 <Update_Page_0+0x11c>)
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	4413      	add	r3, r2
 80017a0:	460a      	mov	r2, r1
 80017a2:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<5;i++)	{
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	3301      	adds	r3, #1
 80017a8:	61fb      	str	r3, [r7, #28]
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	ddf0      	ble.n	8001792 <Update_Page_0+0x1a>
	}

	float32_t dx = 0.20833; //275px / 660s / 500 ms
 80017b0:	4b39      	ldr	r3, [pc, #228]	; (8001898 <Update_Page_0+0x120>)
 80017b2:	61bb      	str	r3, [r7, #24]
	float32_t dy = 0.7000; //175px / 250 Grad
 80017b4:	4b39      	ldr	r3, [pc, #228]	; (800189c <Update_Page_0+0x124>)
 80017b6:	617b      	str	r3, [r7, #20]
	uint32_t OffsetX = 35;
 80017b8:	2323      	movs	r3, #35	; 0x23
 80017ba:	613b      	str	r3, [r7, #16]
	uint32_t OffsetY = 245;
 80017bc:	23f5      	movs	r3, #245	; 0xf5
 80017be:	60fb      	str	r3, [r7, #12]

		//Reflow Aktuelle Temperatur anzeigen:
		if (ReflowEnable == 1)	{
 80017c0:	4b37      	ldr	r3, [pc, #220]	; (80018a0 <Update_Page_0+0x128>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d102      	bne.n	80017ce <Update_Page_0+0x56>
			TempDrawEnable = 1;
 80017c8:	4b36      	ldr	r3, [pc, #216]	; (80018a4 <Update_Page_0+0x12c>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]

		}

		if(TempDrawEnable == 1){
 80017ce:	4b35      	ldr	r3, [pc, #212]	; (80018a4 <Update_Page_0+0x12c>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d12a      	bne.n	800182c <Update_Page_0+0xb4>
			NextionDrawTemp(OffsetX + (uint32_t)((float32_t)(TempDrawCounter)*dx), OffsetY - (uint32_t)((float32_t)(temp)*dy));
 80017d6:	4b34      	ldr	r3, [pc, #208]	; (80018a8 <Update_Page_0+0x130>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fa7a 	bl	8000cd4 <__aeabi_ui2f>
 80017e0:	4603      	mov	r3, r0
 80017e2:	69b9      	ldr	r1, [r7, #24]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff facd 	bl	8000d84 <__aeabi_fmul>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fc8f 	bl	8001110 <__aeabi_f2uiz>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	18d4      	adds	r4, r2, r3
 80017f8:	4b2c      	ldr	r3, [pc, #176]	; (80018ac <Update_Page_0+0x134>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6979      	ldr	r1, [r7, #20]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fac0 	bl	8000d84 <__aeabi_fmul>
 8001804:	4603      	mov	r3, r0
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fc82 	bl	8001110 <__aeabi_f2uiz>
 800180c:	4602      	mov	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1a9b      	subs	r3, r3, r2
 8001812:	4619      	mov	r1, r3
 8001814:	4620      	mov	r0, r4
 8001816:	f7ff fec5 	bl	80015a4 <NextionDrawTemp>

		if(ReflowCurve[TempDrawCounter] == 0 ){
 800181a:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <Update_Page_0+0x130>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a24      	ldr	r2, [pc, #144]	; (80018b0 <Update_Page_0+0x138>)
 8001820:	5cd3      	ldrb	r3, [r2, r3]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d102      	bne.n	800182c <Update_Page_0+0xb4>
			TempDrawEnable = 0;
 8001826:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <Update_Page_0+0x12c>)
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
		}


		}

	NEXTION_SendFloat_CurrentTemp("t0", temp);
 800182c:	4b1f      	ldr	r3, [pc, #124]	; (80018ac <Update_Page_0+0x134>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	4820      	ldr	r0, [pc, #128]	; (80018b4 <Update_Page_0+0x13c>)
 8001834:	f7ff fe20 	bl	8001478 <NEXTION_SendFloat_CurrentTemp>
	NEXTION_SendFloat("t1", ReflowParameters.firstHeatUpRate);
 8001838:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <Update_Page_0+0x140>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	4619      	mov	r1, r3
 800183e:	481f      	ldr	r0, [pc, #124]	; (80018bc <Update_Page_0+0x144>)
 8001840:	f7ff fdee 	bl	8001420 <NEXTION_SendFloat>
	NEXTION_SenduInt("t3", ReflowParameters.SoakTime);
 8001844:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <Update_Page_0+0x140>)
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	4619      	mov	r1, r3
 800184a:	481d      	ldr	r0, [pc, #116]	; (80018c0 <Update_Page_0+0x148>)
 800184c:	f7ff fe40 	bl	80014d0 <NEXTION_SenduInt>
	NEXTION_SenduInt("t2", ReflowParameters.SoakTempeture);
 8001850:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <Update_Page_0+0x140>)
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	4619      	mov	r1, r3
 8001856:	481b      	ldr	r0, [pc, #108]	; (80018c4 <Update_Page_0+0x14c>)
 8001858:	f7ff fe3a 	bl	80014d0 <NEXTION_SenduInt>
	NEXTION_SendFloat("t4", ReflowParameters.secondHeatUpRate);
 800185c:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <Update_Page_0+0x140>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	4619      	mov	r1, r3
 8001862:	4819      	ldr	r0, [pc, #100]	; (80018c8 <Update_Page_0+0x150>)
 8001864:	f7ff fddc 	bl	8001420 <NEXTION_SendFloat>
	NEXTION_SenduInt("t6", ReflowParameters.ReflowTime);
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <Update_Page_0+0x140>)
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	4619      	mov	r1, r3
 800186e:	4817      	ldr	r0, [pc, #92]	; (80018cc <Update_Page_0+0x154>)
 8001870:	f7ff fe2e 	bl	80014d0 <NEXTION_SenduInt>
	NEXTION_SenduInt("t5", ReflowParameters.ReflowTempeture);
 8001874:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <Update_Page_0+0x140>)
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	4619      	mov	r1, r3
 800187a:	4815      	ldr	r0, [pc, #84]	; (80018d0 <Update_Page_0+0x158>)
 800187c:	f7ff fe28 	bl	80014d0 <NEXTION_SenduInt>
	NEXTION_SendString("g1", ConsoleMSG);
 8001880:	4914      	ldr	r1, [pc, #80]	; (80018d4 <Update_Page_0+0x15c>)
 8001882:	4815      	ldr	r0, [pc, #84]	; (80018d8 <Update_Page_0+0x160>)
 8001884:	f7ff fda6 	bl	80013d4 <NEXTION_SendString>

}
 8001888:	bf00      	nop
 800188a:	3724      	adds	r7, #36	; 0x24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd90      	pop	{r4, r7, pc}
 8001890:	0800b108 	.word	0x0800b108
 8001894:	20000004 	.word	0x20000004
 8001898:	3e555476 	.word	0x3e555476
 800189c:	3f333333 	.word	0x3f333333
 80018a0:	200013b0 	.word	0x200013b0
 80018a4:	200013f1 	.word	0x200013f1
 80018a8:	200013f4 	.word	0x200013f4
 80018ac:	200012f8 	.word	0x200012f8
 80018b0:	20000358 	.word	0x20000358
 80018b4:	0800b0e0 	.word	0x0800b0e0
 80018b8:	20001328 	.word	0x20001328
 80018bc:	0800b09c 	.word	0x0800b09c
 80018c0:	0800b0a4 	.word	0x0800b0a4
 80018c4:	0800b0a0 	.word	0x0800b0a0
 80018c8:	0800b0a8 	.word	0x0800b0a8
 80018cc:	0800b0b0 	.word	0x0800b0b0
 80018d0:	0800b0ac 	.word	0x0800b0ac
 80018d4:	200013d8 	.word	0x200013d8
 80018d8:	0800b104 	.word	0x0800b104

080018dc <Update_Page_2>:


void Update_Page_2() {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
	uint8_t defaultUart[5] = {'p','2','x','x','x'};
 80018e2:	4a1f      	ldr	r2, [pc, #124]	; (8001960 <Update_Page_2+0x84>)
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018ea:	6018      	str	r0, [r3, #0]
 80018ec:	3304      	adds	r3, #4
 80018ee:	7019      	strb	r1, [r3, #0]
	for(int i=0;i<5;i++){
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	e00b      	b.n	800190e <Update_Page_2+0x32>
		UART_Recieved_Data[i]=defaultUart[i];
 80018f6:	1d3a      	adds	r2, r7, #4
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4413      	add	r3, r2
 80018fc:	7819      	ldrb	r1, [r3, #0]
 80018fe:	4a19      	ldr	r2, [pc, #100]	; (8001964 <Update_Page_2+0x88>)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4413      	add	r3, r2
 8001904:	460a      	mov	r2, r1
 8001906:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<5;i++){
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3301      	adds	r3, #1
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2b04      	cmp	r3, #4
 8001912:	ddf0      	ble.n	80018f6 <Update_Page_2+0x1a>
	}

	NEXTION_SendFloat("t0", ReflowParameters.KP);
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <Update_Page_2+0x8c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4619      	mov	r1, r3
 800191a:	4814      	ldr	r0, [pc, #80]	; (800196c <Update_Page_2+0x90>)
 800191c:	f7ff fd80 	bl	8001420 <NEXTION_SendFloat>
	NEXTION_SendFloat("t1", ReflowParameters.Ki);
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <Update_Page_2+0x8c>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	4619      	mov	r1, r3
 8001926:	4812      	ldr	r0, [pc, #72]	; (8001970 <Update_Page_2+0x94>)
 8001928:	f7ff fd7a 	bl	8001420 <NEXTION_SendFloat>
	NEXTION_SendFloat("t2", ReflowParameters.KD);
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <Update_Page_2+0x8c>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	4619      	mov	r1, r3
 8001932:	4810      	ldr	r0, [pc, #64]	; (8001974 <Update_Page_2+0x98>)
 8001934:	f7ff fd74 	bl	8001420 <NEXTION_SendFloat>
	NEXTION_SendFloat("t3", (float32_t) ReflowParameters.version/100);
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <Update_Page_2+0x8c>)
 800193a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f9c8 	bl	8000cd4 <__aeabi_ui2f>
 8001944:	4603      	mov	r3, r0
 8001946:	490c      	ldr	r1, [pc, #48]	; (8001978 <Update_Page_2+0x9c>)
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff facf 	bl	8000eec <__aeabi_fdiv>
 800194e:	4603      	mov	r3, r0
 8001950:	4619      	mov	r1, r3
 8001952:	480a      	ldr	r0, [pc, #40]	; (800197c <Update_Page_2+0xa0>)
 8001954:	f7ff fd64 	bl	8001420 <NEXTION_SendFloat>
}
 8001958:	bf00      	nop
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	0800b110 	.word	0x0800b110
 8001964:	20000004 	.word	0x20000004
 8001968:	20001328 	.word	0x20001328
 800196c:	0800b0e0 	.word	0x0800b0e0
 8001970:	0800b09c 	.word	0x0800b09c
 8001974:	0800b0a0 	.word	0x0800b0a0
 8001978:	42c80000 	.word	0x42c80000
 800197c:	0800b0a4 	.word	0x0800b0a4

08001980 <HandleGui>:


void HandleGui(){
 8001980:	b580      	push	{r7, lr}
 8001982:	b0a4      	sub	sp, #144	; 0x90
 8001984:	af00      	add	r7, sp, #0
	//###################Page0##########################

	if(strncmp((char *)UART_Recieved_Data, "p0xxx", 5) == 0){
 8001986:	2205      	movs	r2, #5
 8001988:	498a      	ldr	r1, [pc, #552]	; (8001bb4 <HandleGui+0x234>)
 800198a:	488b      	ldr	r0, [pc, #556]	; (8001bb8 <HandleGui+0x238>)
 800198c:	f005 fe34 	bl	80075f8 <strncmp>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HandleGui+0x1a>
			Update_Page_0();
 8001996:	f7ff feef 	bl	8001778 <Update_Page_0>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b02", 5) == 0){
 800199a:	2205      	movs	r2, #5
 800199c:	4987      	ldr	r1, [pc, #540]	; (8001bbc <HandleGui+0x23c>)
 800199e:	4886      	ldr	r0, [pc, #536]	; (8001bb8 <HandleGui+0x238>)
 80019a0:	f005 fe2a 	bl	80075f8 <strncmp>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HandleGui+0x2e>
			Update_Page_3();
 80019aa:	f7ff fe8f 	bl	80016cc <Update_Page_3>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b00", 5) == 0){
 80019ae:	2205      	movs	r2, #5
 80019b0:	4983      	ldr	r1, [pc, #524]	; (8001bc0 <HandleGui+0x240>)
 80019b2:	4881      	ldr	r0, [pc, #516]	; (8001bb8 <HandleGui+0x238>)
 80019b4:	f005 fe20 	bl	80075f8 <strncmp>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d103      	bne.n	80019c6 <HandleGui+0x46>
			startReflow();
 80019be:	f001 f88b 	bl	8002ad8 <startReflow>
			Update_Page_0();
 80019c2:	f7ff fed9 	bl	8001778 <Update_Page_0>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b01", 5) == 0){
 80019c6:	2205      	movs	r2, #5
 80019c8:	497e      	ldr	r1, [pc, #504]	; (8001bc4 <HandleGui+0x244>)
 80019ca:	487b      	ldr	r0, [pc, #492]	; (8001bb8 <HandleGui+0x238>)
 80019cc:	f005 fe14 	bl	80075f8 <strncmp>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10a      	bne.n	80019ec <HandleGui+0x6c>
			stopReflow();
 80019d6:	f001 f897 	bl	8002b08 <stopReflow>
			  // buzzer beeps at the FINISHED cycle until STOP button pressed
			  if (BuzzerEnable == 1)	{
 80019da:	4b7b      	ldr	r3, [pc, #492]	; (8001bc8 <HandleGui+0x248>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d102      	bne.n	80019e8 <HandleGui+0x68>
				  BuzzerEnable = 0;
 80019e2:	4b79      	ldr	r3, [pc, #484]	; (8001bc8 <HandleGui+0x248>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
			  }
			Update_Page_0();
 80019e8:	f7ff fec6 	bl	8001778 <Update_Page_0>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b02", 5) == 0){
 80019ec:	2205      	movs	r2, #5
 80019ee:	4973      	ldr	r1, [pc, #460]	; (8001bbc <HandleGui+0x23c>)
 80019f0:	4871      	ldr	r0, [pc, #452]	; (8001bb8 <HandleGui+0x238>)
 80019f2:	f005 fe01 	bl	80075f8 <strncmp>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HandleGui+0x80>
			Update_Page_3();
 80019fc:	f7ff fe66 	bl	80016cc <Update_Page_3>
			}

	//###################Page2##########################

	  if(strncmp((char *)UART_Recieved_Data, "p2xxx", 5) == 0){
 8001a00:	2205      	movs	r2, #5
 8001a02:	4972      	ldr	r1, [pc, #456]	; (8001bcc <HandleGui+0x24c>)
 8001a04:	486c      	ldr	r0, [pc, #432]	; (8001bb8 <HandleGui+0x238>)
 8001a06:	f005 fdf7 	bl	80075f8 <strncmp>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HandleGui+0x94>
		Update_Page_2();
 8001a10:	f7ff ff64 	bl	80018dc <Update_Page_2>
		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b00", 5) == 0){
 8001a14:	2205      	movs	r2, #5
 8001a16:	496e      	ldr	r1, [pc, #440]	; (8001bd0 <HandleGui+0x250>)
 8001a18:	4867      	ldr	r0, [pc, #412]	; (8001bb8 <HandleGui+0x238>)
 8001a1a:	f005 fded 	bl	80075f8 <strncmp>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d152      	bne.n	8001aca <HandleGui+0x14a>
			  float32_t Output =0;
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			  Output = HandleKeyPad();
 8001a2c:	f7ff fde0 	bl	80015f0 <HandleKeyPad>
 8001a30:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			  while(Output == 9999){
 8001a34:	e024      	b.n	8001a80 <HandleGui+0x100>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001a36:	4a67      	ldr	r2, [pc, #412]	; (8001bd4 <HandleGui+0x254>)
 8001a38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a40:	6018      	str	r0, [r3, #0]
 8001a42:	3304      	adds	r3, #4
 8001a44:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001a46:	2300      	movs	r3, #0
 8001a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a4c:	e010      	b.n	8001a70 <HandleGui+0xf0>
						UART_Recieved_Data[i]=defaultUart[i];
 8001a4e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001a52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a56:	4413      	add	r3, r2
 8001a58:	7819      	ldrb	r1, [r3, #0]
 8001a5a:	4a57      	ldr	r2, [pc, #348]	; (8001bb8 <HandleGui+0x238>)
 8001a5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a60:	4413      	add	r3, r2
 8001a62:	460a      	mov	r2, r1
 8001a64:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001a66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	ddea      	ble.n	8001a4e <HandleGui+0xce>
					}
				  Output = HandleKeyPad();
 8001a78:	f7ff fdba 	bl	80015f0 <HandleKeyPad>
 8001a7c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			  while(Output == 9999){
 8001a80:	4955      	ldr	r1, [pc, #340]	; (8001bd8 <HandleGui+0x258>)
 8001a82:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001a86:	f7ff fb11 	bl	80010ac <__aeabi_fcmpeq>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1d2      	bne.n	8001a36 <HandleGui+0xb6>
			  }
			  if(Output == 8888){
 8001a90:	4952      	ldr	r1, [pc, #328]	; (8001bdc <HandleGui+0x25c>)
 8001a92:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001a96:	f7ff fb09 	bl	80010ac <__aeabi_fcmpeq>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HandleGui+0x128>
				 Output = ReflowParameters.KP;
 8001aa0:	4b4f      	ldr	r3, [pc, #316]	; (8001be0 <HandleGui+0x260>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			  }

	    ReflowParameters.KP = Output;
 8001aa8:	4a4d      	ldr	r2, [pc, #308]	; (8001be0 <HandleGui+0x260>)
 8001aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001aae:	6013      	str	r3, [r2, #0]
	    PID.Kp = ReflowParameters.KP;
 8001ab0:	4b4b      	ldr	r3, [pc, #300]	; (8001be0 <HandleGui+0x260>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a4b      	ldr	r2, [pc, #300]	; (8001be4 <HandleGui+0x264>)
 8001ab6:	6193      	str	r3, [r2, #24]
		arm_pid_init_f32(&PID, 1);
 8001ab8:	2101      	movs	r1, #1
 8001aba:	484a      	ldr	r0, [pc, #296]	; (8001be4 <HandleGui+0x264>)
 8001abc:	f005 f8be 	bl	8006c3c <arm_pid_init_f32>
		Update_Page_2();
 8001ac0:	f7ff ff0c 	bl	80018dc <Update_Page_2>
		NEXTION_CMD("page 2");
 8001ac4:	4848      	ldr	r0, [pc, #288]	; (8001be8 <HandleGui+0x268>)
 8001ac6:	f7ff fd29 	bl	800151c <NEXTION_CMD>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b01", 5) == 0){
 8001aca:	2205      	movs	r2, #5
 8001acc:	4947      	ldr	r1, [pc, #284]	; (8001bec <HandleGui+0x26c>)
 8001ace:	483a      	ldr	r0, [pc, #232]	; (8001bb8 <HandleGui+0x238>)
 8001ad0:	f005 fd92 	bl	80075f8 <strncmp>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d152      	bne.n	8001b80 <HandleGui+0x200>
			  float32_t Output =0;
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			  Output = HandleKeyPad();
 8001ae2:	f7ff fd85 	bl	80015f0 <HandleKeyPad>
 8001ae6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			  while(Output == 9999){
 8001aea:	e024      	b.n	8001b36 <HandleGui+0x1b6>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001aec:	4a39      	ldr	r2, [pc, #228]	; (8001bd4 <HandleGui+0x254>)
 8001aee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001af2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001af6:	6018      	str	r0, [r3, #0]
 8001af8:	3304      	adds	r3, #4
 8001afa:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001afc:	2300      	movs	r3, #0
 8001afe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b02:	e010      	b.n	8001b26 <HandleGui+0x1a6>
						UART_Recieved_Data[i]=defaultUart[i];
 8001b04:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b0c:	4413      	add	r3, r2
 8001b0e:	7819      	ldrb	r1, [r3, #0]
 8001b10:	4a29      	ldr	r2, [pc, #164]	; (8001bb8 <HandleGui+0x238>)
 8001b12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b16:	4413      	add	r3, r2
 8001b18:	460a      	mov	r2, r1
 8001b1a:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001b1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b20:	3301      	adds	r3, #1
 8001b22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	ddea      	ble.n	8001b04 <HandleGui+0x184>
					}
				  Output = HandleKeyPad();
 8001b2e:	f7ff fd5f 	bl	80015f0 <HandleKeyPad>
 8001b32:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			  while(Output == 9999){
 8001b36:	4928      	ldr	r1, [pc, #160]	; (8001bd8 <HandleGui+0x258>)
 8001b38:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001b3c:	f7ff fab6 	bl	80010ac <__aeabi_fcmpeq>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1d2      	bne.n	8001aec <HandleGui+0x16c>
			  }
			  if(Output == 8888){
 8001b46:	4925      	ldr	r1, [pc, #148]	; (8001bdc <HandleGui+0x25c>)
 8001b48:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001b4c:	f7ff faae 	bl	80010ac <__aeabi_fcmpeq>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HandleGui+0x1de>
				 Output = ReflowParameters.Ki;
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <HandleGui+0x260>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			  }
			  ReflowParameters.Ki = Output;
 8001b5e:	4a20      	ldr	r2, [pc, #128]	; (8001be0 <HandleGui+0x260>)
 8001b60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b64:	6053      	str	r3, [r2, #4]
			  	    PID.Ki = ReflowParameters.Ki;
 8001b66:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <HandleGui+0x260>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4a1e      	ldr	r2, [pc, #120]	; (8001be4 <HandleGui+0x264>)
 8001b6c:	61d3      	str	r3, [r2, #28]
			arm_pid_init_f32(&PID, 1);
 8001b6e:	2101      	movs	r1, #1
 8001b70:	481c      	ldr	r0, [pc, #112]	; (8001be4 <HandleGui+0x264>)
 8001b72:	f005 f863 	bl	8006c3c <arm_pid_init_f32>
			Update_Page_2();
 8001b76:	f7ff feb1 	bl	80018dc <Update_Page_2>
			NEXTION_CMD("page 2");
 8001b7a:	481b      	ldr	r0, [pc, #108]	; (8001be8 <HandleGui+0x268>)
 8001b7c:	f7ff fcce 	bl	800151c <NEXTION_CMD>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b02", 5) == 0){
 8001b80:	2205      	movs	r2, #5
 8001b82:	491b      	ldr	r1, [pc, #108]	; (8001bf0 <HandleGui+0x270>)
 8001b84:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <HandleGui+0x238>)
 8001b86:	f005 fd37 	bl	80075f8 <strncmp>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d165      	bne.n	8001c5c <HandleGui+0x2dc>
			  float32_t Output =0;
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	67fb      	str	r3, [r7, #124]	; 0x7c
			  Output = HandleKeyPad();
 8001b96:	f7ff fd2b 	bl	80015f0 <HandleKeyPad>
 8001b9a:	67f8      	str	r0, [r7, #124]	; 0x7c
			  while(Output == 9999){
 8001b9c:	e03d      	b.n	8001c1a <HandleGui+0x29a>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001b9e:	4a0d      	ldr	r2, [pc, #52]	; (8001bd4 <HandleGui+0x254>)
 8001ba0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ba4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ba8:	6018      	str	r0, [r3, #0]
 8001baa:	3304      	adds	r3, #4
 8001bac:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001bae:	2300      	movs	r3, #0
 8001bb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001bb2:	e02c      	b.n	8001c0e <HandleGui+0x28e>
 8001bb4:	0800b118 	.word	0x0800b118
 8001bb8:	20000004 	.word	0x20000004
 8001bbc:	0800b120 	.word	0x0800b120
 8001bc0:	0800b128 	.word	0x0800b128
 8001bc4:	0800b130 	.word	0x0800b130
 8001bc8:	200013b1 	.word	0x200013b1
 8001bcc:	0800b138 	.word	0x0800b138
 8001bd0:	0800b140 	.word	0x0800b140
 8001bd4:	0800b200 	.word	0x0800b200
 8001bd8:	461c3c00 	.word	0x461c3c00
 8001bdc:	460ae000 	.word	0x460ae000
 8001be0:	20001328 	.word	0x20001328
 8001be4:	20001304 	.word	0x20001304
 8001be8:	0800b148 	.word	0x0800b148
 8001bec:	0800b150 	.word	0x0800b150
 8001bf0:	0800b158 	.word	0x0800b158
						UART_Recieved_Data[i]=defaultUart[i];
 8001bf4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001bf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bfa:	4413      	add	r3, r2
 8001bfc:	7819      	ldrb	r1, [r3, #0]
 8001bfe:	4a8e      	ldr	r2, [pc, #568]	; (8001e38 <HandleGui+0x4b8>)
 8001c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c02:	4413      	add	r3, r2
 8001c04:	460a      	mov	r2, r1
 8001c06:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001c08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	ddef      	ble.n	8001bf4 <HandleGui+0x274>
					}
				  Output = HandleKeyPad();
 8001c14:	f7ff fcec 	bl	80015f0 <HandleKeyPad>
 8001c18:	67f8      	str	r0, [r7, #124]	; 0x7c
			  while(Output == 9999){
 8001c1a:	4988      	ldr	r1, [pc, #544]	; (8001e3c <HandleGui+0x4bc>)
 8001c1c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001c1e:	f7ff fa45 	bl	80010ac <__aeabi_fcmpeq>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1ba      	bne.n	8001b9e <HandleGui+0x21e>
			  }
			  if(Output == 8888){
 8001c28:	4985      	ldr	r1, [pc, #532]	; (8001e40 <HandleGui+0x4c0>)
 8001c2a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001c2c:	f7ff fa3e 	bl	80010ac <__aeabi_fcmpeq>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <HandleGui+0x2bc>
				 Output = ReflowParameters.KD;
 8001c36:	4b83      	ldr	r3, [pc, #524]	; (8001e44 <HandleGui+0x4c4>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	67fb      	str	r3, [r7, #124]	; 0x7c
			  }
			  ReflowParameters.KD = Output;
 8001c3c:	4a81      	ldr	r2, [pc, #516]	; (8001e44 <HandleGui+0x4c4>)
 8001c3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c40:	6093      	str	r3, [r2, #8]
			 			  	    PID.Kd = ReflowParameters.KD;
 8001c42:	4b80      	ldr	r3, [pc, #512]	; (8001e44 <HandleGui+0x4c4>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	4a80      	ldr	r2, [pc, #512]	; (8001e48 <HandleGui+0x4c8>)
 8001c48:	6213      	str	r3, [r2, #32]
			arm_pid_init_f32(&PID, 1);
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	487e      	ldr	r0, [pc, #504]	; (8001e48 <HandleGui+0x4c8>)
 8001c4e:	f004 fff5 	bl	8006c3c <arm_pid_init_f32>
			Update_Page_2();
 8001c52:	f7ff fe43 	bl	80018dc <Update_Page_2>
			NEXTION_CMD("page 2");
 8001c56:	487d      	ldr	r0, [pc, #500]	; (8001e4c <HandleGui+0x4cc>)
 8001c58:	f7ff fc60 	bl	800151c <NEXTION_CMD>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b03", 5) == 0){
 8001c5c:	2205      	movs	r2, #5
 8001c5e:	497c      	ldr	r1, [pc, #496]	; (8001e50 <HandleGui+0x4d0>)
 8001c60:	4875      	ldr	r0, [pc, #468]	; (8001e38 <HandleGui+0x4b8>)
 8001c62:	f005 fcc9 	bl	80075f8 <strncmp>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d103      	bne.n	8001c74 <HandleGui+0x2f4>
			Update_Page_3();
 8001c6c:	f7ff fd2e 	bl	80016cc <Update_Page_3>
			SaveReflowParameters();
 8001c70:	f7ff fb8c 	bl	800138c <SaveReflowParameters>
		}


	//###################Page 3########################

	  if(strncmp((char *)UART_Recieved_Data, "p3xxx", 5) == 0){
 8001c74:	2205      	movs	r2, #5
 8001c76:	4977      	ldr	r1, [pc, #476]	; (8001e54 <HandleGui+0x4d4>)
 8001c78:	486f      	ldr	r0, [pc, #444]	; (8001e38 <HandleGui+0x4b8>)
 8001c7a:	f005 fcbd 	bl	80075f8 <strncmp>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HandleGui+0x308>
		Update_Page_3();
 8001c84:	f7ff fd22 	bl	80016cc <Update_Page_3>
		}

		  if(strncmp((char *)UART_Recieved_Data, "p3b00", 5) == 0){
 8001c88:	2205      	movs	r2, #5
 8001c8a:	4973      	ldr	r1, [pc, #460]	; (8001e58 <HandleGui+0x4d8>)
 8001c8c:	486a      	ldr	r0, [pc, #424]	; (8001e38 <HandleGui+0x4b8>)
 8001c8e:	f005 fcb3 	bl	80075f8 <strncmp>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d157      	bne.n	8001d48 <HandleGui+0x3c8>
			  float32_t Output =0;
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	677b      	str	r3, [r7, #116]	; 0x74
			  Output = HandleKeyPad();
 8001c9e:	f7ff fca7 	bl	80015f0 <HandleKeyPad>
 8001ca2:	6778      	str	r0, [r7, #116]	; 0x74
			  while(Output == 9999){
 8001ca4:	e01d      	b.n	8001ce2 <HandleGui+0x362>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001ca6:	4a6d      	ldr	r2, [pc, #436]	; (8001e5c <HandleGui+0x4dc>)
 8001ca8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cb0:	6018      	str	r0, [r3, #0]
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	673b      	str	r3, [r7, #112]	; 0x70
 8001cba:	e00c      	b.n	8001cd6 <HandleGui+0x356>
						UART_Recieved_Data[i]=defaultUart[i];
 8001cbc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cc2:	4413      	add	r3, r2
 8001cc4:	7819      	ldrb	r1, [r3, #0]
 8001cc6:	4a5c      	ldr	r2, [pc, #368]	; (8001e38 <HandleGui+0x4b8>)
 8001cc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cca:	4413      	add	r3, r2
 8001ccc:	460a      	mov	r2, r1
 8001cce:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001cd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	673b      	str	r3, [r7, #112]	; 0x70
 8001cd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	ddef      	ble.n	8001cbc <HandleGui+0x33c>
					}
				  Output = HandleKeyPad();
 8001cdc:	f7ff fc88 	bl	80015f0 <HandleKeyPad>
 8001ce0:	6778      	str	r0, [r7, #116]	; 0x74
			  while(Output == 9999){
 8001ce2:	4956      	ldr	r1, [pc, #344]	; (8001e3c <HandleGui+0x4bc>)
 8001ce4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001ce6:	f7ff f9e1 	bl	80010ac <__aeabi_fcmpeq>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1da      	bne.n	8001ca6 <HandleGui+0x326>
			  }
			  if(Output == 8888){
 8001cf0:	4953      	ldr	r1, [pc, #332]	; (8001e40 <HandleGui+0x4c0>)
 8001cf2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001cf4:	f7ff f9da 	bl	80010ac <__aeabi_fcmpeq>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <HandleGui+0x384>
				 Output = ReflowParameters.firstHeatUpRate;
 8001cfe:	4b51      	ldr	r3, [pc, #324]	; (8001e44 <HandleGui+0x4c4>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	677b      	str	r3, [r7, #116]	; 0x74
			  }

			  if (Output < 0.2)
 8001d04:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001d06:	f7fe fb8f 	bl	8000428 <__aeabi_f2d>
 8001d0a:	a349      	add	r3, pc, #292	; (adr r3, 8001e30 <HandleGui+0x4b0>)
 8001d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d10:	f7fe fe54 	bl	80009bc <__aeabi_dcmplt>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HandleGui+0x39e>
				  Output = 0.2;
 8001d1a:	4b51      	ldr	r3, [pc, #324]	; (8001e60 <HandleGui+0x4e0>)
 8001d1c:	677b      	str	r3, [r7, #116]	; 0x74
			  if (Output > 1.5)
 8001d1e:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8001d22:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001d24:	f7ff f9ea 	bl	80010fc <__aeabi_fcmpgt>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <HandleGui+0x3b4>
				  Output = 1.5;
 8001d2e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001d32:	677b      	str	r3, [r7, #116]	; 0x74

		ReflowParameters.firstHeatUpRate = Output;
 8001d34:	4a43      	ldr	r2, [pc, #268]	; (8001e44 <HandleGui+0x4c4>)
 8001d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d38:	60d3      	str	r3, [r2, #12]
		Update_Page_3();
 8001d3a:	f7ff fcc7 	bl	80016cc <Update_Page_3>
		NEXTION_CMD("page 3");
 8001d3e:	4849      	ldr	r0, [pc, #292]	; (8001e64 <HandleGui+0x4e4>)
 8001d40:	f7ff fbec 	bl	800151c <NEXTION_CMD>
		calculateReflowCurve();
 8001d44:	f000 fd20 	bl	8002788 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b01", 5) == 0){
 8001d48:	2205      	movs	r2, #5
 8001d4a:	4947      	ldr	r1, [pc, #284]	; (8001e68 <HandleGui+0x4e8>)
 8001d4c:	483a      	ldr	r0, [pc, #232]	; (8001e38 <HandleGui+0x4b8>)
 8001d4e:	f005 fc53 	bl	80075f8 <strncmp>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d14f      	bne.n	8001df8 <HandleGui+0x478>
			  float32_t Output =0;
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	66fb      	str	r3, [r7, #108]	; 0x6c
			  Output = HandleKeyPad();
 8001d5e:	f7ff fc47 	bl	80015f0 <HandleKeyPad>
 8001d62:	66f8      	str	r0, [r7, #108]	; 0x6c
			  while(Output == 9999){
 8001d64:	e01d      	b.n	8001da2 <HandleGui+0x422>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001d66:	4a3d      	ldr	r2, [pc, #244]	; (8001e5c <HandleGui+0x4dc>)
 8001d68:	f107 0320 	add.w	r3, r7, #32
 8001d6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d70:	6018      	str	r0, [r3, #0]
 8001d72:	3304      	adds	r3, #4
 8001d74:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001d76:	2300      	movs	r3, #0
 8001d78:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d7a:	e00c      	b.n	8001d96 <HandleGui+0x416>
						UART_Recieved_Data[i]=defaultUart[i];
 8001d7c:	f107 0220 	add.w	r2, r7, #32
 8001d80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d82:	4413      	add	r3, r2
 8001d84:	7819      	ldrb	r1, [r3, #0]
 8001d86:	4a2c      	ldr	r2, [pc, #176]	; (8001e38 <HandleGui+0x4b8>)
 8001d88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d8a:	4413      	add	r3, r2
 8001d8c:	460a      	mov	r2, r1
 8001d8e:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001d90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d92:	3301      	adds	r3, #1
 8001d94:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	ddef      	ble.n	8001d7c <HandleGui+0x3fc>
					}
				  Output = HandleKeyPad();
 8001d9c:	f7ff fc28 	bl	80015f0 <HandleKeyPad>
 8001da0:	66f8      	str	r0, [r7, #108]	; 0x6c
			  while(Output == 9999){
 8001da2:	4926      	ldr	r1, [pc, #152]	; (8001e3c <HandleGui+0x4bc>)
 8001da4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001da6:	f7ff f981 	bl	80010ac <__aeabi_fcmpeq>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1da      	bne.n	8001d66 <HandleGui+0x3e6>
			  }
			  if(Output == 8888){
 8001db0:	4923      	ldr	r1, [pc, #140]	; (8001e40 <HandleGui+0x4c0>)
 8001db2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001db4:	f7ff f97a 	bl	80010ac <__aeabi_fcmpeq>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <HandleGui+0x44c>
				 Output = ReflowParameters.SoakTime;
 8001dbe:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <HandleGui+0x4c4>)
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe ff86 	bl	8000cd4 <__aeabi_ui2f>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	66fb      	str	r3, [r7, #108]	; 0x6c
			  }

			  if (Output > 300)
 8001dcc:	4927      	ldr	r1, [pc, #156]	; (8001e6c <HandleGui+0x4ec>)
 8001dce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001dd0:	f7ff f994 	bl	80010fc <__aeabi_fcmpgt>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HandleGui+0x45e>
				  Output = 300;
 8001dda:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <HandleGui+0x4ec>)
 8001ddc:	66fb      	str	r3, [r7, #108]	; 0x6c

			ReflowParameters.SoakTime = Output;
 8001dde:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001de0:	f7ff f996 	bl	8001110 <__aeabi_f2uiz>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4a17      	ldr	r2, [pc, #92]	; (8001e44 <HandleGui+0x4c4>)
 8001de8:	6153      	str	r3, [r2, #20]
			Update_Page_3();
 8001dea:	f7ff fc6f 	bl	80016cc <Update_Page_3>
			NEXTION_CMD("page 3");
 8001dee:	481d      	ldr	r0, [pc, #116]	; (8001e64 <HandleGui+0x4e4>)
 8001df0:	f7ff fb94 	bl	800151c <NEXTION_CMD>
			calculateReflowCurve();
 8001df4:	f000 fcc8 	bl	8002788 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b02", 5) == 0){
 8001df8:	2205      	movs	r2, #5
 8001dfa:	491d      	ldr	r1, [pc, #116]	; (8001e70 <HandleGui+0x4f0>)
 8001dfc:	480e      	ldr	r0, [pc, #56]	; (8001e38 <HandleGui+0x4b8>)
 8001dfe:	f005 fbfb 	bl	80075f8 <strncmp>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d17c      	bne.n	8001f02 <HandleGui+0x582>
			  float32_t Output =0;
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	667b      	str	r3, [r7, #100]	; 0x64
			  Output = HandleKeyPad();
 8001e0e:	f7ff fbef 	bl	80015f0 <HandleKeyPad>
 8001e12:	6678      	str	r0, [r7, #100]	; 0x64
			  while(Output == 9999){
 8001e14:	e041      	b.n	8001e9a <HandleGui+0x51a>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001e16:	4a11      	ldr	r2, [pc, #68]	; (8001e5c <HandleGui+0x4dc>)
 8001e18:	f107 0318 	add.w	r3, r7, #24
 8001e1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e20:	6018      	str	r0, [r3, #0]
 8001e22:	3304      	adds	r3, #4
 8001e24:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001e26:	2300      	movs	r3, #0
 8001e28:	663b      	str	r3, [r7, #96]	; 0x60
 8001e2a:	e030      	b.n	8001e8e <HandleGui+0x50e>
 8001e2c:	f3af 8000 	nop.w
 8001e30:	9999999a 	.word	0x9999999a
 8001e34:	3fc99999 	.word	0x3fc99999
 8001e38:	20000004 	.word	0x20000004
 8001e3c:	461c3c00 	.word	0x461c3c00
 8001e40:	460ae000 	.word	0x460ae000
 8001e44:	20001328 	.word	0x20001328
 8001e48:	20001304 	.word	0x20001304
 8001e4c:	0800b148 	.word	0x0800b148
 8001e50:	0800b160 	.word	0x0800b160
 8001e54:	0800b168 	.word	0x0800b168
 8001e58:	0800b170 	.word	0x0800b170
 8001e5c:	0800b200 	.word	0x0800b200
 8001e60:	3e4ccccd 	.word	0x3e4ccccd
 8001e64:	0800b178 	.word	0x0800b178
 8001e68:	0800b180 	.word	0x0800b180
 8001e6c:	43960000 	.word	0x43960000
 8001e70:	0800b188 	.word	0x0800b188
						UART_Recieved_Data[i]=defaultUart[i];
 8001e74:	f107 0218 	add.w	r2, r7, #24
 8001e78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e7a:	4413      	add	r3, r2
 8001e7c:	7819      	ldrb	r1, [r3, #0]
 8001e7e:	4a8c      	ldr	r2, [pc, #560]	; (80020b0 <HandleGui+0x730>)
 8001e80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e82:	4413      	add	r3, r2
 8001e84:	460a      	mov	r2, r1
 8001e86:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001e88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	663b      	str	r3, [r7, #96]	; 0x60
 8001e8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	ddef      	ble.n	8001e74 <HandleGui+0x4f4>
					}
				  Output = HandleKeyPad();
 8001e94:	f7ff fbac 	bl	80015f0 <HandleKeyPad>
 8001e98:	6678      	str	r0, [r7, #100]	; 0x64
			  while(Output == 9999){
 8001e9a:	4986      	ldr	r1, [pc, #536]	; (80020b4 <HandleGui+0x734>)
 8001e9c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001e9e:	f7ff f905 	bl	80010ac <__aeabi_fcmpeq>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1b6      	bne.n	8001e16 <HandleGui+0x496>
			  }
			  if(Output == 8888){
 8001ea8:	4983      	ldr	r1, [pc, #524]	; (80020b8 <HandleGui+0x738>)
 8001eaa:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001eac:	f7ff f8fe 	bl	80010ac <__aeabi_fcmpeq>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d006      	beq.n	8001ec4 <HandleGui+0x544>
				 Output = ReflowParameters.SoakTempeture;
 8001eb6:	4b81      	ldr	r3, [pc, #516]	; (80020bc <HandleGui+0x73c>)
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe ff0a 	bl	8000cd4 <__aeabi_ui2f>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	667b      	str	r3, [r7, #100]	; 0x64
			  }

			  if (Output < 30)
 8001ec4:	497e      	ldr	r1, [pc, #504]	; (80020c0 <HandleGui+0x740>)
 8001ec6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001ec8:	f7ff f8fa 	bl	80010c0 <__aeabi_fcmplt>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HandleGui+0x556>
				  Output = 30;
 8001ed2:	4b7b      	ldr	r3, [pc, #492]	; (80020c0 <HandleGui+0x740>)
 8001ed4:	667b      	str	r3, [r7, #100]	; 0x64
			  if (Output > 250)
 8001ed6:	497b      	ldr	r1, [pc, #492]	; (80020c4 <HandleGui+0x744>)
 8001ed8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001eda:	f7ff f90f 	bl	80010fc <__aeabi_fcmpgt>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HandleGui+0x568>
				  Output = 250;
 8001ee4:	4b77      	ldr	r3, [pc, #476]	; (80020c4 <HandleGui+0x744>)
 8001ee6:	667b      	str	r3, [r7, #100]	; 0x64

			ReflowParameters.SoakTempeture = Output;
 8001ee8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001eea:	f7ff f911 	bl	8001110 <__aeabi_f2uiz>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4a72      	ldr	r2, [pc, #456]	; (80020bc <HandleGui+0x73c>)
 8001ef2:	6113      	str	r3, [r2, #16]
			Update_Page_3();
 8001ef4:	f7ff fbea 	bl	80016cc <Update_Page_3>
			NEXTION_CMD("page 3");
 8001ef8:	4873      	ldr	r0, [pc, #460]	; (80020c8 <HandleGui+0x748>)
 8001efa:	f7ff fb0f 	bl	800151c <NEXTION_CMD>
			calculateReflowCurve();
 8001efe:	f000 fc43 	bl	8002788 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b03", 5) == 0){
 8001f02:	2205      	movs	r2, #5
 8001f04:	4971      	ldr	r1, [pc, #452]	; (80020cc <HandleGui+0x74c>)
 8001f06:	486a      	ldr	r0, [pc, #424]	; (80020b0 <HandleGui+0x730>)
 8001f08:	f005 fb76 	bl	80075f8 <strncmp>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d157      	bne.n	8001fc2 <HandleGui+0x642>
			  float32_t Output =0;
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	65fb      	str	r3, [r7, #92]	; 0x5c
			  Output = HandleKeyPad();
 8001f18:	f7ff fb6a 	bl	80015f0 <HandleKeyPad>
 8001f1c:	65f8      	str	r0, [r7, #92]	; 0x5c
			  while(Output == 9999){
 8001f1e:	e01d      	b.n	8001f5c <HandleGui+0x5dc>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001f20:	4a6b      	ldr	r2, [pc, #428]	; (80020d0 <HandleGui+0x750>)
 8001f22:	f107 0310 	add.w	r3, r7, #16
 8001f26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f2a:	6018      	str	r0, [r3, #0]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001f30:	2300      	movs	r3, #0
 8001f32:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f34:	e00c      	b.n	8001f50 <HandleGui+0x5d0>
						UART_Recieved_Data[i]=defaultUart[i];
 8001f36:	f107 0210 	add.w	r2, r7, #16
 8001f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f3c:	4413      	add	r3, r2
 8001f3e:	7819      	ldrb	r1, [r3, #0]
 8001f40:	4a5b      	ldr	r2, [pc, #364]	; (80020b0 <HandleGui+0x730>)
 8001f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f44:	4413      	add	r3, r2
 8001f46:	460a      	mov	r2, r1
 8001f48:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001f4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	ddef      	ble.n	8001f36 <HandleGui+0x5b6>
					}
				  Output = HandleKeyPad();
 8001f56:	f7ff fb4b 	bl	80015f0 <HandleKeyPad>
 8001f5a:	65f8      	str	r0, [r7, #92]	; 0x5c
			  while(Output == 9999){
 8001f5c:	4955      	ldr	r1, [pc, #340]	; (80020b4 <HandleGui+0x734>)
 8001f5e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001f60:	f7ff f8a4 	bl	80010ac <__aeabi_fcmpeq>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1da      	bne.n	8001f20 <HandleGui+0x5a0>
			  }
			  if(Output == 8888){
 8001f6a:	4953      	ldr	r1, [pc, #332]	; (80020b8 <HandleGui+0x738>)
 8001f6c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001f6e:	f7ff f89d 	bl	80010ac <__aeabi_fcmpeq>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d002      	beq.n	8001f7e <HandleGui+0x5fe>
				 Output = ReflowParameters.secondHeatUpRate;
 8001f78:	4b50      	ldr	r3, [pc, #320]	; (80020bc <HandleGui+0x73c>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
			  }

			  if (Output < 0.2)
 8001f7e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001f80:	f7fe fa52 	bl	8000428 <__aeabi_f2d>
 8001f84:	a348      	add	r3, pc, #288	; (adr r3, 80020a8 <HandleGui+0x728>)
 8001f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8a:	f7fe fd17 	bl	80009bc <__aeabi_dcmplt>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <HandleGui+0x618>
				  Output = 0.2;
 8001f94:	4b4f      	ldr	r3, [pc, #316]	; (80020d4 <HandleGui+0x754>)
 8001f96:	65fb      	str	r3, [r7, #92]	; 0x5c
			  if (Output > 1.5)
 8001f98:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8001f9c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001f9e:	f7ff f8ad 	bl	80010fc <__aeabi_fcmpgt>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <HandleGui+0x62e>
				  Output = 1.5;
 8001fa8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001fac:	65fb      	str	r3, [r7, #92]	; 0x5c

			ReflowParameters.secondHeatUpRate = Output;
 8001fae:	4a43      	ldr	r2, [pc, #268]	; (80020bc <HandleGui+0x73c>)
 8001fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fb2:	6193      	str	r3, [r2, #24]
			Update_Page_3();
 8001fb4:	f7ff fb8a 	bl	80016cc <Update_Page_3>
			NEXTION_CMD("page 3");
 8001fb8:	4843      	ldr	r0, [pc, #268]	; (80020c8 <HandleGui+0x748>)
 8001fba:	f7ff faaf 	bl	800151c <NEXTION_CMD>
			calculateReflowCurve();
 8001fbe:	f000 fbe3 	bl	8002788 <calculateReflowCurve>
		}


		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b04", 5) == 0){
 8001fc2:	2205      	movs	r2, #5
 8001fc4:	4944      	ldr	r1, [pc, #272]	; (80020d8 <HandleGui+0x758>)
 8001fc6:	483a      	ldr	r0, [pc, #232]	; (80020b0 <HandleGui+0x730>)
 8001fc8:	f005 fb16 	bl	80075f8 <strncmp>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d14f      	bne.n	8002072 <HandleGui+0x6f2>
			  float32_t Output =0;
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	657b      	str	r3, [r7, #84]	; 0x54
			  Output = HandleKeyPad();
 8001fd8:	f7ff fb0a 	bl	80015f0 <HandleKeyPad>
 8001fdc:	6578      	str	r0, [r7, #84]	; 0x54
			  while(Output == 9999){
 8001fde:	e01d      	b.n	800201c <HandleGui+0x69c>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001fe0:	4a3b      	ldr	r2, [pc, #236]	; (80020d0 <HandleGui+0x750>)
 8001fe2:	f107 0308 	add.w	r3, r7, #8
 8001fe6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fea:	6018      	str	r0, [r3, #0]
 8001fec:	3304      	adds	r3, #4
 8001fee:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	653b      	str	r3, [r7, #80]	; 0x50
 8001ff4:	e00c      	b.n	8002010 <HandleGui+0x690>
						UART_Recieved_Data[i]=defaultUart[i];
 8001ff6:	f107 0208 	add.w	r2, r7, #8
 8001ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ffc:	4413      	add	r3, r2
 8001ffe:	7819      	ldrb	r1, [r3, #0]
 8002000:	4a2b      	ldr	r2, [pc, #172]	; (80020b0 <HandleGui+0x730>)
 8002002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002004:	4413      	add	r3, r2
 8002006:	460a      	mov	r2, r1
 8002008:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 800200a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800200c:	3301      	adds	r3, #1
 800200e:	653b      	str	r3, [r7, #80]	; 0x50
 8002010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002012:	2b04      	cmp	r3, #4
 8002014:	ddef      	ble.n	8001ff6 <HandleGui+0x676>
					}
				  Output = HandleKeyPad();
 8002016:	f7ff faeb 	bl	80015f0 <HandleKeyPad>
 800201a:	6578      	str	r0, [r7, #84]	; 0x54
			  while(Output == 9999){
 800201c:	4925      	ldr	r1, [pc, #148]	; (80020b4 <HandleGui+0x734>)
 800201e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002020:	f7ff f844 	bl	80010ac <__aeabi_fcmpeq>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1da      	bne.n	8001fe0 <HandleGui+0x660>
			  }
			  if(Output == 8888){
 800202a:	4923      	ldr	r1, [pc, #140]	; (80020b8 <HandleGui+0x738>)
 800202c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800202e:	f7ff f83d 	bl	80010ac <__aeabi_fcmpeq>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d006      	beq.n	8002046 <HandleGui+0x6c6>
				 Output = ReflowParameters.ReflowTime;
 8002038:	4b20      	ldr	r3, [pc, #128]	; (80020bc <HandleGui+0x73c>)
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fe49 	bl	8000cd4 <__aeabi_ui2f>
 8002042:	4603      	mov	r3, r0
 8002044:	657b      	str	r3, [r7, #84]	; 0x54
			  }

			  if (Output > 300)
 8002046:	4925      	ldr	r1, [pc, #148]	; (80020dc <HandleGui+0x75c>)
 8002048:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800204a:	f7ff f857 	bl	80010fc <__aeabi_fcmpgt>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <HandleGui+0x6d8>
				  Output = 300;
 8002054:	4b21      	ldr	r3, [pc, #132]	; (80020dc <HandleGui+0x75c>)
 8002056:	657b      	str	r3, [r7, #84]	; 0x54

			ReflowParameters.ReflowTime = Output;
 8002058:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800205a:	f7ff f859 	bl	8001110 <__aeabi_f2uiz>
 800205e:	4603      	mov	r3, r0
 8002060:	4a16      	ldr	r2, [pc, #88]	; (80020bc <HandleGui+0x73c>)
 8002062:	6213      	str	r3, [r2, #32]
			Update_Page_3();
 8002064:	f7ff fb32 	bl	80016cc <Update_Page_3>
			NEXTION_CMD("page 3");
 8002068:	4817      	ldr	r0, [pc, #92]	; (80020c8 <HandleGui+0x748>)
 800206a:	f7ff fa57 	bl	800151c <NEXTION_CMD>
			calculateReflowCurve();
 800206e:	f000 fb8b 	bl	8002788 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b05", 5) == 0){
 8002072:	2205      	movs	r2, #5
 8002074:	491a      	ldr	r1, [pc, #104]	; (80020e0 <HandleGui+0x760>)
 8002076:	480e      	ldr	r0, [pc, #56]	; (80020b0 <HandleGui+0x730>)
 8002078:	f005 fabe 	bl	80075f8 <strncmp>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d176      	bne.n	8002170 <HandleGui+0x7f0>
			  float32_t Output =0;
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	64fb      	str	r3, [r7, #76]	; 0x4c
			  Output = HandleKeyPad();
 8002088:	f7ff fab2 	bl	80015f0 <HandleKeyPad>
 800208c:	64f8      	str	r0, [r7, #76]	; 0x4c
			  while(Output == 9999){
 800208e:	e03b      	b.n	8002108 <HandleGui+0x788>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8002090:	4a0f      	ldr	r2, [pc, #60]	; (80020d0 <HandleGui+0x750>)
 8002092:	463b      	mov	r3, r7
 8002094:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002098:	6018      	str	r0, [r3, #0]
 800209a:	3304      	adds	r3, #4
 800209c:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 800209e:	2300      	movs	r3, #0
 80020a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80020a2:	e02b      	b.n	80020fc <HandleGui+0x77c>
 80020a4:	f3af 8000 	nop.w
 80020a8:	9999999a 	.word	0x9999999a
 80020ac:	3fc99999 	.word	0x3fc99999
 80020b0:	20000004 	.word	0x20000004
 80020b4:	461c3c00 	.word	0x461c3c00
 80020b8:	460ae000 	.word	0x460ae000
 80020bc:	20001328 	.word	0x20001328
 80020c0:	41f00000 	.word	0x41f00000
 80020c4:	437a0000 	.word	0x437a0000
 80020c8:	0800b178 	.word	0x0800b178
 80020cc:	0800b190 	.word	0x0800b190
 80020d0:	0800b200 	.word	0x0800b200
 80020d4:	3e4ccccd 	.word	0x3e4ccccd
 80020d8:	0800b198 	.word	0x0800b198
 80020dc:	43960000 	.word	0x43960000
 80020e0:	0800b1a0 	.word	0x0800b1a0
						UART_Recieved_Data[i]=defaultUart[i];
 80020e4:	463a      	mov	r2, r7
 80020e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020e8:	4413      	add	r3, r2
 80020ea:	7819      	ldrb	r1, [r3, #0]
 80020ec:	4a96      	ldr	r2, [pc, #600]	; (8002348 <HandleGui+0x9c8>)
 80020ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020f0:	4413      	add	r3, r2
 80020f2:	460a      	mov	r2, r1
 80020f4:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 80020f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020f8:	3301      	adds	r3, #1
 80020fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80020fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020fe:	2b04      	cmp	r3, #4
 8002100:	ddf0      	ble.n	80020e4 <HandleGui+0x764>
					}
				  Output = HandleKeyPad();
 8002102:	f7ff fa75 	bl	80015f0 <HandleKeyPad>
 8002106:	64f8      	str	r0, [r7, #76]	; 0x4c
			  while(Output == 9999){
 8002108:	4990      	ldr	r1, [pc, #576]	; (800234c <HandleGui+0x9cc>)
 800210a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800210c:	f7fe ffce 	bl	80010ac <__aeabi_fcmpeq>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1bc      	bne.n	8002090 <HandleGui+0x710>
			  }
			  if(Output == 8888){
 8002116:	498e      	ldr	r1, [pc, #568]	; (8002350 <HandleGui+0x9d0>)
 8002118:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800211a:	f7fe ffc7 	bl	80010ac <__aeabi_fcmpeq>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d006      	beq.n	8002132 <HandleGui+0x7b2>
				 Output = ReflowParameters.ReflowTempeture;
 8002124:	4b8b      	ldr	r3, [pc, #556]	; (8002354 <HandleGui+0x9d4>)
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fdd3 	bl	8000cd4 <__aeabi_ui2f>
 800212e:	4603      	mov	r3, r0
 8002130:	64fb      	str	r3, [r7, #76]	; 0x4c
			  }
			  if (Output < 30)
 8002132:	4989      	ldr	r1, [pc, #548]	; (8002358 <HandleGui+0x9d8>)
 8002134:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002136:	f7fe ffc3 	bl	80010c0 <__aeabi_fcmplt>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HandleGui+0x7c4>
				  Output = 30;
 8002140:	4b85      	ldr	r3, [pc, #532]	; (8002358 <HandleGui+0x9d8>)
 8002142:	64fb      	str	r3, [r7, #76]	; 0x4c
			  if (Output > 250)
 8002144:	4985      	ldr	r1, [pc, #532]	; (800235c <HandleGui+0x9dc>)
 8002146:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002148:	f7fe ffd8 	bl	80010fc <__aeabi_fcmpgt>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HandleGui+0x7d6>
				  Output = 250;
 8002152:	4b82      	ldr	r3, [pc, #520]	; (800235c <HandleGui+0x9dc>)
 8002154:	64fb      	str	r3, [r7, #76]	; 0x4c
			ReflowParameters.ReflowTempeture = Output;
 8002156:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002158:	f7fe ffda 	bl	8001110 <__aeabi_f2uiz>
 800215c:	4603      	mov	r3, r0
 800215e:	4a7d      	ldr	r2, [pc, #500]	; (8002354 <HandleGui+0x9d4>)
 8002160:	61d3      	str	r3, [r2, #28]
			Update_Page_3();
 8002162:	f7ff fab3 	bl	80016cc <Update_Page_3>
			NEXTION_CMD("page 3");
 8002166:	487e      	ldr	r0, [pc, #504]	; (8002360 <HandleGui+0x9e0>)
 8002168:	f7ff f9d8 	bl	800151c <NEXTION_CMD>
			calculateReflowCurve();
 800216c:	f000 fb0c 	bl	8002788 <calculateReflowCurve>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p3b06", 5) == 0){
 8002170:	2205      	movs	r2, #5
 8002172:	497c      	ldr	r1, [pc, #496]	; (8002364 <HandleGui+0x9e4>)
 8002174:	4874      	ldr	r0, [pc, #464]	; (8002348 <HandleGui+0x9c8>)
 8002176:	f005 fa3f 	bl	80075f8 <strncmp>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HandleGui+0x804>
			Update_Page_2();
 8002180:	f7ff fbac 	bl	80018dc <Update_Page_2>
		}


		  if(strncmp((char *)UART_Recieved_Data, "p3b07", 5) == 0){
 8002184:	2205      	movs	r2, #5
 8002186:	4978      	ldr	r1, [pc, #480]	; (8002368 <HandleGui+0x9e8>)
 8002188:	486f      	ldr	r0, [pc, #444]	; (8002348 <HandleGui+0x9c8>)
 800218a:	f005 fa35 	bl	80075f8 <strncmp>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d105      	bne.n	80021a0 <HandleGui+0x820>
			Update_Page_0();
 8002194:	f7ff faf0 	bl	8001778 <Update_Page_0>
			Draw_Reflow_Curve();
 8002198:	f000 fc48 	bl	8002a2c <Draw_Reflow_Curve>
			SaveReflowParameters();
 800219c:	f7ff f8f6 	bl	800138c <SaveReflowParameters>

		}


		  	// Save current parameters to Lead 138C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3bs0", 5) == 0){
 80021a0:	2205      	movs	r2, #5
 80021a2:	4972      	ldr	r1, [pc, #456]	; (800236c <HandleGui+0x9ec>)
 80021a4:	4868      	ldr	r0, [pc, #416]	; (8002348 <HandleGui+0x9c8>)
 80021a6:	f005 fa27 	bl	80075f8 <strncmp>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d11e      	bne.n	80021ee <HandleGui+0x86e>

			  ReflowParameters.firstHeatUpRate0 = ReflowParameters.firstHeatUpRate;
 80021b0:	4b68      	ldr	r3, [pc, #416]	; (8002354 <HandleGui+0x9d4>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4a67      	ldr	r2, [pc, #412]	; (8002354 <HandleGui+0x9d4>)
 80021b6:	6253      	str	r3, [r2, #36]	; 0x24
			  ReflowParameters.SoakTime0 = ReflowParameters.SoakTime;
 80021b8:	4b66      	ldr	r3, [pc, #408]	; (8002354 <HandleGui+0x9d4>)
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	4a65      	ldr	r2, [pc, #404]	; (8002354 <HandleGui+0x9d4>)
 80021be:	62d3      	str	r3, [r2, #44]	; 0x2c
			  ReflowParameters.SoakTempeture0 = ReflowParameters.SoakTempeture;
 80021c0:	4b64      	ldr	r3, [pc, #400]	; (8002354 <HandleGui+0x9d4>)
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	4a63      	ldr	r2, [pc, #396]	; (8002354 <HandleGui+0x9d4>)
 80021c6:	6293      	str	r3, [r2, #40]	; 0x28
			  ReflowParameters.secondHeatUpRate0 = ReflowParameters.secondHeatUpRate;
 80021c8:	4b62      	ldr	r3, [pc, #392]	; (8002354 <HandleGui+0x9d4>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	4a61      	ldr	r2, [pc, #388]	; (8002354 <HandleGui+0x9d4>)
 80021ce:	6313      	str	r3, [r2, #48]	; 0x30
			  ReflowParameters.ReflowTime0 = ReflowParameters.ReflowTime;
 80021d0:	4b60      	ldr	r3, [pc, #384]	; (8002354 <HandleGui+0x9d4>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4a5f      	ldr	r2, [pc, #380]	; (8002354 <HandleGui+0x9d4>)
 80021d6:	6393      	str	r3, [r2, #56]	; 0x38
			  ReflowParameters.ReflowTempeture0 = ReflowParameters.ReflowTempeture;
 80021d8:	4b5e      	ldr	r3, [pc, #376]	; (8002354 <HandleGui+0x9d4>)
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	4a5d      	ldr	r2, [pc, #372]	; (8002354 <HandleGui+0x9d4>)
 80021de:	6353      	str	r3, [r2, #52]	; 0x34
			  Update_Page_3();
 80021e0:	f7ff fa74 	bl	80016cc <Update_Page_3>
			  // needed page refresh because of strange nextion timers behavior
			  NEXTION_CMD("page 3");
 80021e4:	485e      	ldr	r0, [pc, #376]	; (8002360 <HandleGui+0x9e0>)
 80021e6:	f7ff f999 	bl	800151c <NEXTION_CMD>
			  calculateReflowCurve();
 80021ea:	f000 facd 	bl	8002788 <calculateReflowCurve>

		  }

			 // Load Lead 138C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3b08", 5) == 0){
 80021ee:	2205      	movs	r2, #5
 80021f0:	495f      	ldr	r1, [pc, #380]	; (8002370 <HandleGui+0x9f0>)
 80021f2:	4855      	ldr	r0, [pc, #340]	; (8002348 <HandleGui+0x9c8>)
 80021f4:	f005 fa00 	bl	80075f8 <strncmp>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d11b      	bne.n	8002236 <HandleGui+0x8b6>

			  ReflowParameters.firstHeatUpRate = ReflowParameters.firstHeatUpRate0;
 80021fe:	4b55      	ldr	r3, [pc, #340]	; (8002354 <HandleGui+0x9d4>)
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	4a54      	ldr	r2, [pc, #336]	; (8002354 <HandleGui+0x9d4>)
 8002204:	60d3      	str	r3, [r2, #12]
			  ReflowParameters.SoakTime = ReflowParameters.SoakTime0;
 8002206:	4b53      	ldr	r3, [pc, #332]	; (8002354 <HandleGui+0x9d4>)
 8002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220a:	4a52      	ldr	r2, [pc, #328]	; (8002354 <HandleGui+0x9d4>)
 800220c:	6153      	str	r3, [r2, #20]
			  ReflowParameters.SoakTempeture = ReflowParameters.SoakTempeture0;
 800220e:	4b51      	ldr	r3, [pc, #324]	; (8002354 <HandleGui+0x9d4>)
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	4a50      	ldr	r2, [pc, #320]	; (8002354 <HandleGui+0x9d4>)
 8002214:	6113      	str	r3, [r2, #16]
			  ReflowParameters.secondHeatUpRate = ReflowParameters.secondHeatUpRate0;
 8002216:	4b4f      	ldr	r3, [pc, #316]	; (8002354 <HandleGui+0x9d4>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a4e      	ldr	r2, [pc, #312]	; (8002354 <HandleGui+0x9d4>)
 800221c:	6193      	str	r3, [r2, #24]
			  ReflowParameters.ReflowTime = ReflowParameters.ReflowTime0;
 800221e:	4b4d      	ldr	r3, [pc, #308]	; (8002354 <HandleGui+0x9d4>)
 8002220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002222:	4a4c      	ldr	r2, [pc, #304]	; (8002354 <HandleGui+0x9d4>)
 8002224:	6213      	str	r3, [r2, #32]
			  ReflowParameters.ReflowTempeture = ReflowParameters.ReflowTempeture0;
 8002226:	4b4b      	ldr	r3, [pc, #300]	; (8002354 <HandleGui+0x9d4>)
 8002228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222a:	4a4a      	ldr	r2, [pc, #296]	; (8002354 <HandleGui+0x9d4>)
 800222c:	61d3      	str	r3, [r2, #28]
			  Update_Page_3();
 800222e:	f7ff fa4d 	bl	80016cc <Update_Page_3>
			  //NEXTION_CMD("page 3");
			  calculateReflowCurve();
 8002232:	f000 faa9 	bl	8002788 <calculateReflowCurve>
		  }

		  	// Save current parameters to Lead 148C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3bs1", 5) == 0){
 8002236:	2205      	movs	r2, #5
 8002238:	494e      	ldr	r1, [pc, #312]	; (8002374 <HandleGui+0x9f4>)
 800223a:	4843      	ldr	r0, [pc, #268]	; (8002348 <HandleGui+0x9c8>)
 800223c:	f005 f9dc 	bl	80075f8 <strncmp>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d11e      	bne.n	8002284 <HandleGui+0x904>
			  ReflowParameters.firstHeatUpRate1 = ReflowParameters.firstHeatUpRate;
 8002246:	4b43      	ldr	r3, [pc, #268]	; (8002354 <HandleGui+0x9d4>)
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	4a42      	ldr	r2, [pc, #264]	; (8002354 <HandleGui+0x9d4>)
 800224c:	63d3      	str	r3, [r2, #60]	; 0x3c
			  ReflowParameters.SoakTime1 = ReflowParameters.SoakTime;
 800224e:	4b41      	ldr	r3, [pc, #260]	; (8002354 <HandleGui+0x9d4>)
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	4a40      	ldr	r2, [pc, #256]	; (8002354 <HandleGui+0x9d4>)
 8002254:	6453      	str	r3, [r2, #68]	; 0x44
			  ReflowParameters.SoakTempeture1 = ReflowParameters.SoakTempeture;
 8002256:	4b3f      	ldr	r3, [pc, #252]	; (8002354 <HandleGui+0x9d4>)
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	4a3e      	ldr	r2, [pc, #248]	; (8002354 <HandleGui+0x9d4>)
 800225c:	6413      	str	r3, [r2, #64]	; 0x40
			  ReflowParameters.secondHeatUpRate1 = ReflowParameters.secondHeatUpRate;
 800225e:	4b3d      	ldr	r3, [pc, #244]	; (8002354 <HandleGui+0x9d4>)
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	4a3c      	ldr	r2, [pc, #240]	; (8002354 <HandleGui+0x9d4>)
 8002264:	6493      	str	r3, [r2, #72]	; 0x48
			  ReflowParameters.ReflowTime1 = ReflowParameters.ReflowTime;
 8002266:	4b3b      	ldr	r3, [pc, #236]	; (8002354 <HandleGui+0x9d4>)
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	4a3a      	ldr	r2, [pc, #232]	; (8002354 <HandleGui+0x9d4>)
 800226c:	6513      	str	r3, [r2, #80]	; 0x50
			  ReflowParameters.ReflowTempeture1 = ReflowParameters.ReflowTempeture;
 800226e:	4b39      	ldr	r3, [pc, #228]	; (8002354 <HandleGui+0x9d4>)
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	4a38      	ldr	r2, [pc, #224]	; (8002354 <HandleGui+0x9d4>)
 8002274:	64d3      	str	r3, [r2, #76]	; 0x4c
			  Update_Page_3();
 8002276:	f7ff fa29 	bl	80016cc <Update_Page_3>
			  // needed page refresh because of strange nextion timers behavior
			  NEXTION_CMD("page 3");
 800227a:	4839      	ldr	r0, [pc, #228]	; (8002360 <HandleGui+0x9e0>)
 800227c:	f7ff f94e 	bl	800151c <NEXTION_CMD>
			  calculateReflowCurve();
 8002280:	f000 fa82 	bl	8002788 <calculateReflowCurve>
		  }

			 // Load Lead 148C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3b09", 5) == 0){
 8002284:	2205      	movs	r2, #5
 8002286:	493c      	ldr	r1, [pc, #240]	; (8002378 <HandleGui+0x9f8>)
 8002288:	482f      	ldr	r0, [pc, #188]	; (8002348 <HandleGui+0x9c8>)
 800228a:	f005 f9b5 	bl	80075f8 <strncmp>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d11b      	bne.n	80022cc <HandleGui+0x94c>

			  ReflowParameters.firstHeatUpRate = ReflowParameters.firstHeatUpRate1;
 8002294:	4b2f      	ldr	r3, [pc, #188]	; (8002354 <HandleGui+0x9d4>)
 8002296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002298:	4a2e      	ldr	r2, [pc, #184]	; (8002354 <HandleGui+0x9d4>)
 800229a:	60d3      	str	r3, [r2, #12]
			  ReflowParameters.SoakTime = ReflowParameters.SoakTime1;
 800229c:	4b2d      	ldr	r3, [pc, #180]	; (8002354 <HandleGui+0x9d4>)
 800229e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a0:	4a2c      	ldr	r2, [pc, #176]	; (8002354 <HandleGui+0x9d4>)
 80022a2:	6153      	str	r3, [r2, #20]
			  ReflowParameters.SoakTempeture = ReflowParameters.SoakTempeture1;
 80022a4:	4b2b      	ldr	r3, [pc, #172]	; (8002354 <HandleGui+0x9d4>)
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	4a2a      	ldr	r2, [pc, #168]	; (8002354 <HandleGui+0x9d4>)
 80022aa:	6113      	str	r3, [r2, #16]
			  ReflowParameters.secondHeatUpRate = ReflowParameters.secondHeatUpRate1;
 80022ac:	4b29      	ldr	r3, [pc, #164]	; (8002354 <HandleGui+0x9d4>)
 80022ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b0:	4a28      	ldr	r2, [pc, #160]	; (8002354 <HandleGui+0x9d4>)
 80022b2:	6193      	str	r3, [r2, #24]
			  ReflowParameters.ReflowTime = ReflowParameters.ReflowTime1;
 80022b4:	4b27      	ldr	r3, [pc, #156]	; (8002354 <HandleGui+0x9d4>)
 80022b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b8:	4a26      	ldr	r2, [pc, #152]	; (8002354 <HandleGui+0x9d4>)
 80022ba:	6213      	str	r3, [r2, #32]
			  ReflowParameters.ReflowTempeture = ReflowParameters.ReflowTempeture1;
 80022bc:	4b25      	ldr	r3, [pc, #148]	; (8002354 <HandleGui+0x9d4>)
 80022be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c0:	4a24      	ldr	r2, [pc, #144]	; (8002354 <HandleGui+0x9d4>)
 80022c2:	61d3      	str	r3, [r2, #28]
			  Update_Page_3();
 80022c4:	f7ff fa02 	bl	80016cc <Update_Page_3>
			  //NEXTION_CMD("page 3");
			  calculateReflowCurve();
 80022c8:	f000 fa5e 	bl	8002788 <calculateReflowCurve>
		  }

		  	// Save current parameters to Lead 183C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3bs2", 5) == 0){
 80022cc:	2205      	movs	r2, #5
 80022ce:	492b      	ldr	r1, [pc, #172]	; (800237c <HandleGui+0x9fc>)
 80022d0:	481d      	ldr	r0, [pc, #116]	; (8002348 <HandleGui+0x9c8>)
 80022d2:	f005 f991 	bl	80075f8 <strncmp>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d11e      	bne.n	800231a <HandleGui+0x99a>
			  ReflowParameters.firstHeatUpRate2 = ReflowParameters.firstHeatUpRate;
 80022dc:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <HandleGui+0x9d4>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4a1c      	ldr	r2, [pc, #112]	; (8002354 <HandleGui+0x9d4>)
 80022e2:	6553      	str	r3, [r2, #84]	; 0x54
			  ReflowParameters.SoakTime2 = ReflowParameters.SoakTime;
 80022e4:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <HandleGui+0x9d4>)
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	4a1a      	ldr	r2, [pc, #104]	; (8002354 <HandleGui+0x9d4>)
 80022ea:	65d3      	str	r3, [r2, #92]	; 0x5c
			  ReflowParameters.SoakTempeture2 = ReflowParameters.SoakTempeture;
 80022ec:	4b19      	ldr	r3, [pc, #100]	; (8002354 <HandleGui+0x9d4>)
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	4a18      	ldr	r2, [pc, #96]	; (8002354 <HandleGui+0x9d4>)
 80022f2:	6593      	str	r3, [r2, #88]	; 0x58
			  ReflowParameters.secondHeatUpRate2 = ReflowParameters.secondHeatUpRate;
 80022f4:	4b17      	ldr	r3, [pc, #92]	; (8002354 <HandleGui+0x9d4>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	4a16      	ldr	r2, [pc, #88]	; (8002354 <HandleGui+0x9d4>)
 80022fa:	6613      	str	r3, [r2, #96]	; 0x60
			  ReflowParameters.ReflowTime2 = ReflowParameters.ReflowTime;
 80022fc:	4b15      	ldr	r3, [pc, #84]	; (8002354 <HandleGui+0x9d4>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	4a14      	ldr	r2, [pc, #80]	; (8002354 <HandleGui+0x9d4>)
 8002302:	6693      	str	r3, [r2, #104]	; 0x68
			  ReflowParameters.ReflowTempeture2 = ReflowParameters.ReflowTempeture;
 8002304:	4b13      	ldr	r3, [pc, #76]	; (8002354 <HandleGui+0x9d4>)
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	4a12      	ldr	r2, [pc, #72]	; (8002354 <HandleGui+0x9d4>)
 800230a:	6653      	str	r3, [r2, #100]	; 0x64
			  Update_Page_3();
 800230c:	f7ff f9de 	bl	80016cc <Update_Page_3>
			  // needed page refresh because of strange nextion timers behavior
			  NEXTION_CMD("page 3");
 8002310:	4813      	ldr	r0, [pc, #76]	; (8002360 <HandleGui+0x9e0>)
 8002312:	f7ff f903 	bl	800151c <NEXTION_CMD>
			  calculateReflowCurve();
 8002316:	f000 fa37 	bl	8002788 <calculateReflowCurve>
		  }

			 // Load Lead 183C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3b10", 5) == 0){
 800231a:	2205      	movs	r2, #5
 800231c:	4918      	ldr	r1, [pc, #96]	; (8002380 <HandleGui+0xa00>)
 800231e:	480a      	ldr	r0, [pc, #40]	; (8002348 <HandleGui+0x9c8>)
 8002320:	f005 f96a 	bl	80075f8 <strncmp>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d13a      	bne.n	80023a0 <HandleGui+0xa20>

			  ReflowParameters.firstHeatUpRate = ReflowParameters.firstHeatUpRate2;
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <HandleGui+0x9d4>)
 800232c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232e:	4a09      	ldr	r2, [pc, #36]	; (8002354 <HandleGui+0x9d4>)
 8002330:	60d3      	str	r3, [r2, #12]
			  ReflowParameters.SoakTime = ReflowParameters.SoakTime2;
 8002332:	4b08      	ldr	r3, [pc, #32]	; (8002354 <HandleGui+0x9d4>)
 8002334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002336:	4a07      	ldr	r2, [pc, #28]	; (8002354 <HandleGui+0x9d4>)
 8002338:	6153      	str	r3, [r2, #20]
			  ReflowParameters.SoakTempeture = ReflowParameters.SoakTempeture2;
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HandleGui+0x9d4>)
 800233c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233e:	4a05      	ldr	r2, [pc, #20]	; (8002354 <HandleGui+0x9d4>)
 8002340:	6113      	str	r3, [r2, #16]
			  ReflowParameters.secondHeatUpRate = ReflowParameters.secondHeatUpRate2;
 8002342:	4b04      	ldr	r3, [pc, #16]	; (8002354 <HandleGui+0x9d4>)
 8002344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002346:	e01d      	b.n	8002384 <HandleGui+0xa04>
 8002348:	20000004 	.word	0x20000004
 800234c:	461c3c00 	.word	0x461c3c00
 8002350:	460ae000 	.word	0x460ae000
 8002354:	20001328 	.word	0x20001328
 8002358:	41f00000 	.word	0x41f00000
 800235c:	437a0000 	.word	0x437a0000
 8002360:	0800b178 	.word	0x0800b178
 8002364:	0800b1a8 	.word	0x0800b1a8
 8002368:	0800b1b0 	.word	0x0800b1b0
 800236c:	0800b1b8 	.word	0x0800b1b8
 8002370:	0800b1c0 	.word	0x0800b1c0
 8002374:	0800b1c8 	.word	0x0800b1c8
 8002378:	0800b1d0 	.word	0x0800b1d0
 800237c:	0800b1d8 	.word	0x0800b1d8
 8002380:	0800b1e0 	.word	0x0800b1e0
 8002384:	4a67      	ldr	r2, [pc, #412]	; (8002524 <HandleGui+0xba4>)
 8002386:	6193      	str	r3, [r2, #24]
			  ReflowParameters.ReflowTime = ReflowParameters.ReflowTime2;
 8002388:	4b66      	ldr	r3, [pc, #408]	; (8002524 <HandleGui+0xba4>)
 800238a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800238c:	4a65      	ldr	r2, [pc, #404]	; (8002524 <HandleGui+0xba4>)
 800238e:	6213      	str	r3, [r2, #32]
			  ReflowParameters.ReflowTempeture = ReflowParameters.ReflowTempeture2;
 8002390:	4b64      	ldr	r3, [pc, #400]	; (8002524 <HandleGui+0xba4>)
 8002392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002394:	4a63      	ldr	r2, [pc, #396]	; (8002524 <HandleGui+0xba4>)
 8002396:	61d3      	str	r3, [r2, #28]
			  Update_Page_3();
 8002398:	f7ff f998 	bl	80016cc <Update_Page_3>
			  //NEXTION_CMD("page 3");
			  calculateReflowCurve();
 800239c:	f000 f9f4 	bl	8002788 <calculateReflowCurve>
		  }

		  	// Save current parameters to Lead 217C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3bs3", 5) == 0){
 80023a0:	2205      	movs	r2, #5
 80023a2:	4961      	ldr	r1, [pc, #388]	; (8002528 <HandleGui+0xba8>)
 80023a4:	4861      	ldr	r0, [pc, #388]	; (800252c <HandleGui+0xbac>)
 80023a6:	f005 f927 	bl	80075f8 <strncmp>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d11f      	bne.n	80023f0 <HandleGui+0xa70>
			  ReflowParameters.firstHeatUpRate3 = ReflowParameters.firstHeatUpRate;
 80023b0:	4b5c      	ldr	r3, [pc, #368]	; (8002524 <HandleGui+0xba4>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4a5b      	ldr	r2, [pc, #364]	; (8002524 <HandleGui+0xba4>)
 80023b6:	66d3      	str	r3, [r2, #108]	; 0x6c
			  ReflowParameters.SoakTime3 = ReflowParameters.SoakTime;
 80023b8:	4b5a      	ldr	r3, [pc, #360]	; (8002524 <HandleGui+0xba4>)
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	4a59      	ldr	r2, [pc, #356]	; (8002524 <HandleGui+0xba4>)
 80023be:	6753      	str	r3, [r2, #116]	; 0x74
			  ReflowParameters.SoakTempeture3 = ReflowParameters.SoakTempeture;
 80023c0:	4b58      	ldr	r3, [pc, #352]	; (8002524 <HandleGui+0xba4>)
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	4a57      	ldr	r2, [pc, #348]	; (8002524 <HandleGui+0xba4>)
 80023c6:	6713      	str	r3, [r2, #112]	; 0x70
			  ReflowParameters.secondHeatUpRate3 = ReflowParameters.secondHeatUpRate;
 80023c8:	4b56      	ldr	r3, [pc, #344]	; (8002524 <HandleGui+0xba4>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	4a55      	ldr	r2, [pc, #340]	; (8002524 <HandleGui+0xba4>)
 80023ce:	6793      	str	r3, [r2, #120]	; 0x78
			  ReflowParameters.ReflowTime3 = ReflowParameters.ReflowTime;
 80023d0:	4b54      	ldr	r3, [pc, #336]	; (8002524 <HandleGui+0xba4>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4a53      	ldr	r2, [pc, #332]	; (8002524 <HandleGui+0xba4>)
 80023d6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
			  ReflowParameters.ReflowTempeture3 = ReflowParameters.ReflowTempeture;
 80023da:	4b52      	ldr	r3, [pc, #328]	; (8002524 <HandleGui+0xba4>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	4a51      	ldr	r2, [pc, #324]	; (8002524 <HandleGui+0xba4>)
 80023e0:	67d3      	str	r3, [r2, #124]	; 0x7c
			  Update_Page_3();
 80023e2:	f7ff f973 	bl	80016cc <Update_Page_3>
			  // needed page refresh because of strange nextion timers behavior
			  NEXTION_CMD("page 3");
 80023e6:	4852      	ldr	r0, [pc, #328]	; (8002530 <HandleGui+0xbb0>)
 80023e8:	f7ff f898 	bl	800151c <NEXTION_CMD>
			  calculateReflowCurve();
 80023ec:	f000 f9cc 	bl	8002788 <calculateReflowCurve>
		  }

		  	// Load Lead 217C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3b11", 5) == 0){
 80023f0:	2205      	movs	r2, #5
 80023f2:	4950      	ldr	r1, [pc, #320]	; (8002534 <HandleGui+0xbb4>)
 80023f4:	484d      	ldr	r0, [pc, #308]	; (800252c <HandleGui+0xbac>)
 80023f6:	f005 f8ff 	bl	80075f8 <strncmp>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d11c      	bne.n	800243a <HandleGui+0xaba>

			  ReflowParameters.firstHeatUpRate = ReflowParameters.firstHeatUpRate3;
 8002400:	4b48      	ldr	r3, [pc, #288]	; (8002524 <HandleGui+0xba4>)
 8002402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002404:	4a47      	ldr	r2, [pc, #284]	; (8002524 <HandleGui+0xba4>)
 8002406:	60d3      	str	r3, [r2, #12]
			  ReflowParameters.SoakTime = ReflowParameters.SoakTime3;
 8002408:	4b46      	ldr	r3, [pc, #280]	; (8002524 <HandleGui+0xba4>)
 800240a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240c:	4a45      	ldr	r2, [pc, #276]	; (8002524 <HandleGui+0xba4>)
 800240e:	6153      	str	r3, [r2, #20]
			  ReflowParameters.SoakTempeture = ReflowParameters.SoakTempeture3;
 8002410:	4b44      	ldr	r3, [pc, #272]	; (8002524 <HandleGui+0xba4>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	4a43      	ldr	r2, [pc, #268]	; (8002524 <HandleGui+0xba4>)
 8002416:	6113      	str	r3, [r2, #16]
			  ReflowParameters.secondHeatUpRate = ReflowParameters.secondHeatUpRate3;
 8002418:	4b42      	ldr	r3, [pc, #264]	; (8002524 <HandleGui+0xba4>)
 800241a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800241c:	4a41      	ldr	r2, [pc, #260]	; (8002524 <HandleGui+0xba4>)
 800241e:	6193      	str	r3, [r2, #24]
			  ReflowParameters.ReflowTime = ReflowParameters.ReflowTime3;
 8002420:	4b40      	ldr	r3, [pc, #256]	; (8002524 <HandleGui+0xba4>)
 8002422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002426:	4a3f      	ldr	r2, [pc, #252]	; (8002524 <HandleGui+0xba4>)
 8002428:	6213      	str	r3, [r2, #32]
			  ReflowParameters.ReflowTempeture = ReflowParameters.ReflowTempeture3;
 800242a:	4b3e      	ldr	r3, [pc, #248]	; (8002524 <HandleGui+0xba4>)
 800242c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800242e:	4a3d      	ldr	r2, [pc, #244]	; (8002524 <HandleGui+0xba4>)
 8002430:	61d3      	str	r3, [r2, #28]
			  Update_Page_3();
 8002432:	f7ff f94b 	bl	80016cc <Update_Page_3>
			  //NEXTION_CMD("page 3");
			  calculateReflowCurve();
 8002436:	f000 f9a7 	bl	8002788 <calculateReflowCurve>
		  }

		  // restore factory default profiles	(not all tested)
		  if(strncmp((char *)UART_Recieved_Data, "p3br7", 5) == 0){
 800243a:	2205      	movs	r2, #5
 800243c:	493e      	ldr	r1, [pc, #248]	; (8002538 <HandleGui+0xbb8>)
 800243e:	483b      	ldr	r0, [pc, #236]	; (800252c <HandleGui+0xbac>)
 8002440:	f005 f8da 	bl	80075f8 <strncmp>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d168      	bne.n	800251c <HandleGui+0xb9c>

			  	// Lead 217C https://www.chipquik.com/datasheets/TS391SNL50.pdf
				ReflowParameters.firstHeatUpRate3 = 0.75;
 800244a:	4b36      	ldr	r3, [pc, #216]	; (8002524 <HandleGui+0xba4>)
 800244c:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8002450:	66da      	str	r2, [r3, #108]	; 0x6c
				ReflowParameters.SoakTime3 = 100;
 8002452:	4b34      	ldr	r3, [pc, #208]	; (8002524 <HandleGui+0xba4>)
 8002454:	2264      	movs	r2, #100	; 0x64
 8002456:	675a      	str	r2, [r3, #116]	; 0x74
				ReflowParameters.SoakTempeture3 = 185;
 8002458:	4b32      	ldr	r3, [pc, #200]	; (8002524 <HandleGui+0xba4>)
 800245a:	22b9      	movs	r2, #185	; 0xb9
 800245c:	671a      	str	r2, [r3, #112]	; 0x70
				ReflowParameters.secondHeatUpRate3 = 1;
 800245e:	4b31      	ldr	r3, [pc, #196]	; (8002524 <HandleGui+0xba4>)
 8002460:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002464:	679a      	str	r2, [r3, #120]	; 0x78
				ReflowParameters.ReflowTime3 = 90;
 8002466:	4b2f      	ldr	r3, [pc, #188]	; (8002524 <HandleGui+0xba4>)
 8002468:	225a      	movs	r2, #90	; 0x5a
 800246a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				ReflowParameters.ReflowTempeture3 = 245;
 800246e:	4b2d      	ldr	r3, [pc, #180]	; (8002524 <HandleGui+0xba4>)
 8002470:	22f5      	movs	r2, #245	; 0xf5
 8002472:	67da      	str	r2, [r3, #124]	; 0x7c
				// Lead 183C https://www.chipquik.com/datasheets/TS391AX50.pdf
				ReflowParameters.firstHeatUpRate2 = 0.75;
 8002474:	4b2b      	ldr	r3, [pc, #172]	; (8002524 <HandleGui+0xba4>)
 8002476:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800247a:	655a      	str	r2, [r3, #84]	; 0x54
				ReflowParameters.SoakTime2 = 100;
 800247c:	4b29      	ldr	r3, [pc, #164]	; (8002524 <HandleGui+0xba4>)
 800247e:	2264      	movs	r2, #100	; 0x64
 8002480:	65da      	str	r2, [r3, #92]	; 0x5c
				ReflowParameters.SoakTempeture2 = 150;
 8002482:	4b28      	ldr	r3, [pc, #160]	; (8002524 <HandleGui+0xba4>)
 8002484:	2296      	movs	r2, #150	; 0x96
 8002486:	659a      	str	r2, [r3, #88]	; 0x58
				ReflowParameters.secondHeatUpRate2 = 1;
 8002488:	4b26      	ldr	r3, [pc, #152]	; (8002524 <HandleGui+0xba4>)
 800248a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800248e:	661a      	str	r2, [r3, #96]	; 0x60
				ReflowParameters.ReflowTime2 = 100;
 8002490:	4b24      	ldr	r3, [pc, #144]	; (8002524 <HandleGui+0xba4>)
 8002492:	2264      	movs	r2, #100	; 0x64
 8002494:	669a      	str	r2, [r3, #104]	; 0x68
				ReflowParameters.ReflowTempeture2 = 230;
 8002496:	4b23      	ldr	r3, [pc, #140]	; (8002524 <HandleGui+0xba4>)
 8002498:	22e6      	movs	r2, #230	; 0xe6
 800249a:	665a      	str	r2, [r3, #100]	; 0x64
				// Lead 148C
				ReflowParameters.firstHeatUpRate1 = 0.75;
 800249c:	4b21      	ldr	r3, [pc, #132]	; (8002524 <HandleGui+0xba4>)
 800249e:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 80024a2:	63da      	str	r2, [r3, #60]	; 0x3c
				ReflowParameters.SoakTime1 = 100;
 80024a4:	4b1f      	ldr	r3, [pc, #124]	; (8002524 <HandleGui+0xba4>)
 80024a6:	2264      	movs	r2, #100	; 0x64
 80024a8:	645a      	str	r2, [r3, #68]	; 0x44
				ReflowParameters.SoakTempeture1 = 140;
 80024aa:	4b1e      	ldr	r3, [pc, #120]	; (8002524 <HandleGui+0xba4>)
 80024ac:	228c      	movs	r2, #140	; 0x8c
 80024ae:	641a      	str	r2, [r3, #64]	; 0x40
				ReflowParameters.secondHeatUpRate1 = 1;
 80024b0:	4b1c      	ldr	r3, [pc, #112]	; (8002524 <HandleGui+0xba4>)
 80024b2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80024b6:	649a      	str	r2, [r3, #72]	; 0x48
				ReflowParameters.ReflowTime1 = 100;
 80024b8:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <HandleGui+0xba4>)
 80024ba:	2264      	movs	r2, #100	; 0x64
 80024bc:	651a      	str	r2, [r3, #80]	; 0x50
				ReflowParameters.ReflowTempeture1 = 175;
 80024be:	4b19      	ldr	r3, [pc, #100]	; (8002524 <HandleGui+0xba4>)
 80024c0:	22af      	movs	r2, #175	; 0xaf
 80024c2:	64da      	str	r2, [r3, #76]	; 0x4c
				// Lead 138C http://www.chipquik.com/datasheets/TS391LT50.pdf
				ReflowParameters.firstHeatUpRate0 = 0.75;
 80024c4:	4b17      	ldr	r3, [pc, #92]	; (8002524 <HandleGui+0xba4>)
 80024c6:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 80024ca:	625a      	str	r2, [r3, #36]	; 0x24
				ReflowParameters.SoakTime0 = 100;
 80024cc:	4b15      	ldr	r3, [pc, #84]	; (8002524 <HandleGui+0xba4>)
 80024ce:	2264      	movs	r2, #100	; 0x64
 80024d0:	62da      	str	r2, [r3, #44]	; 0x2c
				ReflowParameters.SoakTempeture0 = 130;
 80024d2:	4b14      	ldr	r3, [pc, #80]	; (8002524 <HandleGui+0xba4>)
 80024d4:	2282      	movs	r2, #130	; 0x82
 80024d6:	629a      	str	r2, [r3, #40]	; 0x28
				ReflowParameters.secondHeatUpRate0 = 1;
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <HandleGui+0xba4>)
 80024da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80024de:	631a      	str	r2, [r3, #48]	; 0x30
				ReflowParameters.ReflowTime0 = 100;
 80024e0:	4b10      	ldr	r3, [pc, #64]	; (8002524 <HandleGui+0xba4>)
 80024e2:	2264      	movs	r2, #100	; 0x64
 80024e4:	639a      	str	r2, [r3, #56]	; 0x38
				ReflowParameters.ReflowTempeture0 = 165;
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <HandleGui+0xba4>)
 80024e8:	22a5      	movs	r2, #165	; 0xa5
 80024ea:	635a      	str	r2, [r3, #52]	; 0x34
				// Lead default (138C)
				ReflowParameters.firstHeatUpRate = 0.75;
 80024ec:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <HandleGui+0xba4>)
 80024ee:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 80024f2:	60da      	str	r2, [r3, #12]
				ReflowParameters.SoakTime = 100;
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HandleGui+0xba4>)
 80024f6:	2264      	movs	r2, #100	; 0x64
 80024f8:	615a      	str	r2, [r3, #20]
				ReflowParameters.SoakTempeture = 130;
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <HandleGui+0xba4>)
 80024fc:	2282      	movs	r2, #130	; 0x82
 80024fe:	611a      	str	r2, [r3, #16]
				ReflowParameters.secondHeatUpRate = 1;
 8002500:	4b08      	ldr	r3, [pc, #32]	; (8002524 <HandleGui+0xba4>)
 8002502:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002506:	619a      	str	r2, [r3, #24]
				ReflowParameters.ReflowTime = 100;
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HandleGui+0xba4>)
 800250a:	2264      	movs	r2, #100	; 0x64
 800250c:	621a      	str	r2, [r3, #32]
				ReflowParameters.ReflowTempeture = 165;
 800250e:	4b05      	ldr	r3, [pc, #20]	; (8002524 <HandleGui+0xba4>)
 8002510:	22a5      	movs	r2, #165	; 0xa5
 8002512:	61da      	str	r2, [r3, #28]

				calculateReflowCurve();
 8002514:	f000 f938 	bl	8002788 <calculateReflowCurve>
				Update_Page_0();
 8002518:	f7ff f92e 	bl	8001778 <Update_Page_0>
		  }

}
 800251c:	bf00      	nop
 800251e:	3790      	adds	r7, #144	; 0x90
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20001328 	.word	0x20001328
 8002528:	0800b1e8 	.word	0x0800b1e8
 800252c:	20000004 	.word	0x20000004
 8002530:	0800b178 	.word	0x0800b178
 8002534:	0800b1f0 	.word	0x0800b1f0
 8002538:	0800b1f8 	.word	0x0800b1f8
 800253c:	00000000 	.word	0x00000000

08002540 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

	TempDrawCounter++;
 8002548:	4b77      	ldr	r3, [pc, #476]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	3301      	adds	r3, #1
 800254e:	4a76      	ldr	r2, [pc, #472]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002550:	6013      	str	r3, [r2, #0]

	if (htim == &htim4) {
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a75      	ldr	r2, [pc, #468]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002556:	4293      	cmp	r3, r2
 8002558:	f040 80db 	bne.w	8002712 <HAL_TIM_PeriodElapsedCallback+0x1d2>
		//Thermocouple alle 500ms auslesen:
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 800255c:	2200      	movs	r2, #0
 800255e:	2110      	movs	r1, #16
 8002560:	4873      	ldr	r0, [pc, #460]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002562:	f001 fe2b 	bl	80041bc <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1, data, 2, 100);
 8002566:	2364      	movs	r3, #100	; 0x64
 8002568:	2202      	movs	r2, #2
 800256a:	4972      	ldr	r1, [pc, #456]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800256c:	4872      	ldr	r0, [pc, #456]	; (8002738 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800256e:	f002 fadb 	bl	8004b28 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8002572:	2201      	movs	r2, #1
 8002574:	2110      	movs	r1, #16
 8002576:	486e      	ldr	r0, [pc, #440]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002578:	f001 fe20 	bl	80041bc <HAL_GPIO_WritePin>

		temp = ((((uint16_t) data[1] << 8) | data[0]) >> 3) * 0.249;
 800257c:	4b6d      	ldr	r3, [pc, #436]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800257e:	785b      	ldrb	r3, [r3, #1]
 8002580:	021b      	lsls	r3, r3, #8
 8002582:	4a6c      	ldr	r2, [pc, #432]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002584:	7812      	ldrb	r2, [r2, #0]
 8002586:	4313      	orrs	r3, r2
 8002588:	10db      	asrs	r3, r3, #3
 800258a:	4618      	mov	r0, r3
 800258c:	f7fd ff3a 	bl	8000404 <__aeabi_i2d>
 8002590:	a363      	add	r3, pc, #396	; (adr r3, 8002720 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002596:	f7fd ff9f 	bl	80004d8 <__aeabi_dmul>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	f7fe fa91 	bl	8000ac8 <__aeabi_d2f>
 80025a6:	4603      	mov	r3, r0
 80025a8:	4a64      	ldr	r2, [pc, #400]	; (800273c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80025aa:	6013      	str	r3, [r2, #0]
		// basic filter to reduce random and noisy temperature readings
		if ((fabs(temp - lastTemp) > 25) && (HAL_GetTick() > 3000))	{
 80025ac:	4b63      	ldr	r3, [pc, #396]	; (800273c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a63      	ldr	r2, [pc, #396]	; (8002740 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fada 	bl	8000b70 <__aeabi_fsub>
 80025bc:	4603      	mov	r3, r0
 80025be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025c2:	4960      	ldr	r1, [pc, #384]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe fd99 	bl	80010fc <__aeabi_fcmpgt>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00b      	beq.n	80025e8 <HAL_TIM_PeriodElapsedCallback+0xa8>
 80025d0:	f001 f87a 	bl	80036c8 <HAL_GetTick>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80025da:	4293      	cmp	r3, r2
 80025dc:	d904      	bls.n	80025e8 <HAL_TIM_PeriodElapsedCallback+0xa8>
			temp = lastTemp;
 80025de:	4b58      	ldr	r3, [pc, #352]	; (8002740 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a56      	ldr	r2, [pc, #344]	; (800273c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	e003      	b.n	80025f0 <HAL_TIM_PeriodElapsedCallback+0xb0>
		}
		else {
			lastTemp=temp;
 80025e8:	4b54      	ldr	r3, [pc, #336]	; (800273c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a54      	ldr	r2, [pc, #336]	; (8002740 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80025ee:	6013      	str	r3, [r2, #0]
		}

		//Reflow Prozess Einleiten:
		if (ReflowEnable == 1) {
 80025f0:	4b55      	ldr	r3, [pc, #340]	; (8002748 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	f040 8085 	bne.w	8002704 <HAL_TIM_PeriodElapsedCallback+0x1c4>
			//NextionDrawTemp(OffsetX + (uint32_t)((float32_t)(ReflowIndex)*dx), OffsetY - (uint32_t)((float32_t)(temp)*dy));

			if(ReflowIndex == PhaseIndex[0])
 80025fa:	4b54      	ldr	r3, [pc, #336]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80025fc:	881a      	ldrh	r2, [r3, #0]
 80025fe:	4b54      	ldr	r3, [pc, #336]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d103      	bne.n	800260e <HAL_TIM_PeriodElapsedCallback+0xce>
				sprintf(ConsoleMSG,"PREHEAT");
 8002606:	4953      	ldr	r1, [pc, #332]	; (8002754 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002608:	4853      	ldr	r0, [pc, #332]	; (8002758 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800260a:	f004 ffd5 	bl	80075b8 <siprintf>
			if(ReflowIndex == PhaseIndex[1])
 800260e:	4b4f      	ldr	r3, [pc, #316]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002610:	885a      	ldrh	r2, [r3, #2]
 8002612:	4b4f      	ldr	r3, [pc, #316]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d103      	bne.n	8002622 <HAL_TIM_PeriodElapsedCallback+0xe2>
				sprintf(ConsoleMSG,"SOAK");
 800261a:	4950      	ldr	r1, [pc, #320]	; (800275c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800261c:	484e      	ldr	r0, [pc, #312]	; (8002758 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800261e:	f004 ffcb 	bl	80075b8 <siprintf>
			if(ReflowIndex == PhaseIndex[2])
 8002622:	4b4a      	ldr	r3, [pc, #296]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002624:	889a      	ldrh	r2, [r3, #4]
 8002626:	4b4a      	ldr	r3, [pc, #296]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d103      	bne.n	8002636 <HAL_TIM_PeriodElapsedCallback+0xf6>
				sprintf(ConsoleMSG,"HEAT UP");
 800262e:	494c      	ldr	r1, [pc, #304]	; (8002760 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002630:	4849      	ldr	r0, [pc, #292]	; (8002758 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002632:	f004 ffc1 	bl	80075b8 <siprintf>
			if(ReflowIndex == PhaseIndex[3])
 8002636:	4b45      	ldr	r3, [pc, #276]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002638:	88da      	ldrh	r2, [r3, #6]
 800263a:	4b45      	ldr	r3, [pc, #276]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d103      	bne.n	800264a <HAL_TIM_PeriodElapsedCallback+0x10a>
				sprintf(ConsoleMSG,"REFLOW");
 8002642:	4948      	ldr	r1, [pc, #288]	; (8002764 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002644:	4844      	ldr	r0, [pc, #272]	; (8002758 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002646:	f004 ffb7 	bl	80075b8 <siprintf>

			//Regelabweichung
			float pid_error =  ReflowCurve[ReflowIndex] - temp;
 800264a:	4b41      	ldr	r3, [pc, #260]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	4b45      	ldr	r3, [pc, #276]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002652:	5c9b      	ldrb	r3, [r3, r2]
 8002654:	4618      	mov	r0, r3
 8002656:	f7fe fb41 	bl	8000cdc <__aeabi_i2f>
 800265a:	4602      	mov	r2, r0
 800265c:	4b37      	ldr	r3, [pc, #220]	; (800273c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4619      	mov	r1, r3
 8002662:	4610      	mov	r0, r2
 8002664:	f7fe fa84 	bl	8000b70 <__aeabi_fsub>
 8002668:	4603      	mov	r3, r0
 800266a:	60fb      	str	r3, [r7, #12]
			//Stellgroesse
			duty =  arm_pid_f32(&PID, pid_error);
 800266c:	68f9      	ldr	r1, [r7, #12]
 800266e:	483f      	ldr	r0, [pc, #252]	; (800276c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002670:	f7fe fe4a 	bl	8001308 <arm_pid_f32>
 8002674:	4603      	mov	r3, r0
 8002676:	4a3e      	ldr	r2, [pc, #248]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002678:	6013      	str	r3, [r2, #0]

			//Stellgrößenbegrenzung und Anti-Wind-UP (update 27.03.2021)
			if (duty > 1000) {
 800267a:	4b3d      	ldr	r3, [pc, #244]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	493d      	ldr	r1, [pc, #244]	; (8002774 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe fd3b 	bl	80010fc <__aeabi_fcmpgt>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d007      	beq.n	800269c <HAL_TIM_PeriodElapsedCallback+0x15c>
				duty = 1000;
 800268c:	4b38      	ldr	r3, [pc, #224]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800268e:	4a39      	ldr	r2, [pc, #228]	; (8002774 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002690:	601a      	str	r2, [r3, #0]
				PID.Ki = 0;
 8002692:	4b36      	ldr	r3, [pc, #216]	; (800276c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	61da      	str	r2, [r3, #28]
 800269a:	e012      	b.n	80026c2 <HAL_TIM_PeriodElapsedCallback+0x182>
			} else if (duty < 0) {
 800269c:	4b34      	ldr	r3, [pc, #208]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f04f 0100 	mov.w	r1, #0
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe fd0b 	bl	80010c0 <__aeabi_fcmplt>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d004      	beq.n	80026ba <HAL_TIM_PeriodElapsedCallback+0x17a>
				duty = 0;
 80026b0:	4b2f      	ldr	r3, [pc, #188]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	e003      	b.n	80026c2 <HAL_TIM_PeriodElapsedCallback+0x182>
			}
			else{
				PID.Ki = ReflowParameters.Ki;
 80026ba:	4b2f      	ldr	r3, [pc, #188]	; (8002778 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4a2b      	ldr	r2, [pc, #172]	; (800276c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80026c0:	61d3      	str	r3, [r2, #28]
			}

			//Dutycycle Anpassen
			htim1.Instance->CCR1 = (uint16_t)duty;
 80026c2:	4b2b      	ldr	r3, [pc, #172]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe fd22 	bl	8001110 <__aeabi_f2uiz>
 80026cc:	4603      	mov	r3, r0
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	4b2a      	ldr	r3, [pc, #168]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	635a      	str	r2, [r3, #52]	; 0x34

			ReflowIndex++;
 80026d6:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	3301      	adds	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	4b1c      	ldr	r3, [pc, #112]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80026e0:	801a      	strh	r2, [r3, #0]
			//Abbruchbedingung
			if (ReflowIndex == PhaseIndex[4]) {
 80026e2:	4b1a      	ldr	r3, [pc, #104]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80026e4:	891a      	ldrh	r2, [r3, #8]
 80026e6:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d111      	bne.n	8002712 <HAL_TIM_PeriodElapsedCallback+0x1d2>
				sprintf(ConsoleMSG,"FINISHED, OPEN DOOR");
 80026ee:	4924      	ldr	r1, [pc, #144]	; (8002780 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80026f0:	4819      	ldr	r0, [pc, #100]	; (8002758 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80026f2:	f004 ff61 	bl	80075b8 <siprintf>
					BuzzerEnable = 1;
 80026f6:	4b23      	ldr	r3, [pc, #140]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	701a      	strb	r2, [r3, #0]
					ReflowEnable = 0;
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR1 = 0;
		}

	}

}
 8002702:	e006      	b.n	8002712 <HAL_TIM_PeriodElapsedCallback+0x1d2>
			ReflowIndex = 0;
 8002704:	4b12      	ldr	r3, [pc, #72]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002706:	2200      	movs	r2, #0
 8002708:	801a      	strh	r2, [r3, #0]
			htim1.Instance->CCR1 = 0;
 800270a:	4b1c      	ldr	r3, [pc, #112]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2200      	movs	r2, #0
 8002710:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002712:	bf00      	nop
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	f3af 8000 	nop.w
 8002720:	645a1cac 	.word	0x645a1cac
 8002724:	3fcfdf3b 	.word	0x3fcfdf3b
 8002728:	200013f4 	.word	0x200013f4
 800272c:	200002bc 	.word	0x200002bc
 8002730:	40010800 	.word	0x40010800
 8002734:	20000354 	.word	0x20000354
 8002738:	2000021c 	.word	0x2000021c
 800273c:	200012f8 	.word	0x200012f8
 8002740:	200012fc 	.word	0x200012fc
 8002744:	41c80000 	.word	0x41c80000
 8002748:	200013b0 	.word	0x200013b0
 800274c:	200013cc 	.word	0x200013cc
 8002750:	200013b2 	.word	0x200013b2
 8002754:	0800b208 	.word	0x0800b208
 8002758:	200013d8 	.word	0x200013d8
 800275c:	0800b210 	.word	0x0800b210
 8002760:	0800b218 	.word	0x0800b218
 8002764:	0800b220 	.word	0x0800b220
 8002768:	20000358 	.word	0x20000358
 800276c:	20001304 	.word	0x20001304
 8002770:	20001300 	.word	0x20001300
 8002774:	447a0000 	.word	0x447a0000
 8002778:	20001328 	.word	0x20001328
 800277c:	20000274 	.word	0x20000274
 8002780:	0800b228 	.word	0x0800b228
 8002784:	200013b1 	.word	0x200013b1

08002788 <calculateReflowCurve>:


void calculateReflowCurve(){
 8002788:	b5b0      	push	{r4, r5, r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
	for(int i =0;i<4000;i++){
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	e007      	b.n	80027a4 <calculateReflowCurve+0x1c>
		ReflowCurve[i]=0;
 8002794:	4aa0      	ldr	r2, [pc, #640]	; (8002a18 <calculateReflowCurve+0x290>)
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	4413      	add	r3, r2
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<4000;i++){
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3301      	adds	r3, #1
 80027a2:	61fb      	str	r3, [r7, #28]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80027aa:	dbf3      	blt.n	8002794 <calculateReflowCurve+0xc>
	}

	int index = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61bb      	str	r3, [r7, #24]
	float timestep = 0.5;
 80027b0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80027b4:	617b      	str	r3, [r7, #20]
	//First Heat Up:
	while (24 + timestep * ReflowParameters.firstHeatUpRate <= ReflowParameters.SoakTempeture) {
 80027b6:	e01f      	b.n	80027f8 <calculateReflowCurve+0x70>
	ReflowCurve[index] = 24 + timestep * ReflowParameters.firstHeatUpRate;
 80027b8:	4b98      	ldr	r3, [pc, #608]	; (8002a1c <calculateReflowCurve+0x294>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	6979      	ldr	r1, [r7, #20]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fae0 	bl	8000d84 <__aeabi_fmul>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4996      	ldr	r1, [pc, #600]	; (8002a20 <calculateReflowCurve+0x298>)
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fe f9d3 	bl	8000b74 <__addsf3>
 80027ce:	4603      	mov	r3, r0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fe fc9d 	bl	8001110 <__aeabi_f2uiz>
 80027d6:	4603      	mov	r3, r0
 80027d8:	b2d9      	uxtb	r1, r3
 80027da:	4a8f      	ldr	r2, [pc, #572]	; (8002a18 <calculateReflowCurve+0x290>)
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	4413      	add	r3, r2
 80027e0:	460a      	mov	r2, r1
 80027e2:	701a      	strb	r2, [r3, #0]
	index++;
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	3301      	adds	r3, #1
 80027e8:	61bb      	str	r3, [r7, #24]
	timestep = timestep + 0.5;
 80027ea:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80027ee:	6978      	ldr	r0, [r7, #20]
 80027f0:	f7fe f9c0 	bl	8000b74 <__addsf3>
 80027f4:	4603      	mov	r3, r0
 80027f6:	617b      	str	r3, [r7, #20]
	while (24 + timestep * ReflowParameters.firstHeatUpRate <= ReflowParameters.SoakTempeture) {
 80027f8:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <calculateReflowCurve+0x294>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	6979      	ldr	r1, [r7, #20]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fe fac0 	bl	8000d84 <__aeabi_fmul>
 8002804:	4603      	mov	r3, r0
 8002806:	4986      	ldr	r1, [pc, #536]	; (8002a20 <calculateReflowCurve+0x298>)
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe f9b3 	bl	8000b74 <__addsf3>
 800280e:	4603      	mov	r3, r0
 8002810:	461c      	mov	r4, r3
 8002812:	4b82      	ldr	r3, [pc, #520]	; (8002a1c <calculateReflowCurve+0x294>)
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe fa5c 	bl	8000cd4 <__aeabi_ui2f>
 800281c:	4603      	mov	r3, r0
 800281e:	4619      	mov	r1, r3
 8002820:	4620      	mov	r0, r4
 8002822:	f7fe fc57 	bl	80010d4 <__aeabi_fcmple>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1c5      	bne.n	80027b8 <calculateReflowCurve+0x30>
	}
	PhaseIndex[1]=index;
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	b29a      	uxth	r2, r3
 8002830:	4b7c      	ldr	r3, [pc, #496]	; (8002a24 <calculateReflowCurve+0x29c>)
 8002832:	805a      	strh	r2, [r3, #2]

	//Soak
	int Soakduration = 2*ReflowParameters.SoakTime;
 8002834:	4b79      	ldr	r3, [pc, #484]	; (8002a1c <calculateReflowCurve+0x294>)
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<Soakduration;i++){
 800283c:	2300      	movs	r3, #0
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	e00a      	b.n	8002858 <calculateReflowCurve+0xd0>
		ReflowCurve[index+i]=ReflowParameters.SoakTempeture;
 8002842:	4b76      	ldr	r3, [pc, #472]	; (8002a1c <calculateReflowCurve+0x294>)
 8002844:	6919      	ldr	r1, [r3, #16]
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4413      	add	r3, r2
 800284c:	b2c9      	uxtb	r1, r1
 800284e:	4a72      	ldr	r2, [pc, #456]	; (8002a18 <calculateReflowCurve+0x290>)
 8002850:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<Soakduration;i++){
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	3301      	adds	r3, #1
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	429a      	cmp	r2, r3
 800285e:	dbf0      	blt.n	8002842 <calculateReflowCurve+0xba>
	}

	//Second Heat Up:
	index = index + Soakduration;
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	4413      	add	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
	PhaseIndex[2]=index;
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	b29a      	uxth	r2, r3
 800286c:	4b6d      	ldr	r3, [pc, #436]	; (8002a24 <calculateReflowCurve+0x29c>)
 800286e:	809a      	strh	r2, [r3, #4]
	timestep = 0.5;
 8002870:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002874:	617b      	str	r3, [r7, #20]
	while (ReflowParameters.SoakTempeture + timestep * ReflowParameters.secondHeatUpRate <= ReflowParameters.ReflowTempeture) {
 8002876:	e02e      	b.n	80028d6 <calculateReflowCurve+0x14e>
	ReflowCurve[index] = ReflowParameters.SoakTempeture + (uint8_t)timestep * ReflowParameters.secondHeatUpRate;
 8002878:	4b68      	ldr	r3, [pc, #416]	; (8002a1c <calculateReflowCurve+0x294>)
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	4618      	mov	r0, r3
 800287e:	f7fe fa29 	bl	8000cd4 <__aeabi_ui2f>
 8002882:	4604      	mov	r4, r0
 8002884:	6978      	ldr	r0, [r7, #20]
 8002886:	f7fe fc43 	bl	8001110 <__aeabi_f2uiz>
 800288a:	4603      	mov	r3, r0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe fa24 	bl	8000cdc <__aeabi_i2f>
 8002894:	4602      	mov	r2, r0
 8002896:	4b61      	ldr	r3, [pc, #388]	; (8002a1c <calculateReflowCurve+0x294>)
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	4619      	mov	r1, r3
 800289c:	4610      	mov	r0, r2
 800289e:	f7fe fa71 	bl	8000d84 <__aeabi_fmul>
 80028a2:	4603      	mov	r3, r0
 80028a4:	4619      	mov	r1, r3
 80028a6:	4620      	mov	r0, r4
 80028a8:	f7fe f964 	bl	8000b74 <__addsf3>
 80028ac:	4603      	mov	r3, r0
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe fc2e 	bl	8001110 <__aeabi_f2uiz>
 80028b4:	4603      	mov	r3, r0
 80028b6:	b2d9      	uxtb	r1, r3
 80028b8:	4a57      	ldr	r2, [pc, #348]	; (8002a18 <calculateReflowCurve+0x290>)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	4413      	add	r3, r2
 80028be:	460a      	mov	r2, r1
 80028c0:	701a      	strb	r2, [r3, #0]
	index++;
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	3301      	adds	r3, #1
 80028c6:	61bb      	str	r3, [r7, #24]
	timestep = timestep + 0.5;
 80028c8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80028cc:	6978      	ldr	r0, [r7, #20]
 80028ce:	f7fe f951 	bl	8000b74 <__addsf3>
 80028d2:	4603      	mov	r3, r0
 80028d4:	617b      	str	r3, [r7, #20]
	while (ReflowParameters.SoakTempeture + timestep * ReflowParameters.secondHeatUpRate <= ReflowParameters.ReflowTempeture) {
 80028d6:	4b51      	ldr	r3, [pc, #324]	; (8002a1c <calculateReflowCurve+0x294>)
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe f9fa 	bl	8000cd4 <__aeabi_ui2f>
 80028e0:	4604      	mov	r4, r0
 80028e2:	4b4e      	ldr	r3, [pc, #312]	; (8002a1c <calculateReflowCurve+0x294>)
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	6979      	ldr	r1, [r7, #20]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fe fa4b 	bl	8000d84 <__aeabi_fmul>
 80028ee:	4603      	mov	r3, r0
 80028f0:	4619      	mov	r1, r3
 80028f2:	4620      	mov	r0, r4
 80028f4:	f7fe f93e 	bl	8000b74 <__addsf3>
 80028f8:	4603      	mov	r3, r0
 80028fa:	461c      	mov	r4, r3
 80028fc:	4b47      	ldr	r3, [pc, #284]	; (8002a1c <calculateReflowCurve+0x294>)
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	4618      	mov	r0, r3
 8002902:	f7fe f9e7 	bl	8000cd4 <__aeabi_ui2f>
 8002906:	4603      	mov	r3, r0
 8002908:	4619      	mov	r1, r3
 800290a:	4620      	mov	r0, r4
 800290c:	f7fe fbe2 	bl	80010d4 <__aeabi_fcmple>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1b0      	bne.n	8002878 <calculateReflowCurve+0xf0>
	}
	PhaseIndex[3]=index;
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	b29a      	uxth	r2, r3
 800291a:	4b42      	ldr	r3, [pc, #264]	; (8002a24 <calculateReflowCurve+0x29c>)
 800291c:	80da      	strh	r2, [r3, #6]

	//Reflow
	int Reflowduration = 2*ReflowParameters.ReflowTime;
 800291e:	4b3f      	ldr	r3, [pc, #252]	; (8002a1c <calculateReflowCurve+0x294>)
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	607b      	str	r3, [r7, #4]

	for(int i=0;i<Reflowduration;i++){
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	e00a      	b.n	8002942 <calculateReflowCurve+0x1ba>
		ReflowCurve[index+i]=ReflowParameters.ReflowTempeture;
 800292c:	4b3b      	ldr	r3, [pc, #236]	; (8002a1c <calculateReflowCurve+0x294>)
 800292e:	69d9      	ldr	r1, [r3, #28]
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4413      	add	r3, r2
 8002936:	b2c9      	uxtb	r1, r1
 8002938:	4a37      	ldr	r2, [pc, #220]	; (8002a18 <calculateReflowCurve+0x290>)
 800293a:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<Reflowduration;i++){
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	3301      	adds	r3, #1
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	429a      	cmp	r2, r3
 8002948:	dbf0      	blt.n	800292c <calculateReflowCurve+0x1a4>
	}

	index = index + Reflowduration;
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4413      	add	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
	ReflowCurve[index]=0;
 8002952:	4a31      	ldr	r2, [pc, #196]	; (8002a18 <calculateReflowCurve+0x290>)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	4413      	add	r3, r2
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
	PhaseIndex[4]=index;
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	b29a      	uxth	r2, r3
 8002960:	4b30      	ldr	r3, [pc, #192]	; (8002a24 <calculateReflowCurve+0x29c>)
 8002962:	811a      	strh	r2, [r3, #8]

	//Cooldown
	timestep = 0.5;
 8002964:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002968:	617b      	str	r3, [r7, #20]
	while (ReflowParameters.ReflowTempeture - timestep * 1.8 >= 24) {
 800296a:	e02b      	b.n	80029c4 <calculateReflowCurve+0x23c>
	ReflowCurve[index] = ReflowParameters.ReflowTempeture - timestep * 1.8;
 800296c:	4b2b      	ldr	r3, [pc, #172]	; (8002a1c <calculateReflowCurve+0x294>)
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	4618      	mov	r0, r3
 8002972:	f7fd fd37 	bl	80003e4 <__aeabi_ui2d>
 8002976:	4604      	mov	r4, r0
 8002978:	460d      	mov	r5, r1
 800297a:	6978      	ldr	r0, [r7, #20]
 800297c:	f7fd fd54 	bl	8000428 <__aeabi_f2d>
 8002980:	a323      	add	r3, pc, #140	; (adr r3, 8002a10 <calculateReflowCurve+0x288>)
 8002982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002986:	f7fd fda7 	bl	80004d8 <__aeabi_dmul>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4620      	mov	r0, r4
 8002990:	4629      	mov	r1, r5
 8002992:	f7fd fbe9 	bl	8000168 <__aeabi_dsub>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4610      	mov	r0, r2
 800299c:	4619      	mov	r1, r3
 800299e:	f7fe f873 	bl	8000a88 <__aeabi_d2uiz>
 80029a2:	4603      	mov	r3, r0
 80029a4:	b2d9      	uxtb	r1, r3
 80029a6:	4a1c      	ldr	r2, [pc, #112]	; (8002a18 <calculateReflowCurve+0x290>)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	4413      	add	r3, r2
 80029ac:	460a      	mov	r2, r1
 80029ae:	701a      	strb	r2, [r3, #0]
	index++;
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	3301      	adds	r3, #1
 80029b4:	61bb      	str	r3, [r7, #24]
	timestep = timestep + 0.5;
 80029b6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80029ba:	6978      	ldr	r0, [r7, #20]
 80029bc:	f7fe f8da 	bl	8000b74 <__addsf3>
 80029c0:	4603      	mov	r3, r0
 80029c2:	617b      	str	r3, [r7, #20]
	while (ReflowParameters.ReflowTempeture - timestep * 1.8 >= 24) {
 80029c4:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <calculateReflowCurve+0x294>)
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fd fd0b 	bl	80003e4 <__aeabi_ui2d>
 80029ce:	4604      	mov	r4, r0
 80029d0:	460d      	mov	r5, r1
 80029d2:	6978      	ldr	r0, [r7, #20]
 80029d4:	f7fd fd28 	bl	8000428 <__aeabi_f2d>
 80029d8:	a30d      	add	r3, pc, #52	; (adr r3, 8002a10 <calculateReflowCurve+0x288>)
 80029da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029de:	f7fd fd7b 	bl	80004d8 <__aeabi_dmul>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4620      	mov	r0, r4
 80029e8:	4629      	mov	r1, r5
 80029ea:	f7fd fbbd 	bl	8000168 <__aeabi_dsub>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	4610      	mov	r0, r2
 80029f4:	4619      	mov	r1, r3
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <calculateReflowCurve+0x2a0>)
 80029fc:	f7fd fff2 	bl	80009e4 <__aeabi_dcmpge>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1b2      	bne.n	800296c <calculateReflowCurve+0x1e4>

	}
}
 8002a06:	bf00      	nop
 8002a08:	bf00      	nop
 8002a0a:	3720      	adds	r7, #32
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a10:	cccccccd 	.word	0xcccccccd
 8002a14:	3ffccccc 	.word	0x3ffccccc
 8002a18:	20000358 	.word	0x20000358
 8002a1c:	20001328 	.word	0x20001328
 8002a20:	41c00000 	.word	0x41c00000
 8002a24:	200013cc 	.word	0x200013cc
 8002a28:	40380000 	.word	0x40380000

08002a2c <Draw_Reflow_Curve>:


void Draw_Reflow_Curve()	{
 8002a2c:	b590      	push	{r4, r7, lr}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
	float32_t dx = 0.20833; //275px / 660s / 500 ms
 8002a32:	4b24      	ldr	r3, [pc, #144]	; (8002ac4 <Draw_Reflow_Curve+0x98>)
 8002a34:	613b      	str	r3, [r7, #16]
	float32_t dy = 0.7143; //175px / 245 Grad
 8002a36:	4b24      	ldr	r3, [pc, #144]	; (8002ac8 <Draw_Reflow_Curve+0x9c>)
 8002a38:	60fb      	str	r3, [r7, #12]
	uint32_t OffsetX = 35;
 8002a3a:	2323      	movs	r3, #35	; 0x23
 8002a3c:	60bb      	str	r3, [r7, #8]
	uint32_t OffsetY = 245;
 8002a3e:	23f5      	movs	r3, #245	; 0xf5
 8002a40:	607b      	str	r3, [r7, #4]
	uint32_t index = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]

	while(ReflowCurve[index] != 0){
 8002a46:	e030      	b.n	8002aaa <Draw_Reflow_Curve+0x7e>

		NextionDrawDot(OffsetX + (uint32_t)((float32_t)(index)*dx), OffsetY - (uint32_t)((float32_t)(ReflowCurve[index])*dy));
 8002a48:	6978      	ldr	r0, [r7, #20]
 8002a4a:	f7fe f943 	bl	8000cd4 <__aeabi_ui2f>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	6939      	ldr	r1, [r7, #16]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe f996 	bl	8000d84 <__aeabi_fmul>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fe fb58 	bl	8001110 <__aeabi_f2uiz>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	18d4      	adds	r4, r2, r3
 8002a66:	4a19      	ldr	r2, [pc, #100]	; (8002acc <Draw_Reflow_Curve+0xa0>)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe f930 	bl	8000cd4 <__aeabi_ui2f>
 8002a74:	4603      	mov	r3, r0
 8002a76:	68f9      	ldr	r1, [r7, #12]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe f983 	bl	8000d84 <__aeabi_fmul>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fe fb45 	bl	8001110 <__aeabi_f2uiz>
 8002a86:	4602      	mov	r2, r0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f7fe fd62 	bl	8001558 <NextionDrawDot>
		index= index + 4;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	3304      	adds	r3, #4
 8002a98:	617b      	str	r3, [r7, #20]

		if(strncmp((char *)UART_Recieved_Data, "p0b02", 5) == 0)
 8002a9a:	2205      	movs	r2, #5
 8002a9c:	490c      	ldr	r1, [pc, #48]	; (8002ad0 <Draw_Reflow_Curve+0xa4>)
 8002a9e:	480d      	ldr	r0, [pc, #52]	; (8002ad4 <Draw_Reflow_Curve+0xa8>)
 8002aa0:	f004 fdaa 	bl	80075f8 <strncmp>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d006      	beq.n	8002ab8 <Draw_Reflow_Curve+0x8c>
	while(ReflowCurve[index] != 0){
 8002aaa:	4a08      	ldr	r2, [pc, #32]	; (8002acc <Draw_Reflow_Curve+0xa0>)
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	4413      	add	r3, r2
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1c8      	bne.n	8002a48 <Draw_Reflow_Curve+0x1c>
			break;
	}
}
 8002ab6:	e000      	b.n	8002aba <Draw_Reflow_Curve+0x8e>
			break;
 8002ab8:	bf00      	nop
}
 8002aba:	bf00      	nop
 8002abc:	371c      	adds	r7, #28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd90      	pop	{r4, r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	3e555476 	.word	0x3e555476
 8002ac8:	3f36dc5d 	.word	0x3f36dc5d
 8002acc:	20000358 	.word	0x20000358
 8002ad0:	0800b120 	.word	0x0800b120
 8002ad4:	20000004 	.word	0x20000004

08002ad8 <startReflow>:


void startReflow()	{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
	ReflowEnable = 1;
 8002adc:	4b07      	ldr	r3, [pc, #28]	; (8002afc <startReflow+0x24>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	701a      	strb	r2, [r3, #0]
	NEXTION_CMD("page 0");
 8002ae2:	4807      	ldr	r0, [pc, #28]	; (8002b00 <startReflow+0x28>)
 8002ae4:	f7fe fd1a 	bl	800151c <NEXTION_CMD>
	Draw_Reflow_Curve();
 8002ae8:	f7ff ffa0 	bl	8002a2c <Draw_Reflow_Curve>
	TempDrawCounter = 0;
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <startReflow+0x2c>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
	Update_Page_0();
 8002af2:	f7fe fe41 	bl	8001778 <Update_Page_0>
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	200013b0 	.word	0x200013b0
 8002b00:	0800b23c 	.word	0x0800b23c
 8002b04:	200013f4 	.word	0x200013f4

08002b08 <stopReflow>:


void stopReflow()	{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0

	if ( ReflowEnable == 1 )	{
 8002b0c:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <stopReflow+0x28>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d10b      	bne.n	8002b2c <stopReflow+0x24>
		ReflowEnable = 0;
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <stopReflow+0x28>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	701a      	strb	r2, [r3, #0]
		TempDrawEnable = 0;
 8002b1a:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <stopReflow+0x2c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
		sprintf(ConsoleMSG,"STOPPED");
 8002b20:	4905      	ldr	r1, [pc, #20]	; (8002b38 <stopReflow+0x30>)
 8002b22:	4806      	ldr	r0, [pc, #24]	; (8002b3c <stopReflow+0x34>)
 8002b24:	f004 fd48 	bl	80075b8 <siprintf>
		Update_Page_0();
 8002b28:	f7fe fe26 	bl	8001778 <Update_Page_0>
	}
}
 8002b2c:	bf00      	nop
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	200013b0 	.word	0x200013b0
 8002b34:	200013f1 	.word	0x200013f1
 8002b38:	0800b244 	.word	0x0800b244
 8002b3c:	200013d8 	.word	0x200013d8

08002b40 <beepBeep>:


void beepBeep()	{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0

	  if (BuzzerEnable == 1)	{
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <beepBeep+0x2c>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d106      	bne.n	8002b5a <beepBeep+0x1a>
		  	  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b52:	4807      	ldr	r0, [pc, #28]	; (8002b70 <beepBeep+0x30>)
 8002b54:	f001 fb32 	bl	80041bc <HAL_GPIO_WritePin>
		  	}

		  else	{
		  	  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
			 	}
		  }
 8002b58:	e005      	b.n	8002b66 <beepBeep+0x26>
		  	  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b60:	4803      	ldr	r0, [pc, #12]	; (8002b70 <beepBeep+0x30>)
 8002b62:	f001 fb2b 	bl	80041bc <HAL_GPIO_WritePin>
		  }
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	200013b1 	.word	0x200013b1
 8002b70:	40010800 	.word	0x40010800

08002b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	Flash_Read_Data(0x0801FC00, (uint32_t *)&ReflowParameters);
 8002b78:	4975      	ldr	r1, [pc, #468]	; (8002d50 <main+0x1dc>)
 8002b7a:	4876      	ldr	r0, [pc, #472]	; (8002d54 <main+0x1e0>)
 8002b7c:	f7fe fba6 	bl	80012cc <Flash_Read_Data>

	if (!(ReflowParameters.version == config_version))	{
 8002b80:	4b73      	ldr	r3, [pc, #460]	; (8002d50 <main+0x1dc>)
 8002b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b86:	2b82      	cmp	r3, #130	; 0x82
 8002b88:	d073      	beq.n	8002c72 <main+0xfe>
		ReflowParameters.firstHeatUpRate3 = 0.75;
 8002b8a:	4b71      	ldr	r3, [pc, #452]	; (8002d50 <main+0x1dc>)
 8002b8c:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8002b90:	66da      	str	r2, [r3, #108]	; 0x6c
		ReflowParameters.SoakTime3 = 100;
 8002b92:	4b6f      	ldr	r3, [pc, #444]	; (8002d50 <main+0x1dc>)
 8002b94:	2264      	movs	r2, #100	; 0x64
 8002b96:	675a      	str	r2, [r3, #116]	; 0x74
		ReflowParameters.SoakTempeture3 = 185;
 8002b98:	4b6d      	ldr	r3, [pc, #436]	; (8002d50 <main+0x1dc>)
 8002b9a:	22b9      	movs	r2, #185	; 0xb9
 8002b9c:	671a      	str	r2, [r3, #112]	; 0x70
		ReflowParameters.secondHeatUpRate3 = 1;
 8002b9e:	4b6c      	ldr	r3, [pc, #432]	; (8002d50 <main+0x1dc>)
 8002ba0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ba4:	679a      	str	r2, [r3, #120]	; 0x78
		ReflowParameters.ReflowTime3 = 90;
 8002ba6:	4b6a      	ldr	r3, [pc, #424]	; (8002d50 <main+0x1dc>)
 8002ba8:	225a      	movs	r2, #90	; 0x5a
 8002baa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		ReflowParameters.ReflowTempeture3 = 245;
 8002bae:	4b68      	ldr	r3, [pc, #416]	; (8002d50 <main+0x1dc>)
 8002bb0:	22f5      	movs	r2, #245	; 0xf5
 8002bb2:	67da      	str	r2, [r3, #124]	; 0x7c
		// Lead 183C https://www.chipquik.com/datasheets/TS391AX50.pdf
		ReflowParameters.firstHeatUpRate2 = 0.75;
 8002bb4:	4b66      	ldr	r3, [pc, #408]	; (8002d50 <main+0x1dc>)
 8002bb6:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8002bba:	655a      	str	r2, [r3, #84]	; 0x54
		ReflowParameters.SoakTime2 = 100;
 8002bbc:	4b64      	ldr	r3, [pc, #400]	; (8002d50 <main+0x1dc>)
 8002bbe:	2264      	movs	r2, #100	; 0x64
 8002bc0:	65da      	str	r2, [r3, #92]	; 0x5c
		ReflowParameters.SoakTempeture2 = 150;
 8002bc2:	4b63      	ldr	r3, [pc, #396]	; (8002d50 <main+0x1dc>)
 8002bc4:	2296      	movs	r2, #150	; 0x96
 8002bc6:	659a      	str	r2, [r3, #88]	; 0x58
		ReflowParameters.secondHeatUpRate2 = 1;
 8002bc8:	4b61      	ldr	r3, [pc, #388]	; (8002d50 <main+0x1dc>)
 8002bca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002bce:	661a      	str	r2, [r3, #96]	; 0x60
		ReflowParameters.ReflowTime2 = 100;
 8002bd0:	4b5f      	ldr	r3, [pc, #380]	; (8002d50 <main+0x1dc>)
 8002bd2:	2264      	movs	r2, #100	; 0x64
 8002bd4:	669a      	str	r2, [r3, #104]	; 0x68
		ReflowParameters.ReflowTempeture2 = 230;
 8002bd6:	4b5e      	ldr	r3, [pc, #376]	; (8002d50 <main+0x1dc>)
 8002bd8:	22e6      	movs	r2, #230	; 0xe6
 8002bda:	665a      	str	r2, [r3, #100]	; 0x64
		// Lead 148C
		ReflowParameters.firstHeatUpRate1 = 0.75;
 8002bdc:	4b5c      	ldr	r3, [pc, #368]	; (8002d50 <main+0x1dc>)
 8002bde:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8002be2:	63da      	str	r2, [r3, #60]	; 0x3c
		ReflowParameters.SoakTime1 = 100;
 8002be4:	4b5a      	ldr	r3, [pc, #360]	; (8002d50 <main+0x1dc>)
 8002be6:	2264      	movs	r2, #100	; 0x64
 8002be8:	645a      	str	r2, [r3, #68]	; 0x44
		ReflowParameters.SoakTempeture1 = 140;
 8002bea:	4b59      	ldr	r3, [pc, #356]	; (8002d50 <main+0x1dc>)
 8002bec:	228c      	movs	r2, #140	; 0x8c
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40
		ReflowParameters.secondHeatUpRate1 = 1;
 8002bf0:	4b57      	ldr	r3, [pc, #348]	; (8002d50 <main+0x1dc>)
 8002bf2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002bf6:	649a      	str	r2, [r3, #72]	; 0x48
		ReflowParameters.ReflowTime1 = 100;
 8002bf8:	4b55      	ldr	r3, [pc, #340]	; (8002d50 <main+0x1dc>)
 8002bfa:	2264      	movs	r2, #100	; 0x64
 8002bfc:	651a      	str	r2, [r3, #80]	; 0x50
		ReflowParameters.ReflowTempeture1 = 175;
 8002bfe:	4b54      	ldr	r3, [pc, #336]	; (8002d50 <main+0x1dc>)
 8002c00:	22af      	movs	r2, #175	; 0xaf
 8002c02:	64da      	str	r2, [r3, #76]	; 0x4c
		// Lead 138C http://www.chipquik.com/datasheets/TS391LT50.pdf
		ReflowParameters.firstHeatUpRate0 = 0.75;
 8002c04:	4b52      	ldr	r3, [pc, #328]	; (8002d50 <main+0x1dc>)
 8002c06:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24
		ReflowParameters.SoakTime0 = 100;
 8002c0c:	4b50      	ldr	r3, [pc, #320]	; (8002d50 <main+0x1dc>)
 8002c0e:	2264      	movs	r2, #100	; 0x64
 8002c10:	62da      	str	r2, [r3, #44]	; 0x2c
		ReflowParameters.SoakTempeture0 = 130;
 8002c12:	4b4f      	ldr	r3, [pc, #316]	; (8002d50 <main+0x1dc>)
 8002c14:	2282      	movs	r2, #130	; 0x82
 8002c16:	629a      	str	r2, [r3, #40]	; 0x28
		ReflowParameters.secondHeatUpRate0 = 1;
 8002c18:	4b4d      	ldr	r3, [pc, #308]	; (8002d50 <main+0x1dc>)
 8002c1a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
		ReflowParameters.ReflowTime0 = 100;
 8002c20:	4b4b      	ldr	r3, [pc, #300]	; (8002d50 <main+0x1dc>)
 8002c22:	2264      	movs	r2, #100	; 0x64
 8002c24:	639a      	str	r2, [r3, #56]	; 0x38
		ReflowParameters.ReflowTempeture0 = 165;
 8002c26:	4b4a      	ldr	r3, [pc, #296]	; (8002d50 <main+0x1dc>)
 8002c28:	22a5      	movs	r2, #165	; 0xa5
 8002c2a:	635a      	str	r2, [r3, #52]	; 0x34
		// Lead default (138C)
		ReflowParameters.firstHeatUpRate = 0.75;
 8002c2c:	4b48      	ldr	r3, [pc, #288]	; (8002d50 <main+0x1dc>)
 8002c2e:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8002c32:	60da      	str	r2, [r3, #12]
		ReflowParameters.SoakTime = 100;
 8002c34:	4b46      	ldr	r3, [pc, #280]	; (8002d50 <main+0x1dc>)
 8002c36:	2264      	movs	r2, #100	; 0x64
 8002c38:	615a      	str	r2, [r3, #20]
		ReflowParameters.SoakTempeture = 130;
 8002c3a:	4b45      	ldr	r3, [pc, #276]	; (8002d50 <main+0x1dc>)
 8002c3c:	2282      	movs	r2, #130	; 0x82
 8002c3e:	611a      	str	r2, [r3, #16]
		ReflowParameters.secondHeatUpRate = 1;
 8002c40:	4b43      	ldr	r3, [pc, #268]	; (8002d50 <main+0x1dc>)
 8002c42:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c46:	619a      	str	r2, [r3, #24]
		ReflowParameters.ReflowTime = 100;
 8002c48:	4b41      	ldr	r3, [pc, #260]	; (8002d50 <main+0x1dc>)
 8002c4a:	2264      	movs	r2, #100	; 0x64
 8002c4c:	621a      	str	r2, [r3, #32]
		ReflowParameters.ReflowTempeture = 165;
 8002c4e:	4b40      	ldr	r3, [pc, #256]	; (8002d50 <main+0x1dc>)
 8002c50:	22a5      	movs	r2, #165	; 0xa5
 8002c52:	61da      	str	r2, [r3, #28]

		ReflowParameters.KP = 85;
 8002c54:	4b3e      	ldr	r3, [pc, #248]	; (8002d50 <main+0x1dc>)
 8002c56:	4a40      	ldr	r2, [pc, #256]	; (8002d58 <main+0x1e4>)
 8002c58:	601a      	str	r2, [r3, #0]
		ReflowParameters.Ki = 0.05;
 8002c5a:	4b3d      	ldr	r3, [pc, #244]	; (8002d50 <main+0x1dc>)
 8002c5c:	4a3f      	ldr	r2, [pc, #252]	; (8002d5c <main+0x1e8>)
 8002c5e:	605a      	str	r2, [r3, #4]
		ReflowParameters.KD = 130;
 8002c60:	4b3b      	ldr	r3, [pc, #236]	; (8002d50 <main+0x1dc>)
 8002c62:	4a3f      	ldr	r2, [pc, #252]	; (8002d60 <main+0x1ec>)
 8002c64:	609a      	str	r2, [r3, #8]

		ReflowParameters.version = config_version;
 8002c66:	4b3a      	ldr	r3, [pc, #232]	; (8002d50 <main+0x1dc>)
 8002c68:	2282      	movs	r2, #130	; 0x82
 8002c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		SaveReflowParameters();
 8002c6e:	f7fe fb8d 	bl	800138c <SaveReflowParameters>
	}

	calculateReflowCurve();
 8002c72:	f7ff fd89 	bl	8002788 <calculateReflowCurve>

	PID.Kp = ReflowParameters.KP;
 8002c76:	4b36      	ldr	r3, [pc, #216]	; (8002d50 <main+0x1dc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a3a      	ldr	r2, [pc, #232]	; (8002d64 <main+0x1f0>)
 8002c7c:	6193      	str	r3, [r2, #24]
	PID.Ki = ReflowParameters.Ki;
 8002c7e:	4b34      	ldr	r3, [pc, #208]	; (8002d50 <main+0x1dc>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4a38      	ldr	r2, [pc, #224]	; (8002d64 <main+0x1f0>)
 8002c84:	61d3      	str	r3, [r2, #28]
	PID.Kd = ReflowParameters.KD;
 8002c86:	4b32      	ldr	r3, [pc, #200]	; (8002d50 <main+0x1dc>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	4a36      	ldr	r2, [pc, #216]	; (8002d64 <main+0x1f0>)
 8002c8c:	6213      	str	r3, [r2, #32]

	arm_pid_init_f32(&PID, 1);
 8002c8e:	2101      	movs	r1, #1
 8002c90:	4834      	ldr	r0, [pc, #208]	; (8002d64 <main+0x1f0>)
 8002c92:	f003 ffd3 	bl	8006c3c <arm_pid_init_f32>
	beep=0;
 8002c96:	4b34      	ldr	r3, [pc, #208]	; (8002d68 <main+0x1f4>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c9c:	f000 fcbc 	bl	8003618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ca0:	f000 f87c 	bl	8002d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ca4:	f000 f9f4 	bl	8003090 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002ca8:	f000 f8be 	bl	8002e28 <MX_SPI1_Init>
  MX_TIM4_Init();
 8002cac:	f000 f978 	bl	8002fa0 <MX_TIM4_Init>
  MX_TIM1_Init();
 8002cb0:	f000 f8f2 	bl	8002e98 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002cb4:	f000 f9c2 	bl	800303c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  TimerBUZZER = HAL_GetTick();
 8002cb8:	f000 fd06 	bl	80036c8 <HAL_GetTick>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4a2b      	ldr	r2, [pc, #172]	; (8002d6c <main+0x1f8>)
 8002cc0:	6013      	str	r3, [r2, #0]
  TimerGui = HAL_GetTick();
 8002cc2:	f000 fd01 	bl	80036c8 <HAL_GetTick>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	4a29      	ldr	r2, [pc, #164]	; (8002d70 <main+0x1fc>)
 8002cca:	6013      	str	r3, [r2, #0]

  HAL_TIM_Base_Start_IT(&htim4);
 8002ccc:	4829      	ldr	r0, [pc, #164]	; (8002d74 <main+0x200>)
 8002cce:	f002 fb27 	bl	8005320 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4828      	ldr	r0, [pc, #160]	; (8002d78 <main+0x204>)
 8002cd6:	f002 fbc5 	bl	8005464 <HAL_TIM_PWM_Start>

  htim1.Instance->CCR1 = 10;
 8002cda:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <main+0x204>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	220a      	movs	r2, #10
 8002ce0:	635a      	str	r2, [r3, #52]	; 0x34

  //startReflow();
  HAL_Delay(2000);
 8002ce2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ce6:	f000 fcf9 	bl	80036dc <HAL_Delay>
  HAL_UART_Receive_IT(&huart1, UART_Recieved_Data, 5);
 8002cea:	2205      	movs	r2, #5
 8002cec:	4923      	ldr	r1, [pc, #140]	; (8002d7c <main+0x208>)
 8002cee:	4824      	ldr	r0, [pc, #144]	; (8002d80 <main+0x20c>)
 8002cf0:	f003 fb4c 	bl	800638c <HAL_UART_Receive_IT>
  sprintf(ConsoleMSG,"IDLE");
 8002cf4:	4923      	ldr	r1, [pc, #140]	; (8002d84 <main+0x210>)
 8002cf6:	4824      	ldr	r0, [pc, #144]	; (8002d88 <main+0x214>)
 8002cf8:	f004 fc5e 	bl	80075b8 <siprintf>
  Update_Page_0();
 8002cfc:	f7fe fd3c 	bl	8001778 <Update_Page_0>
  Draw_Reflow_Curve();
 8002d00:	f7ff fe94 	bl	8002a2c <Draw_Reflow_Curve>
  HAL_UART_Receive_IT(&huart1, UART_Recieved_Data, 5);
 8002d04:	2205      	movs	r2, #5
 8002d06:	491d      	ldr	r1, [pc, #116]	; (8002d7c <main+0x208>)
 8002d08:	481d      	ldr	r0, [pc, #116]	; (8002d80 <main+0x20c>)
 8002d0a:	f003 fb3f 	bl	800638c <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (HAL_GetTick() - TimerGui > 505)	{
 8002d0e:	f000 fcdb 	bl	80036c8 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <main+0x1fc>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8002d1e:	d306      	bcc.n	8002d2e <main+0x1ba>
		  TimerGui = HAL_GetTick();
 8002d20:	f000 fcd2 	bl	80036c8 <HAL_GetTick>
 8002d24:	4603      	mov	r3, r0
 8002d26:	4a12      	ldr	r2, [pc, #72]	; (8002d70 <main+0x1fc>)
 8002d28:	6013      	str	r3, [r2, #0]
		  HandleGui();
 8002d2a:	f7fe fe29 	bl	8001980 <HandleGui>
	  	}
		if ((ReflowEnable == 1) && (ReflowIndex == PhaseIndex[4])) {
 8002d2e:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <main+0x218>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d108      	bne.n	8002d48 <main+0x1d4>
 8002d36:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <main+0x21c>)
 8002d38:	891a      	ldrh	r2, [r3, #8]
 8002d3a:	4b16      	ldr	r3, [pc, #88]	; (8002d94 <main+0x220>)
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d102      	bne.n	8002d48 <main+0x1d4>
			BuzzerEnable = 1;
 8002d42:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <main+0x224>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	701a      	strb	r2, [r3, #0]
		}

	  beepBeep();
 8002d48:	f7ff fefa 	bl	8002b40 <beepBeep>
	  if (HAL_GetTick() - TimerGui > 505)	{
 8002d4c:	e7df      	b.n	8002d0e <main+0x19a>
 8002d4e:	bf00      	nop
 8002d50:	20001328 	.word	0x20001328
 8002d54:	0801fc00 	.word	0x0801fc00
 8002d58:	42aa0000 	.word	0x42aa0000
 8002d5c:	3d4ccccd 	.word	0x3d4ccccd
 8002d60:	43020000 	.word	0x43020000
 8002d64:	20001304 	.word	0x20001304
 8002d68:	20000350 	.word	0x20000350
 8002d6c:	20000348 	.word	0x20000348
 8002d70:	2000034c 	.word	0x2000034c
 8002d74:	200002bc 	.word	0x200002bc
 8002d78:	20000274 	.word	0x20000274
 8002d7c:	20000004 	.word	0x20000004
 8002d80:	20000304 	.word	0x20000304
 8002d84:	0800b24c 	.word	0x0800b24c
 8002d88:	200013d8 	.word	0x200013d8
 8002d8c:	200013b0 	.word	0x200013b0
 8002d90:	200013cc 	.word	0x200013cc
 8002d94:	200013b2 	.word	0x200013b2
 8002d98:	200013b1 	.word	0x200013b1

08002d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b090      	sub	sp, #64	; 0x40
 8002da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002da2:	f107 0318 	add.w	r3, r7, #24
 8002da6:	2228      	movs	r2, #40	; 0x28
 8002da8:	2100      	movs	r1, #0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f003 ff9c 	bl	8006ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002db0:	1d3b      	adds	r3, r7, #4
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	605a      	str	r2, [r3, #4]
 8002db8:	609a      	str	r2, [r3, #8]
 8002dba:	60da      	str	r2, [r3, #12]
 8002dbc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8002dda:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8002dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002de0:	f107 0318 	add.w	r3, r7, #24
 8002de4:	4618      	mov	r0, r3
 8002de6:	f001 fa01 	bl	80041ec <HAL_RCC_OscConfig>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002df0:	f000 f99c 	bl	800312c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002df4:	230f      	movs	r3, #15
 8002df6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e0a:	1d3b      	adds	r3, r7, #4
 8002e0c:	2102      	movs	r1, #2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f001 fc6e 	bl	80046f0 <HAL_RCC_ClockConfig>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002e1a:	f000 f987 	bl	800312c <Error_Handler>
  }
}
 8002e1e:	bf00      	nop
 8002e20:	3740      	adds	r7, #64	; 0x40
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002e2c:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e2e:	4a19      	ldr	r2, [pc, #100]	; (8002e94 <MX_SPI1_Init+0x6c>)
 8002e30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e32:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002e3a:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e40:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002e42:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e4a:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002e50:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e56:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002e5e:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e60:	2238      	movs	r2, #56	; 0x38
 8002e62:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e64:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e6a:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e70:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e78:	220a      	movs	r2, #10
 8002e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e7c:	4804      	ldr	r0, [pc, #16]	; (8002e90 <MX_SPI1_Init+0x68>)
 8002e7e:	f001 fdcf 	bl	8004a20 <HAL_SPI_Init>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8002e88:	f000 f950 	bl	800312c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e8c:	bf00      	nop
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	2000021c 	.word	0x2000021c
 8002e94:	40013000 	.word	0x40013000

08002e98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b092      	sub	sp, #72	; 0x48
 8002e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	60da      	str	r2, [r3, #12]
 8002eb6:	611a      	str	r2, [r3, #16]
 8002eb8:	615a      	str	r2, [r3, #20]
 8002eba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ebc:	1d3b      	adds	r3, r7, #4
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f003 ff10 	bl	8006ce8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ec8:	4b33      	ldr	r3, [pc, #204]	; (8002f98 <MX_TIM1_Init+0x100>)
 8002eca:	4a34      	ldr	r2, [pc, #208]	; (8002f9c <MX_TIM1_Init+0x104>)
 8002ecc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000;
 8002ece:	4b32      	ldr	r3, [pc, #200]	; (8002f98 <MX_TIM1_Init+0x100>)
 8002ed0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002ed4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed6:	4b30      	ldr	r3, [pc, #192]	; (8002f98 <MX_TIM1_Init+0x100>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002edc:	4b2e      	ldr	r3, [pc, #184]	; (8002f98 <MX_TIM1_Init+0x100>)
 8002ede:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ee2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee4:	4b2c      	ldr	r3, [pc, #176]	; (8002f98 <MX_TIM1_Init+0x100>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002eea:	4b2b      	ldr	r3, [pc, #172]	; (8002f98 <MX_TIM1_Init+0x100>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ef0:	4b29      	ldr	r3, [pc, #164]	; (8002f98 <MX_TIM1_Init+0x100>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ef6:	4828      	ldr	r0, [pc, #160]	; (8002f98 <MX_TIM1_Init+0x100>)
 8002ef8:	f002 fa64 	bl	80053c4 <HAL_TIM_PWM_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002f02:	f000 f913 	bl	800312c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f06:	2300      	movs	r3, #0
 8002f08:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f12:	4619      	mov	r1, r3
 8002f14:	4820      	ldr	r0, [pc, #128]	; (8002f98 <MX_TIM1_Init+0x100>)
 8002f16:	f003 f899 	bl	800604c <HAL_TIMEx_MasterConfigSynchronization>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8002f20:	f000 f904 	bl	800312c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002f24:	2370      	movs	r3, #112	; 0x70
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f30:	2300      	movs	r3, #0
 8002f32:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f34:	2300      	movs	r3, #0
 8002f36:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f44:	2200      	movs	r2, #0
 8002f46:	4619      	mov	r1, r3
 8002f48:	4813      	ldr	r0, [pc, #76]	; (8002f98 <MX_TIM1_Init+0x100>)
 8002f4a:	f002 fc35 	bl	80057b8 <HAL_TIM_PWM_ConfigChannel>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8002f54:	f000 f8ea 	bl	800312c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f70:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f76:	1d3b      	adds	r3, r7, #4
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4807      	ldr	r0, [pc, #28]	; (8002f98 <MX_TIM1_Init+0x100>)
 8002f7c:	f003 f8c4 	bl	8006108 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8002f86:	f000 f8d1 	bl	800312c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002f8a:	4803      	ldr	r0, [pc, #12]	; (8002f98 <MX_TIM1_Init+0x100>)
 8002f8c:	f000 f994 	bl	80032b8 <HAL_TIM_MspPostInit>

}
 8002f90:	bf00      	nop
 8002f92:	3748      	adds	r7, #72	; 0x48
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20000274 	.word	0x20000274
 8002f9c:	40012c00 	.word	0x40012c00

08002fa0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fa6:	f107 0308 	add.w	r3, r7, #8
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	605a      	str	r2, [r3, #4]
 8002fb0:	609a      	str	r2, [r3, #8]
 8002fb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fb4:	463b      	mov	r3, r7
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002fbc:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <MX_TIM4_Init+0x94>)
 8002fbe:	4a1e      	ldr	r2, [pc, #120]	; (8003038 <MX_TIM4_Init+0x98>)
 8002fc0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64000;
 8002fc2:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <MX_TIM4_Init+0x94>)
 8002fc4:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8002fc8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fca:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <MX_TIM4_Init+0x94>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 8002fd0:	4b18      	ldr	r3, [pc, #96]	; (8003034 <MX_TIM4_Init+0x94>)
 8002fd2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002fd6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fd8:	4b16      	ldr	r3, [pc, #88]	; (8003034 <MX_TIM4_Init+0x94>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fde:	4b15      	ldr	r3, [pc, #84]	; (8003034 <MX_TIM4_Init+0x94>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002fe4:	4813      	ldr	r0, [pc, #76]	; (8003034 <MX_TIM4_Init+0x94>)
 8002fe6:	f002 f94b 	bl	8005280 <HAL_TIM_Base_Init>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002ff0:	f000 f89c 	bl	800312c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ff8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ffa:	f107 0308 	add.w	r3, r7, #8
 8002ffe:	4619      	mov	r1, r3
 8003000:	480c      	ldr	r0, [pc, #48]	; (8003034 <MX_TIM4_Init+0x94>)
 8003002:	f002 fc97 	bl	8005934 <HAL_TIM_ConfigClockSource>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800300c:	f000 f88e 	bl	800312c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003010:	2300      	movs	r3, #0
 8003012:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003014:	2300      	movs	r3, #0
 8003016:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003018:	463b      	mov	r3, r7
 800301a:	4619      	mov	r1, r3
 800301c:	4805      	ldr	r0, [pc, #20]	; (8003034 <MX_TIM4_Init+0x94>)
 800301e:	f003 f815 	bl	800604c <HAL_TIMEx_MasterConfigSynchronization>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003028:	f000 f880 	bl	800312c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800302c:	bf00      	nop
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	200002bc 	.word	0x200002bc
 8003038:	40000800 	.word	0x40000800

0800303c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003040:	4b11      	ldr	r3, [pc, #68]	; (8003088 <MX_USART1_UART_Init+0x4c>)
 8003042:	4a12      	ldr	r2, [pc, #72]	; (800308c <MX_USART1_UART_Init+0x50>)
 8003044:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8003046:	4b10      	ldr	r3, [pc, #64]	; (8003088 <MX_USART1_UART_Init+0x4c>)
 8003048:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800304c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800304e:	4b0e      	ldr	r3, [pc, #56]	; (8003088 <MX_USART1_UART_Init+0x4c>)
 8003050:	2200      	movs	r2, #0
 8003052:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003054:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <MX_USART1_UART_Init+0x4c>)
 8003056:	2200      	movs	r2, #0
 8003058:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800305a:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <MX_USART1_UART_Init+0x4c>)
 800305c:	2200      	movs	r2, #0
 800305e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003060:	4b09      	ldr	r3, [pc, #36]	; (8003088 <MX_USART1_UART_Init+0x4c>)
 8003062:	220c      	movs	r2, #12
 8003064:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003066:	4b08      	ldr	r3, [pc, #32]	; (8003088 <MX_USART1_UART_Init+0x4c>)
 8003068:	2200      	movs	r2, #0
 800306a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <MX_USART1_UART_Init+0x4c>)
 800306e:	2200      	movs	r2, #0
 8003070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003072:	4805      	ldr	r0, [pc, #20]	; (8003088 <MX_USART1_UART_Init+0x4c>)
 8003074:	f003 f8ab 	bl	80061ce <HAL_UART_Init>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800307e:	f000 f855 	bl	800312c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20000304 	.word	0x20000304
 800308c:	40013800 	.word	0x40013800

08003090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003096:	f107 0308 	add.w	r3, r7, #8
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	605a      	str	r2, [r3, #4]
 80030a0:	609a      	str	r2, [r3, #8]
 80030a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030a4:	4b1f      	ldr	r3, [pc, #124]	; (8003124 <MX_GPIO_Init+0x94>)
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	4a1e      	ldr	r2, [pc, #120]	; (8003124 <MX_GPIO_Init+0x94>)
 80030aa:	f043 0320 	orr.w	r3, r3, #32
 80030ae:	6193      	str	r3, [r2, #24]
 80030b0:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <MX_GPIO_Init+0x94>)
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	607b      	str	r3, [r7, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030bc:	4b19      	ldr	r3, [pc, #100]	; (8003124 <MX_GPIO_Init+0x94>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	4a18      	ldr	r2, [pc, #96]	; (8003124 <MX_GPIO_Init+0x94>)
 80030c2:	f043 0304 	orr.w	r3, r3, #4
 80030c6:	6193      	str	r3, [r2, #24]
 80030c8:	4b16      	ldr	r3, [pc, #88]	; (8003124 <MX_GPIO_Init+0x94>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	603b      	str	r3, [r7, #0]
 80030d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 80030d4:	2200      	movs	r2, #0
 80030d6:	f248 0110 	movw	r1, #32784	; 0x8010
 80030da:	4813      	ldr	r0, [pc, #76]	; (8003128 <MX_GPIO_Init+0x98>)
 80030dc:	f001 f86e 	bl	80041bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80030e0:	2310      	movs	r3, #16
 80030e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e4:	2301      	movs	r3, #1
 80030e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ec:	2302      	movs	r3, #2
 80030ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80030f0:	f107 0308 	add.w	r3, r7, #8
 80030f4:	4619      	mov	r1, r3
 80030f6:	480c      	ldr	r0, [pc, #48]	; (8003128 <MX_GPIO_Init+0x98>)
 80030f8:	f000 fedc 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80030fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003100:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003102:	2301      	movs	r3, #1
 8003104:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003106:	2302      	movs	r3, #2
 8003108:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310a:	2302      	movs	r3, #2
 800310c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800310e:	f107 0308 	add.w	r3, r7, #8
 8003112:	4619      	mov	r1, r3
 8003114:	4804      	ldr	r0, [pc, #16]	; (8003128 <MX_GPIO_Init+0x98>)
 8003116:	f000 fecd 	bl	8003eb4 <HAL_GPIO_Init>

}
 800311a:	bf00      	nop
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40021000 	.word	0x40021000
 8003128:	40010800 	.word	0x40010800

0800312c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003130:	b672      	cpsid	i
}
 8003132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003134:	e7fe      	b.n	8003134 <Error_Handler+0x8>
	...

08003138 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800313e:	4b15      	ldr	r3, [pc, #84]	; (8003194 <HAL_MspInit+0x5c>)
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	4a14      	ldr	r2, [pc, #80]	; (8003194 <HAL_MspInit+0x5c>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	6193      	str	r3, [r2, #24]
 800314a:	4b12      	ldr	r3, [pc, #72]	; (8003194 <HAL_MspInit+0x5c>)
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	60bb      	str	r3, [r7, #8]
 8003154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003156:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <HAL_MspInit+0x5c>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	4a0e      	ldr	r2, [pc, #56]	; (8003194 <HAL_MspInit+0x5c>)
 800315c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003160:	61d3      	str	r3, [r2, #28]
 8003162:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <HAL_MspInit+0x5c>)
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316a:	607b      	str	r3, [r7, #4]
 800316c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800316e:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <HAL_MspInit+0x60>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	4a04      	ldr	r2, [pc, #16]	; (8003198 <HAL_MspInit+0x60>)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800318a:	bf00      	nop
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr
 8003194:	40021000 	.word	0x40021000
 8003198:	40010000 	.word	0x40010000

0800319c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a4:	f107 0310 	add.w	r3, r7, #16
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a1b      	ldr	r2, [pc, #108]	; (8003224 <HAL_SPI_MspInit+0x88>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d12f      	bne.n	800321c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031bc:	4b1a      	ldr	r3, [pc, #104]	; (8003228 <HAL_SPI_MspInit+0x8c>)
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	4a19      	ldr	r2, [pc, #100]	; (8003228 <HAL_SPI_MspInit+0x8c>)
 80031c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031c6:	6193      	str	r3, [r2, #24]
 80031c8:	4b17      	ldr	r3, [pc, #92]	; (8003228 <HAL_SPI_MspInit+0x8c>)
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d4:	4b14      	ldr	r3, [pc, #80]	; (8003228 <HAL_SPI_MspInit+0x8c>)
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	4a13      	ldr	r2, [pc, #76]	; (8003228 <HAL_SPI_MspInit+0x8c>)
 80031da:	f043 0304 	orr.w	r3, r3, #4
 80031de:	6193      	str	r3, [r2, #24]
 80031e0:	4b11      	ldr	r3, [pc, #68]	; (8003228 <HAL_SPI_MspInit+0x8c>)
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80031ec:	2320      	movs	r3, #32
 80031ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f0:	2302      	movs	r3, #2
 80031f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031f4:	2303      	movs	r3, #3
 80031f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f8:	f107 0310 	add.w	r3, r7, #16
 80031fc:	4619      	mov	r1, r3
 80031fe:	480b      	ldr	r0, [pc, #44]	; (800322c <HAL_SPI_MspInit+0x90>)
 8003200:	f000 fe58 	bl	8003eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003204:	2340      	movs	r3, #64	; 0x40
 8003206:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320c:	2300      	movs	r3, #0
 800320e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003210:	f107 0310 	add.w	r3, r7, #16
 8003214:	4619      	mov	r1, r3
 8003216:	4805      	ldr	r0, [pc, #20]	; (800322c <HAL_SPI_MspInit+0x90>)
 8003218:	f000 fe4c 	bl	8003eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800321c:	bf00      	nop
 800321e:	3720      	adds	r7, #32
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40013000 	.word	0x40013000
 8003228:	40021000 	.word	0x40021000
 800322c:	40010800 	.word	0x40010800

08003230 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a09      	ldr	r2, [pc, #36]	; (8003264 <HAL_TIM_PWM_MspInit+0x34>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d10b      	bne.n	800325a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003242:	4b09      	ldr	r3, [pc, #36]	; (8003268 <HAL_TIM_PWM_MspInit+0x38>)
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	4a08      	ldr	r2, [pc, #32]	; (8003268 <HAL_TIM_PWM_MspInit+0x38>)
 8003248:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800324c:	6193      	str	r3, [r2, #24]
 800324e:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_TIM_PWM_MspInit+0x38>)
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800325a:	bf00      	nop
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr
 8003264:	40012c00 	.word	0x40012c00
 8003268:	40021000 	.word	0x40021000

0800326c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a0d      	ldr	r2, [pc, #52]	; (80032b0 <HAL_TIM_Base_MspInit+0x44>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d113      	bne.n	80032a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800327e:	4b0d      	ldr	r3, [pc, #52]	; (80032b4 <HAL_TIM_Base_MspInit+0x48>)
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	4a0c      	ldr	r2, [pc, #48]	; (80032b4 <HAL_TIM_Base_MspInit+0x48>)
 8003284:	f043 0304 	orr.w	r3, r3, #4
 8003288:	61d3      	str	r3, [r2, #28]
 800328a:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <HAL_TIM_Base_MspInit+0x48>)
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8003296:	2200      	movs	r2, #0
 8003298:	2101      	movs	r1, #1
 800329a:	201e      	movs	r0, #30
 800329c:	f000 fb19 	bl	80038d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80032a0:	201e      	movs	r0, #30
 80032a2:	f000 fb32 	bl	800390a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80032a6:	bf00      	nop
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40000800 	.word	0x40000800
 80032b4:	40021000 	.word	0x40021000

080032b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c0:	f107 0310 	add.w	r3, r7, #16
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a10      	ldr	r2, [pc, #64]	; (8003314 <HAL_TIM_MspPostInit+0x5c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d118      	bne.n	800330a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d8:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <HAL_TIM_MspPostInit+0x60>)
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	4a0e      	ldr	r2, [pc, #56]	; (8003318 <HAL_TIM_MspPostInit+0x60>)
 80032de:	f043 0304 	orr.w	r3, r3, #4
 80032e2:	6193      	str	r3, [r2, #24]
 80032e4:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <HAL_TIM_MspPostInit+0x60>)
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80032f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f6:	2302      	movs	r3, #2
 80032f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fa:	2302      	movs	r3, #2
 80032fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fe:	f107 0310 	add.w	r3, r7, #16
 8003302:	4619      	mov	r1, r3
 8003304:	4805      	ldr	r0, [pc, #20]	; (800331c <HAL_TIM_MspPostInit+0x64>)
 8003306:	f000 fdd5 	bl	8003eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800330a:	bf00      	nop
 800330c:	3720      	adds	r7, #32
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40012c00 	.word	0x40012c00
 8003318:	40021000 	.word	0x40021000
 800331c:	40010800 	.word	0x40010800

08003320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003328:	f107 0310 	add.w	r3, r7, #16
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a20      	ldr	r2, [pc, #128]	; (80033bc <HAL_UART_MspInit+0x9c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d139      	bne.n	80033b4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003340:	4b1f      	ldr	r3, [pc, #124]	; (80033c0 <HAL_UART_MspInit+0xa0>)
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	4a1e      	ldr	r2, [pc, #120]	; (80033c0 <HAL_UART_MspInit+0xa0>)
 8003346:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800334a:	6193      	str	r3, [r2, #24]
 800334c:	4b1c      	ldr	r3, [pc, #112]	; (80033c0 <HAL_UART_MspInit+0xa0>)
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003358:	4b19      	ldr	r3, [pc, #100]	; (80033c0 <HAL_UART_MspInit+0xa0>)
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	4a18      	ldr	r2, [pc, #96]	; (80033c0 <HAL_UART_MspInit+0xa0>)
 800335e:	f043 0304 	orr.w	r3, r3, #4
 8003362:	6193      	str	r3, [r2, #24]
 8003364:	4b16      	ldr	r3, [pc, #88]	; (80033c0 <HAL_UART_MspInit+0xa0>)
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003370:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003374:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003376:	2302      	movs	r3, #2
 8003378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800337a:	2303      	movs	r3, #3
 800337c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337e:	f107 0310 	add.w	r3, r7, #16
 8003382:	4619      	mov	r1, r3
 8003384:	480f      	ldr	r0, [pc, #60]	; (80033c4 <HAL_UART_MspInit+0xa4>)
 8003386:	f000 fd95 	bl	8003eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800338a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800338e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003394:	2300      	movs	r3, #0
 8003396:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003398:	f107 0310 	add.w	r3, r7, #16
 800339c:	4619      	mov	r1, r3
 800339e:	4809      	ldr	r0, [pc, #36]	; (80033c4 <HAL_UART_MspInit+0xa4>)
 80033a0:	f000 fd88 	bl	8003eb4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80033a4:	2200      	movs	r2, #0
 80033a6:	2100      	movs	r1, #0
 80033a8:	2025      	movs	r0, #37	; 0x25
 80033aa:	f000 fa92 	bl	80038d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033ae:	2025      	movs	r0, #37	; 0x25
 80033b0:	f000 faab 	bl	800390a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80033b4:	bf00      	nop
 80033b6:	3720      	adds	r7, #32
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40013800 	.word	0x40013800
 80033c0:	40021000 	.word	0x40021000
 80033c4:	40010800 	.word	0x40010800

080033c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033cc:	e7fe      	b.n	80033cc <NMI_Handler+0x4>

080033ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033ce:	b480      	push	{r7}
 80033d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033d2:	e7fe      	b.n	80033d2 <HardFault_Handler+0x4>

080033d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033d8:	e7fe      	b.n	80033d8 <MemManage_Handler+0x4>

080033da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033da:	b480      	push	{r7}
 80033dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033de:	e7fe      	b.n	80033de <BusFault_Handler+0x4>

080033e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033e4:	e7fe      	b.n	80033e4 <UsageFault_Handler+0x4>

080033e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033e6:	b480      	push	{r7}
 80033e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033ea:	bf00      	nop
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr

080033f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033f2:	b480      	push	{r7}
 80033f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033f6:	bf00      	nop
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr

080033fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033fe:	b480      	push	{r7}
 8003400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr

0800340a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800340e:	f000 f949 	bl	80036a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800341c:	4802      	ldr	r0, [pc, #8]	; (8003428 <TIM4_IRQHandler+0x10>)
 800341e:	f002 f8c3 	bl	80055a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	200002bc 	.word	0x200002bc

0800342c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003430:	4802      	ldr	r0, [pc, #8]	; (800343c <USART1_IRQHandler+0x10>)
 8003432:	f002 ffdb 	bl	80063ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000304 	.word	0x20000304

08003440 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
	return 1;
 8003444:	2301      	movs	r3, #1
}
 8003446:	4618      	mov	r0, r3
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr

0800344e <_kill>:

int _kill(int pid, int sig)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003458:	f003 fc1c 	bl	8006c94 <__errno>
 800345c:	4603      	mov	r3, r0
 800345e:	2216      	movs	r2, #22
 8003460:	601a      	str	r2, [r3, #0]
	return -1;
 8003462:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003466:	4618      	mov	r0, r3
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <_exit>:

void _exit (int status)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003476:	f04f 31ff 	mov.w	r1, #4294967295
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff ffe7 	bl	800344e <_kill>
	while (1) {}		/* Make sure we hang here */
 8003480:	e7fe      	b.n	8003480 <_exit+0x12>

08003482 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b086      	sub	sp, #24
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	e00a      	b.n	80034aa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003494:	f3af 8000 	nop.w
 8003498:	4601      	mov	r1, r0
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	60ba      	str	r2, [r7, #8]
 80034a0:	b2ca      	uxtb	r2, r1
 80034a2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	3301      	adds	r3, #1
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	dbf0      	blt.n	8003494 <_read+0x12>
	}

return len;
 80034b2:	687b      	ldr	r3, [r7, #4]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	e009      	b.n	80034e2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	60ba      	str	r2, [r7, #8]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	3301      	adds	r3, #1
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	dbf1      	blt.n	80034ce <_write+0x12>
	}
	return len;
 80034ea:	687b      	ldr	r3, [r7, #4]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <_close>:

int _close(int file)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
	return -1;
 80034fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr

0800350a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800351a:	605a      	str	r2, [r3, #4]
	return 0;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <_isatty>:

int _isatty(int file)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
	return 1;
 8003530:	2301      	movs	r3, #1
}
 8003532:	4618      	mov	r0, r3
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr

0800353c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
	return 0;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr

08003554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800355c:	4a14      	ldr	r2, [pc, #80]	; (80035b0 <_sbrk+0x5c>)
 800355e:	4b15      	ldr	r3, [pc, #84]	; (80035b4 <_sbrk+0x60>)
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003568:	4b13      	ldr	r3, [pc, #76]	; (80035b8 <_sbrk+0x64>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d102      	bne.n	8003576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003570:	4b11      	ldr	r3, [pc, #68]	; (80035b8 <_sbrk+0x64>)
 8003572:	4a12      	ldr	r2, [pc, #72]	; (80035bc <_sbrk+0x68>)
 8003574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003576:	4b10      	ldr	r3, [pc, #64]	; (80035b8 <_sbrk+0x64>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4413      	add	r3, r2
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	429a      	cmp	r2, r3
 8003582:	d207      	bcs.n	8003594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003584:	f003 fb86 	bl	8006c94 <__errno>
 8003588:	4603      	mov	r3, r0
 800358a:	220c      	movs	r2, #12
 800358c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800358e:	f04f 33ff 	mov.w	r3, #4294967295
 8003592:	e009      	b.n	80035a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003594:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <_sbrk+0x64>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800359a:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <_sbrk+0x64>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4413      	add	r3, r2
 80035a2:	4a05      	ldr	r2, [pc, #20]	; (80035b8 <_sbrk+0x64>)
 80035a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035a6:	68fb      	ldr	r3, [r7, #12]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	20005000 	.word	0x20005000
 80035b4:	00000400 	.word	0x00000400
 80035b8:	200013f8 	.word	0x200013f8
 80035bc:	20001430 	.word	0x20001430

080035c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035c4:	bf00      	nop
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr

080035cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80035cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80035ce:	e003      	b.n	80035d8 <LoopCopyDataInit>

080035d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80035d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80035d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80035d6:	3104      	adds	r1, #4

080035d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80035d8:	480a      	ldr	r0, [pc, #40]	; (8003604 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80035da:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80035dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80035de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80035e0:	d3f6      	bcc.n	80035d0 <CopyDataInit>
  ldr r2, =_sbss
 80035e2:	4a0a      	ldr	r2, [pc, #40]	; (800360c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80035e4:	e002      	b.n	80035ec <LoopFillZerobss>

080035e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80035e6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80035e8:	f842 3b04 	str.w	r3, [r2], #4

080035ec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80035ec:	4b08      	ldr	r3, [pc, #32]	; (8003610 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80035ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80035f0:	d3f9      	bcc.n	80035e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80035f2:	f7ff ffe5 	bl	80035c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035f6:	f003 fb53 	bl	8006ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035fa:	f7ff fabb 	bl	8002b74 <main>
  bx lr
 80035fe:	4770      	bx	lr
  ldr r3, =_sidata
 8003600:	0800b724 	.word	0x0800b724
  ldr r0, =_sdata
 8003604:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003608:	200001ec 	.word	0x200001ec
  ldr r2, =_sbss
 800360c:	200001f0 	.word	0x200001f0
  ldr r3, = _ebss
 8003610:	20001430 	.word	0x20001430

08003614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003614:	e7fe      	b.n	8003614 <ADC1_2_IRQHandler>
	...

08003618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800361c:	4b08      	ldr	r3, [pc, #32]	; (8003640 <HAL_Init+0x28>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a07      	ldr	r2, [pc, #28]	; (8003640 <HAL_Init+0x28>)
 8003622:	f043 0310 	orr.w	r3, r3, #16
 8003626:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003628:	2003      	movs	r0, #3
 800362a:	f000 f947 	bl	80038bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800362e:	2000      	movs	r0, #0
 8003630:	f000 f808 	bl	8003644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003634:	f7ff fd80 	bl	8003138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40022000 	.word	0x40022000

08003644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800364c:	4b12      	ldr	r3, [pc, #72]	; (8003698 <HAL_InitTick+0x54>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	4b12      	ldr	r3, [pc, #72]	; (800369c <HAL_InitTick+0x58>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	4619      	mov	r1, r3
 8003656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800365a:	fbb3 f3f1 	udiv	r3, r3, r1
 800365e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003662:	4618      	mov	r0, r3
 8003664:	f000 f95f 	bl	8003926 <HAL_SYSTICK_Config>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e00e      	b.n	8003690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b0f      	cmp	r3, #15
 8003676:	d80a      	bhi.n	800368e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003678:	2200      	movs	r2, #0
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	f04f 30ff 	mov.w	r0, #4294967295
 8003680:	f000 f927 	bl	80038d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003684:	4a06      	ldr	r2, [pc, #24]	; (80036a0 <HAL_InitTick+0x5c>)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	e000      	b.n	8003690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
}
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	2000000c 	.word	0x2000000c
 800369c:	20000014 	.word	0x20000014
 80036a0:	20000010 	.word	0x20000010

080036a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036a8:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <HAL_IncTick+0x1c>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_IncTick+0x20>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4413      	add	r3, r2
 80036b4:	4a03      	ldr	r2, [pc, #12]	; (80036c4 <HAL_IncTick+0x20>)
 80036b6:	6013      	str	r3, [r2, #0]
}
 80036b8:	bf00      	nop
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr
 80036c0:	20000014 	.word	0x20000014
 80036c4:	200013fc 	.word	0x200013fc

080036c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  return uwTick;
 80036cc:	4b02      	ldr	r3, [pc, #8]	; (80036d8 <HAL_GetTick+0x10>)
 80036ce:	681b      	ldr	r3, [r3, #0]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr
 80036d8:	200013fc 	.word	0x200013fc

080036dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036e4:	f7ff fff0 	bl	80036c8 <HAL_GetTick>
 80036e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f4:	d005      	beq.n	8003702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <HAL_Delay+0x44>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4413      	add	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003702:	bf00      	nop
 8003704:	f7ff ffe0 	bl	80036c8 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	429a      	cmp	r2, r3
 8003712:	d8f7      	bhi.n	8003704 <HAL_Delay+0x28>
  {
  }
}
 8003714:	bf00      	nop
 8003716:	bf00      	nop
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000014 	.word	0x20000014

08003724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003734:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <__NVIC_SetPriorityGrouping+0x44>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003740:	4013      	ands	r3, r2
 8003742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800374c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003756:	4a04      	ldr	r2, [pc, #16]	; (8003768 <__NVIC_SetPriorityGrouping+0x44>)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	60d3      	str	r3, [r2, #12]
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003770:	4b04      	ldr	r3, [pc, #16]	; (8003784 <__NVIC_GetPriorityGrouping+0x18>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	0a1b      	lsrs	r3, r3, #8
 8003776:	f003 0307 	and.w	r3, r3, #7
}
 800377a:	4618      	mov	r0, r3
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	e000ed00 	.word	0xe000ed00

08003788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003796:	2b00      	cmp	r3, #0
 8003798:	db0b      	blt.n	80037b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800379a:	79fb      	ldrb	r3, [r7, #7]
 800379c:	f003 021f 	and.w	r2, r3, #31
 80037a0:	4906      	ldr	r1, [pc, #24]	; (80037bc <__NVIC_EnableIRQ+0x34>)
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	2001      	movs	r0, #1
 80037aa:	fa00 f202 	lsl.w	r2, r0, r2
 80037ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr
 80037bc:	e000e100 	.word	0xe000e100

080037c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	6039      	str	r1, [r7, #0]
 80037ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	db0a      	blt.n	80037ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	490c      	ldr	r1, [pc, #48]	; (800380c <__NVIC_SetPriority+0x4c>)
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	0112      	lsls	r2, r2, #4
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	440b      	add	r3, r1
 80037e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037e8:	e00a      	b.n	8003800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	4908      	ldr	r1, [pc, #32]	; (8003810 <__NVIC_SetPriority+0x50>)
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	3b04      	subs	r3, #4
 80037f8:	0112      	lsls	r2, r2, #4
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	440b      	add	r3, r1
 80037fe:	761a      	strb	r2, [r3, #24]
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	e000e100 	.word	0xe000e100
 8003810:	e000ed00 	.word	0xe000ed00

08003814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003814:	b480      	push	{r7}
 8003816:	b089      	sub	sp, #36	; 0x24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f1c3 0307 	rsb	r3, r3, #7
 800382e:	2b04      	cmp	r3, #4
 8003830:	bf28      	it	cs
 8003832:	2304      	movcs	r3, #4
 8003834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3304      	adds	r3, #4
 800383a:	2b06      	cmp	r3, #6
 800383c:	d902      	bls.n	8003844 <NVIC_EncodePriority+0x30>
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	3b03      	subs	r3, #3
 8003842:	e000      	b.n	8003846 <NVIC_EncodePriority+0x32>
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003848:	f04f 32ff 	mov.w	r2, #4294967295
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43da      	mvns	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	401a      	ands	r2, r3
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800385c:	f04f 31ff 	mov.w	r1, #4294967295
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	fa01 f303 	lsl.w	r3, r1, r3
 8003866:	43d9      	mvns	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800386c:	4313      	orrs	r3, r2
         );
}
 800386e:	4618      	mov	r0, r3
 8003870:	3724      	adds	r7, #36	; 0x24
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr

08003878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3b01      	subs	r3, #1
 8003884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003888:	d301      	bcc.n	800388e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800388a:	2301      	movs	r3, #1
 800388c:	e00f      	b.n	80038ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800388e:	4a0a      	ldr	r2, [pc, #40]	; (80038b8 <SysTick_Config+0x40>)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3b01      	subs	r3, #1
 8003894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003896:	210f      	movs	r1, #15
 8003898:	f04f 30ff 	mov.w	r0, #4294967295
 800389c:	f7ff ff90 	bl	80037c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <SysTick_Config+0x40>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038a6:	4b04      	ldr	r3, [pc, #16]	; (80038b8 <SysTick_Config+0x40>)
 80038a8:	2207      	movs	r2, #7
 80038aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	e000e010 	.word	0xe000e010

080038bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff ff2d 	bl	8003724 <__NVIC_SetPriorityGrouping>
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b086      	sub	sp, #24
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	4603      	mov	r3, r0
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
 80038de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038e4:	f7ff ff42 	bl	800376c <__NVIC_GetPriorityGrouping>
 80038e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	6978      	ldr	r0, [r7, #20]
 80038f0:	f7ff ff90 	bl	8003814 <NVIC_EncodePriority>
 80038f4:	4602      	mov	r2, r0
 80038f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038fa:	4611      	mov	r1, r2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff ff5f 	bl	80037c0 <__NVIC_SetPriority>
}
 8003902:	bf00      	nop
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	4603      	mov	r3, r0
 8003912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff ff35 	bl	8003788 <__NVIC_EnableIRQ>
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b082      	sub	sp, #8
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff ffa2 	bl	8003878 <SysTick_Config>
 8003934:	4603      	mov	r3, r0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800393e:	b480      	push	{r7}
 8003940:	b085      	sub	sp, #20
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003950:	2b02      	cmp	r3, #2
 8003952:	d008      	beq.n	8003966 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2204      	movs	r2, #4
 8003958:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e020      	b.n	80039a8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 020e 	bic.w	r2, r2, #14
 8003974:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0201 	bic.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398e:	2101      	movs	r1, #1
 8003990:	fa01 f202 	lsl.w	r2, r1, r2
 8003994:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr
	...

080039b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d005      	beq.n	80039d6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2204      	movs	r2, #4
 80039ce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
 80039d4:	e051      	b.n	8003a7a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 020e 	bic.w	r2, r2, #14
 80039e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0201 	bic.w	r2, r2, #1
 80039f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a22      	ldr	r2, [pc, #136]	; (8003a84 <HAL_DMA_Abort_IT+0xd0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d029      	beq.n	8003a54 <HAL_DMA_Abort_IT+0xa0>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a20      	ldr	r2, [pc, #128]	; (8003a88 <HAL_DMA_Abort_IT+0xd4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d022      	beq.n	8003a50 <HAL_DMA_Abort_IT+0x9c>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a1f      	ldr	r2, [pc, #124]	; (8003a8c <HAL_DMA_Abort_IT+0xd8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d01a      	beq.n	8003a4a <HAL_DMA_Abort_IT+0x96>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a1d      	ldr	r2, [pc, #116]	; (8003a90 <HAL_DMA_Abort_IT+0xdc>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d012      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x90>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a1c      	ldr	r2, [pc, #112]	; (8003a94 <HAL_DMA_Abort_IT+0xe0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00a      	beq.n	8003a3e <HAL_DMA_Abort_IT+0x8a>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1a      	ldr	r2, [pc, #104]	; (8003a98 <HAL_DMA_Abort_IT+0xe4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d102      	bne.n	8003a38 <HAL_DMA_Abort_IT+0x84>
 8003a32:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a36:	e00e      	b.n	8003a56 <HAL_DMA_Abort_IT+0xa2>
 8003a38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a3c:	e00b      	b.n	8003a56 <HAL_DMA_Abort_IT+0xa2>
 8003a3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a42:	e008      	b.n	8003a56 <HAL_DMA_Abort_IT+0xa2>
 8003a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a48:	e005      	b.n	8003a56 <HAL_DMA_Abort_IT+0xa2>
 8003a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a4e:	e002      	b.n	8003a56 <HAL_DMA_Abort_IT+0xa2>
 8003a50:	2310      	movs	r3, #16
 8003a52:	e000      	b.n	8003a56 <HAL_DMA_Abort_IT+0xa2>
 8003a54:	2301      	movs	r3, #1
 8003a56:	4a11      	ldr	r2, [pc, #68]	; (8003a9c <HAL_DMA_Abort_IT+0xe8>)
 8003a58:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	4798      	blx	r3
    } 
  }
  return status;
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40020008 	.word	0x40020008
 8003a88:	4002001c 	.word	0x4002001c
 8003a8c:	40020030 	.word	0x40020030
 8003a90:	40020044 	.word	0x40020044
 8003a94:	40020058 	.word	0x40020058
 8003a98:	4002006c 	.word	0x4002006c
 8003a9c:	40020000 	.word	0x40020000

08003aa0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003aba:	4b2f      	ldr	r3, [pc, #188]	; (8003b78 <HAL_FLASH_Program+0xd8>)
 8003abc:	7e1b      	ldrb	r3, [r3, #24]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_FLASH_Program+0x26>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e054      	b.n	8003b70 <HAL_FLASH_Program+0xd0>
 8003ac6:	4b2c      	ldr	r3, [pc, #176]	; (8003b78 <HAL_FLASH_Program+0xd8>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003acc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ad0:	f000 f8b2 	bl	8003c38 <FLASH_WaitForLastOperation>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003ad8:	7dfb      	ldrb	r3, [r7, #23]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d144      	bne.n	8003b68 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d102      	bne.n	8003aea <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	757b      	strb	r3, [r7, #21]
 8003ae8:	e007      	b.n	8003afa <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d102      	bne.n	8003af6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003af0:	2302      	movs	r3, #2
 8003af2:	757b      	strb	r3, [r7, #21]
 8003af4:	e001      	b.n	8003afa <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003af6:	2304      	movs	r3, #4
 8003af8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003afa:	2300      	movs	r3, #0
 8003afc:	75bb      	strb	r3, [r7, #22]
 8003afe:	e02d      	b.n	8003b5c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003b00:	7dbb      	ldrb	r3, [r7, #22]
 8003b02:	005a      	lsls	r2, r3, #1
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	eb02 0c03 	add.w	ip, r2, r3
 8003b0a:	7dbb      	ldrb	r3, [r7, #22]
 8003b0c:	0119      	lsls	r1, r3, #4
 8003b0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b12:	f1c1 0620 	rsb	r6, r1, #32
 8003b16:	f1a1 0020 	sub.w	r0, r1, #32
 8003b1a:	fa22 f401 	lsr.w	r4, r2, r1
 8003b1e:	fa03 f606 	lsl.w	r6, r3, r6
 8003b22:	4334      	orrs	r4, r6
 8003b24:	fa23 f000 	lsr.w	r0, r3, r0
 8003b28:	4304      	orrs	r4, r0
 8003b2a:	fa23 f501 	lsr.w	r5, r3, r1
 8003b2e:	b2a3      	uxth	r3, r4
 8003b30:	4619      	mov	r1, r3
 8003b32:	4660      	mov	r0, ip
 8003b34:	f000 f864 	bl	8003c00 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b38:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b3c:	f000 f87c 	bl	8003c38 <FLASH_WaitForLastOperation>
 8003b40:	4603      	mov	r3, r0
 8003b42:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003b44:	4b0d      	ldr	r3, [pc, #52]	; (8003b7c <HAL_FLASH_Program+0xdc>)
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	4a0c      	ldr	r2, [pc, #48]	; (8003b7c <HAL_FLASH_Program+0xdc>)
 8003b4a:	f023 0301 	bic.w	r3, r3, #1
 8003b4e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003b50:	7dfb      	ldrb	r3, [r7, #23]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d107      	bne.n	8003b66 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003b56:	7dbb      	ldrb	r3, [r7, #22]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	75bb      	strb	r3, [r7, #22]
 8003b5c:	7dba      	ldrb	r2, [r7, #22]
 8003b5e:	7d7b      	ldrb	r3, [r7, #21]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d3cd      	bcc.n	8003b00 <HAL_FLASH_Program+0x60>
 8003b64:	e000      	b.n	8003b68 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003b66:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003b68:	4b03      	ldr	r3, [pc, #12]	; (8003b78 <HAL_FLASH_Program+0xd8>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	761a      	strb	r2, [r3, #24]

  return status;
 8003b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	371c      	adds	r7, #28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b78:	20001400 	.word	0x20001400
 8003b7c:	40022000 	.word	0x40022000

08003b80 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003b8a:	4b0d      	ldr	r3, [pc, #52]	; (8003bc0 <HAL_FLASH_Unlock+0x40>)
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00d      	beq.n	8003bb2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003b96:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <HAL_FLASH_Unlock+0x40>)
 8003b98:	4a0a      	ldr	r2, [pc, #40]	; (8003bc4 <HAL_FLASH_Unlock+0x44>)
 8003b9a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003b9c:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <HAL_FLASH_Unlock+0x40>)
 8003b9e:	4a0a      	ldr	r2, [pc, #40]	; (8003bc8 <HAL_FLASH_Unlock+0x48>)
 8003ba0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003ba2:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <HAL_FLASH_Unlock+0x40>)
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40022000 	.word	0x40022000
 8003bc4:	45670123 	.word	0x45670123
 8003bc8:	cdef89ab 	.word	0xcdef89ab

08003bcc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003bd0:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <HAL_FLASH_Lock+0x1c>)
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	4a04      	ldr	r2, [pc, #16]	; (8003be8 <HAL_FLASH_Lock+0x1c>)
 8003bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bda:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40022000 	.word	0x40022000

08003bec <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003bf0:	4b02      	ldr	r3, [pc, #8]	; (8003bfc <HAL_FLASH_GetError+0x10>)
 8003bf2:	69db      	ldr	r3, [r3, #28]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr
 8003bfc:	20001400 	.word	0x20001400

08003c00 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c0c:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <FLASH_Program_HalfWord+0x30>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003c12:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <FLASH_Program_HalfWord+0x34>)
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	4a07      	ldr	r2, [pc, #28]	; (8003c34 <FLASH_Program_HalfWord+0x34>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	887a      	ldrh	r2, [r7, #2]
 8003c22:	801a      	strh	r2, [r3, #0]
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20001400 	.word	0x20001400
 8003c34:	40022000 	.word	0x40022000

08003c38 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003c40:	f7ff fd42 	bl	80036c8 <HAL_GetTick>
 8003c44:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003c46:	e010      	b.n	8003c6a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4e:	d00c      	beq.n	8003c6a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d007      	beq.n	8003c66 <FLASH_WaitForLastOperation+0x2e>
 8003c56:	f7ff fd37 	bl	80036c8 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d201      	bcs.n	8003c6a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e025      	b.n	8003cb6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003c6a:	4b15      	ldr	r3, [pc, #84]	; (8003cc0 <FLASH_WaitForLastOperation+0x88>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e8      	bne.n	8003c48 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003c76:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <FLASH_WaitForLastOperation+0x88>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003c82:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <FLASH_WaitForLastOperation+0x88>)
 8003c84:	2220      	movs	r2, #32
 8003c86:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003c88:	4b0d      	ldr	r3, [pc, #52]	; (8003cc0 <FLASH_WaitForLastOperation+0x88>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10b      	bne.n	8003cac <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003c94:	4b0a      	ldr	r3, [pc, #40]	; (8003cc0 <FLASH_WaitForLastOperation+0x88>)
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d105      	bne.n	8003cac <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003ca0:	4b07      	ldr	r3, [pc, #28]	; (8003cc0 <FLASH_WaitForLastOperation+0x88>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003cac:	f000 f80a 	bl	8003cc4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40022000 	.word	0x40022000

08003cc4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003cce:	4b23      	ldr	r3, [pc, #140]	; (8003d5c <FLASH_SetErrorCode+0x98>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f003 0310 	and.w	r3, r3, #16
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d009      	beq.n	8003cee <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003cda:	4b21      	ldr	r3, [pc, #132]	; (8003d60 <FLASH_SetErrorCode+0x9c>)
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f043 0302 	orr.w	r3, r3, #2
 8003ce2:	4a1f      	ldr	r2, [pc, #124]	; (8003d60 <FLASH_SetErrorCode+0x9c>)
 8003ce4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f043 0310 	orr.w	r3, r3, #16
 8003cec:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003cee:	4b1b      	ldr	r3, [pc, #108]	; (8003d5c <FLASH_SetErrorCode+0x98>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d009      	beq.n	8003d0e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003cfa:	4b19      	ldr	r3, [pc, #100]	; (8003d60 <FLASH_SetErrorCode+0x9c>)
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	4a17      	ldr	r2, [pc, #92]	; (8003d60 <FLASH_SetErrorCode+0x9c>)
 8003d04:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f043 0304 	orr.w	r3, r3, #4
 8003d0c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003d0e:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <FLASH_SetErrorCode+0x98>)
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00b      	beq.n	8003d32 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003d1a:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <FLASH_SetErrorCode+0x9c>)
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f043 0304 	orr.w	r3, r3, #4
 8003d22:	4a0f      	ldr	r2, [pc, #60]	; (8003d60 <FLASH_SetErrorCode+0x9c>)
 8003d24:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003d26:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <FLASH_SetErrorCode+0x98>)
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	4a0c      	ldr	r2, [pc, #48]	; (8003d5c <FLASH_SetErrorCode+0x98>)
 8003d2c:	f023 0301 	bic.w	r3, r3, #1
 8003d30:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f240 1201 	movw	r2, #257	; 0x101
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d106      	bne.n	8003d4a <FLASH_SetErrorCode+0x86>
 8003d3c:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <FLASH_SetErrorCode+0x98>)
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	4a06      	ldr	r2, [pc, #24]	; (8003d5c <FLASH_SetErrorCode+0x98>)
 8003d42:	f023 0301 	bic.w	r3, r3, #1
 8003d46:	61d3      	str	r3, [r2, #28]
}  
 8003d48:	e002      	b.n	8003d50 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003d4a:	4a04      	ldr	r2, [pc, #16]	; (8003d5c <FLASH_SetErrorCode+0x98>)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	60d3      	str	r3, [r2, #12]
}  
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40022000 	.word	0x40022000
 8003d60:	20001400 	.word	0x20001400

08003d64 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003d76:	4b2f      	ldr	r3, [pc, #188]	; (8003e34 <HAL_FLASHEx_Erase+0xd0>)
 8003d78:	7e1b      	ldrb	r3, [r3, #24]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d101      	bne.n	8003d82 <HAL_FLASHEx_Erase+0x1e>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e053      	b.n	8003e2a <HAL_FLASHEx_Erase+0xc6>
 8003d82:	4b2c      	ldr	r3, [pc, #176]	; (8003e34 <HAL_FLASHEx_Erase+0xd0>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d116      	bne.n	8003dbe <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003d90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d94:	f7ff ff50 	bl	8003c38 <FLASH_WaitForLastOperation>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d141      	bne.n	8003e22 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003d9e:	2001      	movs	r0, #1
 8003da0:	f000 f84c 	bl	8003e3c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003da4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003da8:	f7ff ff46 	bl	8003c38 <FLASH_WaitForLastOperation>
 8003dac:	4603      	mov	r3, r0
 8003dae:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003db0:	4b21      	ldr	r3, [pc, #132]	; (8003e38 <HAL_FLASHEx_Erase+0xd4>)
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	4a20      	ldr	r2, [pc, #128]	; (8003e38 <HAL_FLASHEx_Erase+0xd4>)
 8003db6:	f023 0304 	bic.w	r3, r3, #4
 8003dba:	6113      	str	r3, [r2, #16]
 8003dbc:	e031      	b.n	8003e22 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003dbe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003dc2:	f7ff ff39 	bl	8003c38 <FLASH_WaitForLastOperation>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d12a      	bne.n	8003e22 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	60bb      	str	r3, [r7, #8]
 8003dda:	e019      	b.n	8003e10 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003ddc:	68b8      	ldr	r0, [r7, #8]
 8003dde:	f000 f849 	bl	8003e74 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003de2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003de6:	f7ff ff27 	bl	8003c38 <FLASH_WaitForLastOperation>
 8003dea:	4603      	mov	r3, r0
 8003dec:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003dee:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <HAL_FLASHEx_Erase+0xd4>)
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	4a11      	ldr	r2, [pc, #68]	; (8003e38 <HAL_FLASHEx_Erase+0xd4>)
 8003df4:	f023 0302 	bic.w	r3, r3, #2
 8003df8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	601a      	str	r2, [r3, #0]
            break;
 8003e06:	e00c      	b.n	8003e22 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e0e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	029a      	lsls	r2, r3, #10
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d3dc      	bcc.n	8003ddc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e22:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <HAL_FLASHEx_Erase+0xd0>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	761a      	strb	r2, [r3, #24]

  return status;
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20001400 	.word	0x20001400
 8003e38:	40022000 	.word	0x40022000

08003e3c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003e44:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <FLASH_MassErase+0x30>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003e4a:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <FLASH_MassErase+0x34>)
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	4a08      	ldr	r2, [pc, #32]	; (8003e70 <FLASH_MassErase+0x34>)
 8003e50:	f043 0304 	orr.w	r3, r3, #4
 8003e54:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003e56:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <FLASH_MassErase+0x34>)
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	4a05      	ldr	r2, [pc, #20]	; (8003e70 <FLASH_MassErase+0x34>)
 8003e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e60:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr
 8003e6c:	20001400 	.word	0x20001400
 8003e70:	40022000 	.word	0x40022000

08003e74 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <FLASH_PageErase+0x38>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003e82:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <FLASH_PageErase+0x3c>)
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	4a0a      	ldr	r2, [pc, #40]	; (8003eb0 <FLASH_PageErase+0x3c>)
 8003e88:	f043 0302 	orr.w	r3, r3, #2
 8003e8c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003e8e:	4a08      	ldr	r2, [pc, #32]	; (8003eb0 <FLASH_PageErase+0x3c>)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003e94:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <FLASH_PageErase+0x3c>)
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	4a05      	ldr	r2, [pc, #20]	; (8003eb0 <FLASH_PageErase+0x3c>)
 8003e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e9e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	20001400 	.word	0x20001400
 8003eb0:	40022000 	.word	0x40022000

08003eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b08b      	sub	sp, #44	; 0x2c
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ec6:	e169      	b.n	800419c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ec8:	2201      	movs	r2, #1
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	f040 8158 	bne.w	8004196 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	4a9a      	ldr	r2, [pc, #616]	; (8004154 <HAL_GPIO_Init+0x2a0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d05e      	beq.n	8003fae <HAL_GPIO_Init+0xfa>
 8003ef0:	4a98      	ldr	r2, [pc, #608]	; (8004154 <HAL_GPIO_Init+0x2a0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d875      	bhi.n	8003fe2 <HAL_GPIO_Init+0x12e>
 8003ef6:	4a98      	ldr	r2, [pc, #608]	; (8004158 <HAL_GPIO_Init+0x2a4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d058      	beq.n	8003fae <HAL_GPIO_Init+0xfa>
 8003efc:	4a96      	ldr	r2, [pc, #600]	; (8004158 <HAL_GPIO_Init+0x2a4>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d86f      	bhi.n	8003fe2 <HAL_GPIO_Init+0x12e>
 8003f02:	4a96      	ldr	r2, [pc, #600]	; (800415c <HAL_GPIO_Init+0x2a8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d052      	beq.n	8003fae <HAL_GPIO_Init+0xfa>
 8003f08:	4a94      	ldr	r2, [pc, #592]	; (800415c <HAL_GPIO_Init+0x2a8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d869      	bhi.n	8003fe2 <HAL_GPIO_Init+0x12e>
 8003f0e:	4a94      	ldr	r2, [pc, #592]	; (8004160 <HAL_GPIO_Init+0x2ac>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d04c      	beq.n	8003fae <HAL_GPIO_Init+0xfa>
 8003f14:	4a92      	ldr	r2, [pc, #584]	; (8004160 <HAL_GPIO_Init+0x2ac>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d863      	bhi.n	8003fe2 <HAL_GPIO_Init+0x12e>
 8003f1a:	4a92      	ldr	r2, [pc, #584]	; (8004164 <HAL_GPIO_Init+0x2b0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d046      	beq.n	8003fae <HAL_GPIO_Init+0xfa>
 8003f20:	4a90      	ldr	r2, [pc, #576]	; (8004164 <HAL_GPIO_Init+0x2b0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d85d      	bhi.n	8003fe2 <HAL_GPIO_Init+0x12e>
 8003f26:	2b12      	cmp	r3, #18
 8003f28:	d82a      	bhi.n	8003f80 <HAL_GPIO_Init+0xcc>
 8003f2a:	2b12      	cmp	r3, #18
 8003f2c:	d859      	bhi.n	8003fe2 <HAL_GPIO_Init+0x12e>
 8003f2e:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <HAL_GPIO_Init+0x80>)
 8003f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f34:	08003faf 	.word	0x08003faf
 8003f38:	08003f89 	.word	0x08003f89
 8003f3c:	08003f9b 	.word	0x08003f9b
 8003f40:	08003fdd 	.word	0x08003fdd
 8003f44:	08003fe3 	.word	0x08003fe3
 8003f48:	08003fe3 	.word	0x08003fe3
 8003f4c:	08003fe3 	.word	0x08003fe3
 8003f50:	08003fe3 	.word	0x08003fe3
 8003f54:	08003fe3 	.word	0x08003fe3
 8003f58:	08003fe3 	.word	0x08003fe3
 8003f5c:	08003fe3 	.word	0x08003fe3
 8003f60:	08003fe3 	.word	0x08003fe3
 8003f64:	08003fe3 	.word	0x08003fe3
 8003f68:	08003fe3 	.word	0x08003fe3
 8003f6c:	08003fe3 	.word	0x08003fe3
 8003f70:	08003fe3 	.word	0x08003fe3
 8003f74:	08003fe3 	.word	0x08003fe3
 8003f78:	08003f91 	.word	0x08003f91
 8003f7c:	08003fa5 	.word	0x08003fa5
 8003f80:	4a79      	ldr	r2, [pc, #484]	; (8004168 <HAL_GPIO_Init+0x2b4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d013      	beq.n	8003fae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f86:	e02c      	b.n	8003fe2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	623b      	str	r3, [r7, #32]
          break;
 8003f8e:	e029      	b.n	8003fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	3304      	adds	r3, #4
 8003f96:	623b      	str	r3, [r7, #32]
          break;
 8003f98:	e024      	b.n	8003fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	3308      	adds	r3, #8
 8003fa0:	623b      	str	r3, [r7, #32]
          break;
 8003fa2:	e01f      	b.n	8003fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	330c      	adds	r3, #12
 8003faa:	623b      	str	r3, [r7, #32]
          break;
 8003fac:	e01a      	b.n	8003fe4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d102      	bne.n	8003fbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003fb6:	2304      	movs	r3, #4
 8003fb8:	623b      	str	r3, [r7, #32]
          break;
 8003fba:	e013      	b.n	8003fe4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d105      	bne.n	8003fd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fc4:	2308      	movs	r3, #8
 8003fc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	611a      	str	r2, [r3, #16]
          break;
 8003fce:	e009      	b.n	8003fe4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fd0:	2308      	movs	r3, #8
 8003fd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	615a      	str	r2, [r3, #20]
          break;
 8003fda:	e003      	b.n	8003fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	623b      	str	r3, [r7, #32]
          break;
 8003fe0:	e000      	b.n	8003fe4 <HAL_GPIO_Init+0x130>
          break;
 8003fe2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	2bff      	cmp	r3, #255	; 0xff
 8003fe8:	d801      	bhi.n	8003fee <HAL_GPIO_Init+0x13a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	e001      	b.n	8003ff2 <HAL_GPIO_Init+0x13e>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	2bff      	cmp	r3, #255	; 0xff
 8003ff8:	d802      	bhi.n	8004000 <HAL_GPIO_Init+0x14c>
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	e002      	b.n	8004006 <HAL_GPIO_Init+0x152>
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	3b08      	subs	r3, #8
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	210f      	movs	r1, #15
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	fa01 f303 	lsl.w	r3, r1, r3
 8004014:	43db      	mvns	r3, r3
 8004016:	401a      	ands	r2, r3
 8004018:	6a39      	ldr	r1, [r7, #32]
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	fa01 f303 	lsl.w	r3, r1, r3
 8004020:	431a      	orrs	r2, r3
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 80b1 	beq.w	8004196 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004034:	4b4d      	ldr	r3, [pc, #308]	; (800416c <HAL_GPIO_Init+0x2b8>)
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	4a4c      	ldr	r2, [pc, #304]	; (800416c <HAL_GPIO_Init+0x2b8>)
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	6193      	str	r3, [r2, #24]
 8004040:	4b4a      	ldr	r3, [pc, #296]	; (800416c <HAL_GPIO_Init+0x2b8>)
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800404c:	4a48      	ldr	r2, [pc, #288]	; (8004170 <HAL_GPIO_Init+0x2bc>)
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	089b      	lsrs	r3, r3, #2
 8004052:	3302      	adds	r3, #2
 8004054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004058:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	220f      	movs	r2, #15
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	43db      	mvns	r3, r3
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4013      	ands	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a40      	ldr	r2, [pc, #256]	; (8004174 <HAL_GPIO_Init+0x2c0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d013      	beq.n	80040a0 <HAL_GPIO_Init+0x1ec>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a3f      	ldr	r2, [pc, #252]	; (8004178 <HAL_GPIO_Init+0x2c4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00d      	beq.n	800409c <HAL_GPIO_Init+0x1e8>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a3e      	ldr	r2, [pc, #248]	; (800417c <HAL_GPIO_Init+0x2c8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d007      	beq.n	8004098 <HAL_GPIO_Init+0x1e4>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a3d      	ldr	r2, [pc, #244]	; (8004180 <HAL_GPIO_Init+0x2cc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d101      	bne.n	8004094 <HAL_GPIO_Init+0x1e0>
 8004090:	2303      	movs	r3, #3
 8004092:	e006      	b.n	80040a2 <HAL_GPIO_Init+0x1ee>
 8004094:	2304      	movs	r3, #4
 8004096:	e004      	b.n	80040a2 <HAL_GPIO_Init+0x1ee>
 8004098:	2302      	movs	r3, #2
 800409a:	e002      	b.n	80040a2 <HAL_GPIO_Init+0x1ee>
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <HAL_GPIO_Init+0x1ee>
 80040a0:	2300      	movs	r3, #0
 80040a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a4:	f002 0203 	and.w	r2, r2, #3
 80040a8:	0092      	lsls	r2, r2, #2
 80040aa:	4093      	lsls	r3, r2
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80040b2:	492f      	ldr	r1, [pc, #188]	; (8004170 <HAL_GPIO_Init+0x2bc>)
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	089b      	lsrs	r3, r3, #2
 80040b8:	3302      	adds	r3, #2
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d006      	beq.n	80040da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80040cc:	4b2d      	ldr	r3, [pc, #180]	; (8004184 <HAL_GPIO_Init+0x2d0>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	492c      	ldr	r1, [pc, #176]	; (8004184 <HAL_GPIO_Init+0x2d0>)
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	600b      	str	r3, [r1, #0]
 80040d8:	e006      	b.n	80040e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80040da:	4b2a      	ldr	r3, [pc, #168]	; (8004184 <HAL_GPIO_Init+0x2d0>)
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	43db      	mvns	r3, r3
 80040e2:	4928      	ldr	r1, [pc, #160]	; (8004184 <HAL_GPIO_Init+0x2d0>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d006      	beq.n	8004102 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80040f4:	4b23      	ldr	r3, [pc, #140]	; (8004184 <HAL_GPIO_Init+0x2d0>)
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	4922      	ldr	r1, [pc, #136]	; (8004184 <HAL_GPIO_Init+0x2d0>)
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	604b      	str	r3, [r1, #4]
 8004100:	e006      	b.n	8004110 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004102:	4b20      	ldr	r3, [pc, #128]	; (8004184 <HAL_GPIO_Init+0x2d0>)
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	43db      	mvns	r3, r3
 800410a:	491e      	ldr	r1, [pc, #120]	; (8004184 <HAL_GPIO_Init+0x2d0>)
 800410c:	4013      	ands	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d006      	beq.n	800412a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800411c:	4b19      	ldr	r3, [pc, #100]	; (8004184 <HAL_GPIO_Init+0x2d0>)
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	4918      	ldr	r1, [pc, #96]	; (8004184 <HAL_GPIO_Init+0x2d0>)
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	4313      	orrs	r3, r2
 8004126:	608b      	str	r3, [r1, #8]
 8004128:	e006      	b.n	8004138 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800412a:	4b16      	ldr	r3, [pc, #88]	; (8004184 <HAL_GPIO_Init+0x2d0>)
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	43db      	mvns	r3, r3
 8004132:	4914      	ldr	r1, [pc, #80]	; (8004184 <HAL_GPIO_Init+0x2d0>)
 8004134:	4013      	ands	r3, r2
 8004136:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d021      	beq.n	8004188 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004144:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <HAL_GPIO_Init+0x2d0>)
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	490e      	ldr	r1, [pc, #56]	; (8004184 <HAL_GPIO_Init+0x2d0>)
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	4313      	orrs	r3, r2
 800414e:	60cb      	str	r3, [r1, #12]
 8004150:	e021      	b.n	8004196 <HAL_GPIO_Init+0x2e2>
 8004152:	bf00      	nop
 8004154:	10320000 	.word	0x10320000
 8004158:	10310000 	.word	0x10310000
 800415c:	10220000 	.word	0x10220000
 8004160:	10210000 	.word	0x10210000
 8004164:	10120000 	.word	0x10120000
 8004168:	10110000 	.word	0x10110000
 800416c:	40021000 	.word	0x40021000
 8004170:	40010000 	.word	0x40010000
 8004174:	40010800 	.word	0x40010800
 8004178:	40010c00 	.word	0x40010c00
 800417c:	40011000 	.word	0x40011000
 8004180:	40011400 	.word	0x40011400
 8004184:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004188:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <HAL_GPIO_Init+0x304>)
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	43db      	mvns	r3, r3
 8004190:	4909      	ldr	r1, [pc, #36]	; (80041b8 <HAL_GPIO_Init+0x304>)
 8004192:	4013      	ands	r3, r2
 8004194:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	3301      	adds	r3, #1
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	fa22 f303 	lsr.w	r3, r2, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f47f ae8e 	bne.w	8003ec8 <HAL_GPIO_Init+0x14>
  }
}
 80041ac:	bf00      	nop
 80041ae:	bf00      	nop
 80041b0:	372c      	adds	r7, #44	; 0x2c
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr
 80041b8:	40010400 	.word	0x40010400

080041bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	807b      	strh	r3, [r7, #2]
 80041c8:	4613      	mov	r3, r2
 80041ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041cc:	787b      	ldrb	r3, [r7, #1]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041d2:	887a      	ldrh	r2, [r7, #2]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80041d8:	e003      	b.n	80041e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041da:	887b      	ldrh	r3, [r7, #2]
 80041dc:	041a      	lsls	r2, r3, #16
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	611a      	str	r2, [r3, #16]
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr

080041ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e272      	b.n	80046e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 8087 	beq.w	800431a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800420c:	4b92      	ldr	r3, [pc, #584]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 030c 	and.w	r3, r3, #12
 8004214:	2b04      	cmp	r3, #4
 8004216:	d00c      	beq.n	8004232 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004218:	4b8f      	ldr	r3, [pc, #572]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f003 030c 	and.w	r3, r3, #12
 8004220:	2b08      	cmp	r3, #8
 8004222:	d112      	bne.n	800424a <HAL_RCC_OscConfig+0x5e>
 8004224:	4b8c      	ldr	r3, [pc, #560]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800422c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004230:	d10b      	bne.n	800424a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004232:	4b89      	ldr	r3, [pc, #548]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d06c      	beq.n	8004318 <HAL_RCC_OscConfig+0x12c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d168      	bne.n	8004318 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e24c      	b.n	80046e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004252:	d106      	bne.n	8004262 <HAL_RCC_OscConfig+0x76>
 8004254:	4b80      	ldr	r3, [pc, #512]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a7f      	ldr	r2, [pc, #508]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 800425a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	e02e      	b.n	80042c0 <HAL_RCC_OscConfig+0xd4>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10c      	bne.n	8004284 <HAL_RCC_OscConfig+0x98>
 800426a:	4b7b      	ldr	r3, [pc, #492]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a7a      	ldr	r2, [pc, #488]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	4b78      	ldr	r3, [pc, #480]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a77      	ldr	r2, [pc, #476]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 800427c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	e01d      	b.n	80042c0 <HAL_RCC_OscConfig+0xd4>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800428c:	d10c      	bne.n	80042a8 <HAL_RCC_OscConfig+0xbc>
 800428e:	4b72      	ldr	r3, [pc, #456]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a71      	ldr	r2, [pc, #452]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	4b6f      	ldr	r3, [pc, #444]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a6e      	ldr	r2, [pc, #440]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 80042a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	e00b      	b.n	80042c0 <HAL_RCC_OscConfig+0xd4>
 80042a8:	4b6b      	ldr	r3, [pc, #428]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a6a      	ldr	r2, [pc, #424]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 80042ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042b2:	6013      	str	r3, [r2, #0]
 80042b4:	4b68      	ldr	r3, [pc, #416]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a67      	ldr	r2, [pc, #412]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 80042ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d013      	beq.n	80042f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c8:	f7ff f9fe 	bl	80036c8 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d0:	f7ff f9fa 	bl	80036c8 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b64      	cmp	r3, #100	; 0x64
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e200      	b.n	80046e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e2:	4b5d      	ldr	r3, [pc, #372]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0xe4>
 80042ee:	e014      	b.n	800431a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f0:	f7ff f9ea 	bl	80036c8 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f8:	f7ff f9e6 	bl	80036c8 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b64      	cmp	r3, #100	; 0x64
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e1ec      	b.n	80046e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800430a:	4b53      	ldr	r3, [pc, #332]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCC_OscConfig+0x10c>
 8004316:	e000      	b.n	800431a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d063      	beq.n	80043ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004326:	4b4c      	ldr	r3, [pc, #304]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f003 030c 	and.w	r3, r3, #12
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00b      	beq.n	800434a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004332:	4b49      	ldr	r3, [pc, #292]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f003 030c 	and.w	r3, r3, #12
 800433a:	2b08      	cmp	r3, #8
 800433c:	d11c      	bne.n	8004378 <HAL_RCC_OscConfig+0x18c>
 800433e:	4b46      	ldr	r3, [pc, #280]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d116      	bne.n	8004378 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800434a:	4b43      	ldr	r3, [pc, #268]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d005      	beq.n	8004362 <HAL_RCC_OscConfig+0x176>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d001      	beq.n	8004362 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e1c0      	b.n	80046e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004362:	4b3d      	ldr	r3, [pc, #244]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	4939      	ldr	r1, [pc, #228]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004372:	4313      	orrs	r3, r2
 8004374:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004376:	e03a      	b.n	80043ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d020      	beq.n	80043c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004380:	4b36      	ldr	r3, [pc, #216]	; (800445c <HAL_RCC_OscConfig+0x270>)
 8004382:	2201      	movs	r2, #1
 8004384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004386:	f7ff f99f 	bl	80036c8 <HAL_GetTick>
 800438a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438c:	e008      	b.n	80043a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800438e:	f7ff f99b 	bl	80036c8 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e1a1      	b.n	80046e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a0:	4b2d      	ldr	r3, [pc, #180]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0f0      	beq.n	800438e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ac:	4b2a      	ldr	r3, [pc, #168]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	4927      	ldr	r1, [pc, #156]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	600b      	str	r3, [r1, #0]
 80043c0:	e015      	b.n	80043ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043c2:	4b26      	ldr	r3, [pc, #152]	; (800445c <HAL_RCC_OscConfig+0x270>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c8:	f7ff f97e 	bl	80036c8 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043d0:	f7ff f97a 	bl	80036c8 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e180      	b.n	80046e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043e2:	4b1d      	ldr	r3, [pc, #116]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f0      	bne.n	80043d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d03a      	beq.n	8004470 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d019      	beq.n	8004436 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004402:	4b17      	ldr	r3, [pc, #92]	; (8004460 <HAL_RCC_OscConfig+0x274>)
 8004404:	2201      	movs	r2, #1
 8004406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004408:	f7ff f95e 	bl	80036c8 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004410:	f7ff f95a 	bl	80036c8 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e160      	b.n	80046e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004422:	4b0d      	ldr	r3, [pc, #52]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f0      	beq.n	8004410 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800442e:	2001      	movs	r0, #1
 8004430:	f000 fad8 	bl	80049e4 <RCC_Delay>
 8004434:	e01c      	b.n	8004470 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004436:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <HAL_RCC_OscConfig+0x274>)
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800443c:	f7ff f944 	bl	80036c8 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004442:	e00f      	b.n	8004464 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004444:	f7ff f940 	bl	80036c8 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d908      	bls.n	8004464 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e146      	b.n	80046e4 <HAL_RCC_OscConfig+0x4f8>
 8004456:	bf00      	nop
 8004458:	40021000 	.word	0x40021000
 800445c:	42420000 	.word	0x42420000
 8004460:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004464:	4b92      	ldr	r3, [pc, #584]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e9      	bne.n	8004444 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 80a6 	beq.w	80045ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800447e:	2300      	movs	r3, #0
 8004480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004482:	4b8b      	ldr	r3, [pc, #556]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10d      	bne.n	80044aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800448e:	4b88      	ldr	r3, [pc, #544]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	4a87      	ldr	r2, [pc, #540]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 8004494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004498:	61d3      	str	r3, [r2, #28]
 800449a:	4b85      	ldr	r3, [pc, #532]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a2:	60bb      	str	r3, [r7, #8]
 80044a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044a6:	2301      	movs	r3, #1
 80044a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044aa:	4b82      	ldr	r3, [pc, #520]	; (80046b4 <HAL_RCC_OscConfig+0x4c8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d118      	bne.n	80044e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044b6:	4b7f      	ldr	r3, [pc, #508]	; (80046b4 <HAL_RCC_OscConfig+0x4c8>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a7e      	ldr	r2, [pc, #504]	; (80046b4 <HAL_RCC_OscConfig+0x4c8>)
 80044bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044c2:	f7ff f901 	bl	80036c8 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ca:	f7ff f8fd 	bl	80036c8 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b64      	cmp	r3, #100	; 0x64
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e103      	b.n	80046e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044dc:	4b75      	ldr	r3, [pc, #468]	; (80046b4 <HAL_RCC_OscConfig+0x4c8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0f0      	beq.n	80044ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d106      	bne.n	80044fe <HAL_RCC_OscConfig+0x312>
 80044f0:	4b6f      	ldr	r3, [pc, #444]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	4a6e      	ldr	r2, [pc, #440]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	6213      	str	r3, [r2, #32]
 80044fc:	e02d      	b.n	800455a <HAL_RCC_OscConfig+0x36e>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10c      	bne.n	8004520 <HAL_RCC_OscConfig+0x334>
 8004506:	4b6a      	ldr	r3, [pc, #424]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	4a69      	ldr	r2, [pc, #420]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	6213      	str	r3, [r2, #32]
 8004512:	4b67      	ldr	r3, [pc, #412]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	4a66      	ldr	r2, [pc, #408]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 8004518:	f023 0304 	bic.w	r3, r3, #4
 800451c:	6213      	str	r3, [r2, #32]
 800451e:	e01c      	b.n	800455a <HAL_RCC_OscConfig+0x36e>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	2b05      	cmp	r3, #5
 8004526:	d10c      	bne.n	8004542 <HAL_RCC_OscConfig+0x356>
 8004528:	4b61      	ldr	r3, [pc, #388]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	4a60      	ldr	r2, [pc, #384]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 800452e:	f043 0304 	orr.w	r3, r3, #4
 8004532:	6213      	str	r3, [r2, #32]
 8004534:	4b5e      	ldr	r3, [pc, #376]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	4a5d      	ldr	r2, [pc, #372]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 800453a:	f043 0301 	orr.w	r3, r3, #1
 800453e:	6213      	str	r3, [r2, #32]
 8004540:	e00b      	b.n	800455a <HAL_RCC_OscConfig+0x36e>
 8004542:	4b5b      	ldr	r3, [pc, #364]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	4a5a      	ldr	r2, [pc, #360]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 8004548:	f023 0301 	bic.w	r3, r3, #1
 800454c:	6213      	str	r3, [r2, #32]
 800454e:	4b58      	ldr	r3, [pc, #352]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	4a57      	ldr	r2, [pc, #348]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 8004554:	f023 0304 	bic.w	r3, r3, #4
 8004558:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d015      	beq.n	800458e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004562:	f7ff f8b1 	bl	80036c8 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004568:	e00a      	b.n	8004580 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456a:	f7ff f8ad 	bl	80036c8 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	; 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e0b1      	b.n	80046e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004580:	4b4b      	ldr	r3, [pc, #300]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0ee      	beq.n	800456a <HAL_RCC_OscConfig+0x37e>
 800458c:	e014      	b.n	80045b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458e:	f7ff f89b 	bl	80036c8 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004594:	e00a      	b.n	80045ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004596:	f7ff f897 	bl	80036c8 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e09b      	b.n	80046e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ac:	4b40      	ldr	r3, [pc, #256]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1ee      	bne.n	8004596 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045b8:	7dfb      	ldrb	r3, [r7, #23]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d105      	bne.n	80045ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045be:	4b3c      	ldr	r3, [pc, #240]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	4a3b      	ldr	r2, [pc, #236]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 80045c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 8087 	beq.w	80046e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045d4:	4b36      	ldr	r3, [pc, #216]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 030c 	and.w	r3, r3, #12
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d061      	beq.n	80046a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d146      	bne.n	8004676 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e8:	4b33      	ldr	r3, [pc, #204]	; (80046b8 <HAL_RCC_OscConfig+0x4cc>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ee:	f7ff f86b 	bl	80036c8 <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f6:	f7ff f867 	bl	80036c8 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e06d      	b.n	80046e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004608:	4b29      	ldr	r3, [pc, #164]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f0      	bne.n	80045f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800461c:	d108      	bne.n	8004630 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800461e:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	4921      	ldr	r1, [pc, #132]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 800462c:	4313      	orrs	r3, r2
 800462e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004630:	4b1f      	ldr	r3, [pc, #124]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a19      	ldr	r1, [r3, #32]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	430b      	orrs	r3, r1
 8004642:	491b      	ldr	r1, [pc, #108]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 8004644:	4313      	orrs	r3, r2
 8004646:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004648:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <HAL_RCC_OscConfig+0x4cc>)
 800464a:	2201      	movs	r2, #1
 800464c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800464e:	f7ff f83b 	bl	80036c8 <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004656:	f7ff f837 	bl	80036c8 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e03d      	b.n	80046e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004668:	4b11      	ldr	r3, [pc, #68]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0f0      	beq.n	8004656 <HAL_RCC_OscConfig+0x46a>
 8004674:	e035      	b.n	80046e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004676:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <HAL_RCC_OscConfig+0x4cc>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467c:	f7ff f824 	bl	80036c8 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004684:	f7ff f820 	bl	80036c8 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e026      	b.n	80046e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004696:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <HAL_RCC_OscConfig+0x4c4>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f0      	bne.n	8004684 <HAL_RCC_OscConfig+0x498>
 80046a2:	e01e      	b.n	80046e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d107      	bne.n	80046bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e019      	b.n	80046e4 <HAL_RCC_OscConfig+0x4f8>
 80046b0:	40021000 	.word	0x40021000
 80046b4:	40007000 	.word	0x40007000
 80046b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046bc:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <HAL_RCC_OscConfig+0x500>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d106      	bne.n	80046de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046da:	429a      	cmp	r2, r3
 80046dc:	d001      	beq.n	80046e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40021000 	.word	0x40021000

080046f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0d0      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004704:	4b6a      	ldr	r3, [pc, #424]	; (80048b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d910      	bls.n	8004734 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004712:	4b67      	ldr	r3, [pc, #412]	; (80048b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f023 0207 	bic.w	r2, r3, #7
 800471a:	4965      	ldr	r1, [pc, #404]	; (80048b0 <HAL_RCC_ClockConfig+0x1c0>)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	4313      	orrs	r3, r2
 8004720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004722:	4b63      	ldr	r3, [pc, #396]	; (80048b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d001      	beq.n	8004734 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0b8      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d020      	beq.n	8004782 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800474c:	4b59      	ldr	r3, [pc, #356]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	4a58      	ldr	r2, [pc, #352]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004752:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004756:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004764:	4b53      	ldr	r3, [pc, #332]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	4a52      	ldr	r2, [pc, #328]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 800476a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800476e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004770:	4b50      	ldr	r3, [pc, #320]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	494d      	ldr	r1, [pc, #308]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 800477e:	4313      	orrs	r3, r2
 8004780:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d040      	beq.n	8004810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d107      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004796:	4b47      	ldr	r3, [pc, #284]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d115      	bne.n	80047ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e07f      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d107      	bne.n	80047be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ae:	4b41      	ldr	r3, [pc, #260]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d109      	bne.n	80047ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e073      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047be:	4b3d      	ldr	r3, [pc, #244]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e06b      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ce:	4b39      	ldr	r3, [pc, #228]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f023 0203 	bic.w	r2, r3, #3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	4936      	ldr	r1, [pc, #216]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047e0:	f7fe ff72 	bl	80036c8 <HAL_GetTick>
 80047e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e6:	e00a      	b.n	80047fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e8:	f7fe ff6e 	bl	80036c8 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e053      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fe:	4b2d      	ldr	r3, [pc, #180]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f003 020c 	and.w	r2, r3, #12
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	429a      	cmp	r2, r3
 800480e:	d1eb      	bne.n	80047e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004810:	4b27      	ldr	r3, [pc, #156]	; (80048b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d210      	bcs.n	8004840 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481e:	4b24      	ldr	r3, [pc, #144]	; (80048b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 0207 	bic.w	r2, r3, #7
 8004826:	4922      	ldr	r1, [pc, #136]	; (80048b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	4313      	orrs	r3, r2
 800482c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800482e:	4b20      	ldr	r3, [pc, #128]	; (80048b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d001      	beq.n	8004840 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e032      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d008      	beq.n	800485e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800484c:	4b19      	ldr	r3, [pc, #100]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	4916      	ldr	r1, [pc, #88]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 800485a:	4313      	orrs	r3, r2
 800485c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d009      	beq.n	800487e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800486a:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	490e      	ldr	r1, [pc, #56]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 800487a:	4313      	orrs	r3, r2
 800487c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800487e:	f000 f821 	bl	80048c4 <HAL_RCC_GetSysClockFreq>
 8004882:	4602      	mov	r2, r0
 8004884:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	091b      	lsrs	r3, r3, #4
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	490a      	ldr	r1, [pc, #40]	; (80048b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004890:	5ccb      	ldrb	r3, [r1, r3]
 8004892:	fa22 f303 	lsr.w	r3, r2, r3
 8004896:	4a09      	ldr	r2, [pc, #36]	; (80048bc <HAL_RCC_ClockConfig+0x1cc>)
 8004898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800489a:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <HAL_RCC_ClockConfig+0x1d0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fe fed0 	bl	8003644 <HAL_InitTick>

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40022000 	.word	0x40022000
 80048b4:	40021000 	.word	0x40021000
 80048b8:	0800b264 	.word	0x0800b264
 80048bc:	2000000c 	.word	0x2000000c
 80048c0:	20000010 	.word	0x20000010

080048c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c4:	b490      	push	{r4, r7}
 80048c6:	b08a      	sub	sp, #40	; 0x28
 80048c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80048ca:	4b29      	ldr	r3, [pc, #164]	; (8004970 <HAL_RCC_GetSysClockFreq+0xac>)
 80048cc:	1d3c      	adds	r4, r7, #4
 80048ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80048d4:	f240 2301 	movw	r3, #513	; 0x201
 80048d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	61fb      	str	r3, [r7, #28]
 80048de:	2300      	movs	r3, #0
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	2300      	movs	r3, #0
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
 80048e6:	2300      	movs	r3, #0
 80048e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80048ee:	4b21      	ldr	r3, [pc, #132]	; (8004974 <HAL_RCC_GetSysClockFreq+0xb0>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f003 030c 	and.w	r3, r3, #12
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d002      	beq.n	8004904 <HAL_RCC_GetSysClockFreq+0x40>
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d003      	beq.n	800490a <HAL_RCC_GetSysClockFreq+0x46>
 8004902:	e02b      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004904:	4b1c      	ldr	r3, [pc, #112]	; (8004978 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004906:	623b      	str	r3, [r7, #32]
      break;
 8004908:	e02b      	b.n	8004962 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	0c9b      	lsrs	r3, r3, #18
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	3328      	adds	r3, #40	; 0x28
 8004914:	443b      	add	r3, r7
 8004916:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800491a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d012      	beq.n	800494c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004926:	4b13      	ldr	r3, [pc, #76]	; (8004974 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	0c5b      	lsrs	r3, r3, #17
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	3328      	adds	r3, #40	; 0x28
 8004932:	443b      	add	r3, r7
 8004934:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004938:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	4a0e      	ldr	r2, [pc, #56]	; (8004978 <HAL_RCC_GetSysClockFreq+0xb4>)
 800493e:	fb03 f202 	mul.w	r2, r3, r2
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	fbb2 f3f3 	udiv	r3, r2, r3
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
 800494a:	e004      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	4a0b      	ldr	r2, [pc, #44]	; (800497c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004950:	fb02 f303 	mul.w	r3, r2, r3
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	623b      	str	r3, [r7, #32]
      break;
 800495a:	e002      	b.n	8004962 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800495c:	4b06      	ldr	r3, [pc, #24]	; (8004978 <HAL_RCC_GetSysClockFreq+0xb4>)
 800495e:	623b      	str	r3, [r7, #32]
      break;
 8004960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004962:	6a3b      	ldr	r3, [r7, #32]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3728      	adds	r7, #40	; 0x28
 8004968:	46bd      	mov	sp, r7
 800496a:	bc90      	pop	{r4, r7}
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	0800b254 	.word	0x0800b254
 8004974:	40021000 	.word	0x40021000
 8004978:	007a1200 	.word	0x007a1200
 800497c:	003d0900 	.word	0x003d0900

08004980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004984:	4b02      	ldr	r3, [pc, #8]	; (8004990 <HAL_RCC_GetHCLKFreq+0x10>)
 8004986:	681b      	ldr	r3, [r3, #0]
}
 8004988:	4618      	mov	r0, r3
 800498a:	46bd      	mov	sp, r7
 800498c:	bc80      	pop	{r7}
 800498e:	4770      	bx	lr
 8004990:	2000000c 	.word	0x2000000c

08004994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004998:	f7ff fff2 	bl	8004980 <HAL_RCC_GetHCLKFreq>
 800499c:	4602      	mov	r2, r0
 800499e:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	0a1b      	lsrs	r3, r3, #8
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	4903      	ldr	r1, [pc, #12]	; (80049b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049aa:	5ccb      	ldrb	r3, [r1, r3]
 80049ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	40021000 	.word	0x40021000
 80049b8:	0800b274 	.word	0x0800b274

080049bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049c0:	f7ff ffde 	bl	8004980 <HAL_RCC_GetHCLKFreq>
 80049c4:	4602      	mov	r2, r0
 80049c6:	4b05      	ldr	r3, [pc, #20]	; (80049dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	0adb      	lsrs	r3, r3, #11
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	4903      	ldr	r1, [pc, #12]	; (80049e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049d2:	5ccb      	ldrb	r3, [r1, r3]
 80049d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049d8:	4618      	mov	r0, r3
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40021000 	.word	0x40021000
 80049e0:	0800b274 	.word	0x0800b274

080049e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049ec:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <RCC_Delay+0x34>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a0a      	ldr	r2, [pc, #40]	; (8004a1c <RCC_Delay+0x38>)
 80049f2:	fba2 2303 	umull	r2, r3, r2, r3
 80049f6:	0a5b      	lsrs	r3, r3, #9
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	fb02 f303 	mul.w	r3, r2, r3
 80049fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a00:	bf00      	nop
  }
  while (Delay --);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1e5a      	subs	r2, r3, #1
 8004a06:	60fa      	str	r2, [r7, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1f9      	bne.n	8004a00 <RCC_Delay+0x1c>
}
 8004a0c:	bf00      	nop
 8004a0e:	bf00      	nop
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr
 8004a18:	2000000c 	.word	0x2000000c
 8004a1c:	10624dd3 	.word	0x10624dd3

08004a20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e076      	b.n	8004b20 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d108      	bne.n	8004a4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a42:	d009      	beq.n	8004a58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	61da      	str	r2, [r3, #28]
 8004a4a:	e005      	b.n	8004a58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7fe fb92 	bl	800319c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004adc:	ea42 0103 	orr.w	r1, r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	0c1a      	lsrs	r2, r3, #16
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f002 0204 	and.w	r2, r2, #4
 8004afe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69da      	ldr	r2, [r3, #28]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	603b      	str	r3, [r7, #0]
 8004b34:	4613      	mov	r3, r2
 8004b36:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b44:	d112      	bne.n	8004b6c <HAL_SPI_Receive+0x44>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10e      	bne.n	8004b6c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2204      	movs	r2, #4
 8004b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b56:	88fa      	ldrh	r2, [r7, #6]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 f8f1 	bl	8004d4a <HAL_SPI_TransmitReceive>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	e0ea      	b.n	8004d42 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d101      	bne.n	8004b7a <HAL_SPI_Receive+0x52>
 8004b76:	2302      	movs	r3, #2
 8004b78:	e0e3      	b.n	8004d42 <HAL_SPI_Receive+0x21a>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b82:	f7fe fda1 	bl	80036c8 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d002      	beq.n	8004b9a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004b94:	2302      	movs	r3, #2
 8004b96:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b98:	e0ca      	b.n	8004d30 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d002      	beq.n	8004ba6 <HAL_SPI_Receive+0x7e>
 8004ba0:	88fb      	ldrh	r3, [r7, #6]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d102      	bne.n	8004bac <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004baa:	e0c1      	b.n	8004d30 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2204      	movs	r2, #4
 8004bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	88fa      	ldrh	r2, [r7, #6]
 8004bc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	88fa      	ldrh	r2, [r7, #6]
 8004bca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf2:	d10f      	bne.n	8004c14 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c12:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1e:	2b40      	cmp	r3, #64	; 0x40
 8004c20:	d007      	beq.n	8004c32 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c30:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d162      	bne.n	8004d00 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c3a:	e02e      	b.n	8004c9a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d115      	bne.n	8004c76 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f103 020c 	add.w	r2, r3, #12
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	7812      	ldrb	r2, [r2, #0]
 8004c58:	b2d2      	uxtb	r2, r2
 8004c5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c74:	e011      	b.n	8004c9a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c76:	f7fe fd27 	bl	80036c8 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d803      	bhi.n	8004c8e <HAL_SPI_Receive+0x166>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d102      	bne.n	8004c94 <HAL_SPI_Receive+0x16c>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d102      	bne.n	8004c9a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c98:	e04a      	b.n	8004d30 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1cb      	bne.n	8004c3c <HAL_SPI_Receive+0x114>
 8004ca4:	e031      	b.n	8004d0a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d113      	bne.n	8004cdc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68da      	ldr	r2, [r3, #12]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbe:	b292      	uxth	r2, r2
 8004cc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	1c9a      	adds	r2, r3, #2
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cda:	e011      	b.n	8004d00 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cdc:	f7fe fcf4 	bl	80036c8 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d803      	bhi.n	8004cf4 <HAL_SPI_Receive+0x1cc>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf2:	d102      	bne.n	8004cfa <HAL_SPI_Receive+0x1d2>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d102      	bne.n	8004d00 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004cfe:	e017      	b.n	8004d30 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1cd      	bne.n	8004ca6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	6839      	ldr	r1, [r7, #0]
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 fa46 	bl	80051a0 <SPI_EndRxTransaction>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	75fb      	strb	r3, [r7, #23]
 8004d2c:	e000      	b.n	8004d30 <HAL_SPI_Receive+0x208>
  }

error :
 8004d2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b08c      	sub	sp, #48	; 0x30
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	607a      	str	r2, [r7, #4]
 8004d56:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d101      	bne.n	8004d70 <HAL_SPI_TransmitReceive+0x26>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	e18a      	b.n	8005086 <HAL_SPI_TransmitReceive+0x33c>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d78:	f7fe fca6 	bl	80036c8 <HAL_GetTick>
 8004d7c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004d8e:	887b      	ldrh	r3, [r7, #2]
 8004d90:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d00f      	beq.n	8004dba <HAL_SPI_TransmitReceive+0x70>
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004da0:	d107      	bne.n	8004db2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d103      	bne.n	8004db2 <HAL_SPI_TransmitReceive+0x68>
 8004daa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d003      	beq.n	8004dba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004db2:	2302      	movs	r3, #2
 8004db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004db8:	e15b      	b.n	8005072 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <HAL_SPI_TransmitReceive+0x82>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <HAL_SPI_TransmitReceive+0x82>
 8004dc6:	887b      	ldrh	r3, [r7, #2]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d103      	bne.n	8004dd4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004dd2:	e14e      	b.n	8005072 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d003      	beq.n	8004de8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2205      	movs	r2, #5
 8004de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	887a      	ldrh	r2, [r7, #2]
 8004df8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	887a      	ldrh	r2, [r7, #2]
 8004dfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	887a      	ldrh	r2, [r7, #2]
 8004e0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	887a      	ldrh	r2, [r7, #2]
 8004e10:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e28:	2b40      	cmp	r3, #64	; 0x40
 8004e2a:	d007      	beq.n	8004e3c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e44:	d178      	bne.n	8004f38 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <HAL_SPI_TransmitReceive+0x10a>
 8004e4e:	8b7b      	ldrh	r3, [r7, #26]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d166      	bne.n	8004f22 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e58:	881a      	ldrh	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e64:	1c9a      	adds	r2, r3, #2
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e78:	e053      	b.n	8004f22 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d11b      	bne.n	8004ec0 <HAL_SPI_TransmitReceive+0x176>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d016      	beq.n	8004ec0 <HAL_SPI_TransmitReceive+0x176>
 8004e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d113      	bne.n	8004ec0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9c:	881a      	ldrh	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea8:	1c9a      	adds	r2, r3, #2
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d119      	bne.n	8004f02 <HAL_SPI_TransmitReceive+0x1b8>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d014      	beq.n	8004f02 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee2:	b292      	uxth	r2, r2
 8004ee4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eea:	1c9a      	adds	r2, r3, #2
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004efe:	2301      	movs	r3, #1
 8004f00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f02:	f7fe fbe1 	bl	80036c8 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d807      	bhi.n	8004f22 <HAL_SPI_TransmitReceive+0x1d8>
 8004f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f18:	d003      	beq.n	8004f22 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f20:	e0a7      	b.n	8005072 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1a6      	bne.n	8004e7a <HAL_SPI_TransmitReceive+0x130>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1a1      	bne.n	8004e7a <HAL_SPI_TransmitReceive+0x130>
 8004f36:	e07c      	b.n	8005032 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <HAL_SPI_TransmitReceive+0x1fc>
 8004f40:	8b7b      	ldrh	r3, [r7, #26]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d16b      	bne.n	800501e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	330c      	adds	r3, #12
 8004f50:	7812      	ldrb	r2, [r2, #0]
 8004f52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f6c:	e057      	b.n	800501e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d11c      	bne.n	8004fb6 <HAL_SPI_TransmitReceive+0x26c>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d017      	beq.n	8004fb6 <HAL_SPI_TransmitReceive+0x26c>
 8004f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d114      	bne.n	8004fb6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	330c      	adds	r3, #12
 8004f96:	7812      	ldrb	r2, [r2, #0]
 8004f98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d119      	bne.n	8004ff8 <HAL_SPI_TransmitReceive+0x2ae>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d014      	beq.n	8004ff8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ff8:	f7fe fb66 	bl	80036c8 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005004:	429a      	cmp	r2, r3
 8005006:	d803      	bhi.n	8005010 <HAL_SPI_TransmitReceive+0x2c6>
 8005008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500e:	d102      	bne.n	8005016 <HAL_SPI_TransmitReceive+0x2cc>
 8005010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005012:	2b00      	cmp	r3, #0
 8005014:	d103      	bne.n	800501e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800501c:	e029      	b.n	8005072 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005022:	b29b      	uxth	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1a2      	bne.n	8004f6e <HAL_SPI_TransmitReceive+0x224>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d19d      	bne.n	8004f6e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005034:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 f904 	bl	8005244 <SPI_EndRxTxTransaction>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d006      	beq.n	8005050 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2220      	movs	r2, #32
 800504c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800504e:	e010      	b.n	8005072 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10b      	bne.n	8005070 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005058:	2300      	movs	r3, #0
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	e000      	b.n	8005072 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005070:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005082:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005086:	4618      	mov	r0, r3
 8005088:	3730      	adds	r7, #48	; 0x30
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	4613      	mov	r3, r2
 800509e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050a0:	f7fe fb12 	bl	80036c8 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a8:	1a9b      	subs	r3, r3, r2
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	4413      	add	r3, r2
 80050ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050b0:	f7fe fb0a 	bl	80036c8 <HAL_GetTick>
 80050b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050b6:	4b39      	ldr	r3, [pc, #228]	; (800519c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	015b      	lsls	r3, r3, #5
 80050bc:	0d1b      	lsrs	r3, r3, #20
 80050be:	69fa      	ldr	r2, [r7, #28]
 80050c0:	fb02 f303 	mul.w	r3, r2, r3
 80050c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050c6:	e054      	b.n	8005172 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ce:	d050      	beq.n	8005172 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050d0:	f7fe fafa 	bl	80036c8 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d902      	bls.n	80050e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d13d      	bne.n	8005162 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050fe:	d111      	bne.n	8005124 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005108:	d004      	beq.n	8005114 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005112:	d107      	bne.n	8005124 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005122:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512c:	d10f      	bne.n	800514e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800514c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e017      	b.n	8005192 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	3b01      	subs	r3, #1
 8005170:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4013      	ands	r3, r2
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	429a      	cmp	r2, r3
 8005180:	bf0c      	ite	eq
 8005182:	2301      	moveq	r3, #1
 8005184:	2300      	movne	r3, #0
 8005186:	b2db      	uxtb	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	429a      	cmp	r2, r3
 800518e:	d19b      	bne.n	80050c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3720      	adds	r7, #32
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	2000000c 	.word	0x2000000c

080051a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051b4:	d111      	bne.n	80051da <SPI_EndRxTransaction+0x3a>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051be:	d004      	beq.n	80051ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051c8:	d107      	bne.n	80051da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051d8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051e2:	d117      	bne.n	8005214 <SPI_EndRxTransaction+0x74>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ec:	d112      	bne.n	8005214 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2200      	movs	r2, #0
 80051f6:	2101      	movs	r1, #1
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f7ff ff49 	bl	8005090 <SPI_WaitFlagStateUntilTimeout>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01a      	beq.n	800523a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005208:	f043 0220 	orr.w	r2, r3, #32
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e013      	b.n	800523c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2200      	movs	r2, #0
 800521c:	2180      	movs	r1, #128	; 0x80
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f7ff ff36 	bl	8005090 <SPI_WaitFlagStateUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d007      	beq.n	800523a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522e:	f043 0220 	orr.w	r2, r3, #32
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e000      	b.n	800523c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af02      	add	r7, sp, #8
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2200      	movs	r2, #0
 8005258:	2180      	movs	r1, #128	; 0x80
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f7ff ff18 	bl	8005090 <SPI_WaitFlagStateUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d007      	beq.n	8005276 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526a:	f043 0220 	orr.w	r2, r3, #32
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e000      	b.n	8005278 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e041      	b.n	8005316 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d106      	bne.n	80052ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7fd ffe0 	bl	800326c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3304      	adds	r3, #4
 80052bc:	4619      	mov	r1, r3
 80052be:	4610      	mov	r0, r2
 80052c0:	f000 fc20 	bl	8005b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b01      	cmp	r3, #1
 8005332:	d001      	beq.n	8005338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e03a      	b.n	80053ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a18      	ldr	r2, [pc, #96]	; (80053b8 <HAL_TIM_Base_Start_IT+0x98>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00e      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x58>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005362:	d009      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x58>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a14      	ldr	r2, [pc, #80]	; (80053bc <HAL_TIM_Base_Start_IT+0x9c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d004      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x58>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a13      	ldr	r2, [pc, #76]	; (80053c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d111      	bne.n	800539c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b06      	cmp	r3, #6
 8005388:	d010      	beq.n	80053ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 0201 	orr.w	r2, r2, #1
 8005398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800539a:	e007      	b.n	80053ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bc80      	pop	{r7}
 80053b6:	4770      	bx	lr
 80053b8:	40012c00 	.word	0x40012c00
 80053bc:	40000400 	.word	0x40000400
 80053c0:	40000800 	.word	0x40000800

080053c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e041      	b.n	800545a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d106      	bne.n	80053f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fd ff20 	bl	8003230 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	3304      	adds	r3, #4
 8005400:	4619      	mov	r1, r3
 8005402:	4610      	mov	r0, r2
 8005404:	f000 fb7e 	bl	8005b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d109      	bne.n	8005488 <HAL_TIM_PWM_Start+0x24>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b01      	cmp	r3, #1
 800547e:	bf14      	ite	ne
 8005480:	2301      	movne	r3, #1
 8005482:	2300      	moveq	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	e022      	b.n	80054ce <HAL_TIM_PWM_Start+0x6a>
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	2b04      	cmp	r3, #4
 800548c:	d109      	bne.n	80054a2 <HAL_TIM_PWM_Start+0x3e>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b01      	cmp	r3, #1
 8005498:	bf14      	ite	ne
 800549a:	2301      	movne	r3, #1
 800549c:	2300      	moveq	r3, #0
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	e015      	b.n	80054ce <HAL_TIM_PWM_Start+0x6a>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d109      	bne.n	80054bc <HAL_TIM_PWM_Start+0x58>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	bf14      	ite	ne
 80054b4:	2301      	movne	r3, #1
 80054b6:	2300      	moveq	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	e008      	b.n	80054ce <HAL_TIM_PWM_Start+0x6a>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	bf14      	ite	ne
 80054c8:	2301      	movne	r3, #1
 80054ca:	2300      	moveq	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e05e      	b.n	8005594 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d104      	bne.n	80054e6 <HAL_TIM_PWM_Start+0x82>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054e4:	e013      	b.n	800550e <HAL_TIM_PWM_Start+0xaa>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b04      	cmp	r3, #4
 80054ea:	d104      	bne.n	80054f6 <HAL_TIM_PWM_Start+0x92>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054f4:	e00b      	b.n	800550e <HAL_TIM_PWM_Start+0xaa>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d104      	bne.n	8005506 <HAL_TIM_PWM_Start+0xa2>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005504:	e003      	b.n	800550e <HAL_TIM_PWM_Start+0xaa>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2202      	movs	r2, #2
 800550a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2201      	movs	r2, #1
 8005514:	6839      	ldr	r1, [r7, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fd74 	bl	8006004 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a1e      	ldr	r2, [pc, #120]	; (800559c <HAL_TIM_PWM_Start+0x138>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d107      	bne.n	8005536 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005534:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a18      	ldr	r2, [pc, #96]	; (800559c <HAL_TIM_PWM_Start+0x138>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d00e      	beq.n	800555e <HAL_TIM_PWM_Start+0xfa>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005548:	d009      	beq.n	800555e <HAL_TIM_PWM_Start+0xfa>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a14      	ldr	r2, [pc, #80]	; (80055a0 <HAL_TIM_PWM_Start+0x13c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d004      	beq.n	800555e <HAL_TIM_PWM_Start+0xfa>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a12      	ldr	r2, [pc, #72]	; (80055a4 <HAL_TIM_PWM_Start+0x140>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d111      	bne.n	8005582 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2b06      	cmp	r3, #6
 800556e:	d010      	beq.n	8005592 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0201 	orr.w	r2, r2, #1
 800557e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005580:	e007      	b.n	8005592 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f042 0201 	orr.w	r2, r2, #1
 8005590:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	40012c00 	.word	0x40012c00
 80055a0:	40000400 	.word	0x40000400
 80055a4:	40000800 	.word	0x40000800

080055a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d122      	bne.n	8005604 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d11b      	bne.n	8005604 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0202 	mvn.w	r2, #2
 80055d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fa6f 	bl	8005ace <HAL_TIM_IC_CaptureCallback>
 80055f0:	e005      	b.n	80055fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fa62 	bl	8005abc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 fa71 	bl	8005ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	f003 0304 	and.w	r3, r3, #4
 800560e:	2b04      	cmp	r3, #4
 8005610:	d122      	bne.n	8005658 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	2b04      	cmp	r3, #4
 800561e:	d11b      	bne.n	8005658 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f06f 0204 	mvn.w	r2, #4
 8005628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2202      	movs	r2, #2
 800562e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fa45 	bl	8005ace <HAL_TIM_IC_CaptureCallback>
 8005644:	e005      	b.n	8005652 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fa38 	bl	8005abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fa47 	bl	8005ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b08      	cmp	r3, #8
 8005664:	d122      	bne.n	80056ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f003 0308 	and.w	r3, r3, #8
 8005670:	2b08      	cmp	r3, #8
 8005672:	d11b      	bne.n	80056ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f06f 0208 	mvn.w	r2, #8
 800567c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2204      	movs	r2, #4
 8005682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fa1b 	bl	8005ace <HAL_TIM_IC_CaptureCallback>
 8005698:	e005      	b.n	80056a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fa0e 	bl	8005abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fa1d 	bl	8005ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f003 0310 	and.w	r3, r3, #16
 80056b6:	2b10      	cmp	r3, #16
 80056b8:	d122      	bne.n	8005700 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f003 0310 	and.w	r3, r3, #16
 80056c4:	2b10      	cmp	r3, #16
 80056c6:	d11b      	bne.n	8005700 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f06f 0210 	mvn.w	r2, #16
 80056d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2208      	movs	r2, #8
 80056d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f9f1 	bl	8005ace <HAL_TIM_IC_CaptureCallback>
 80056ec:	e005      	b.n	80056fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f9e4 	bl	8005abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f9f3 	bl	8005ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b01      	cmp	r3, #1
 800570c:	d10e      	bne.n	800572c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	2b01      	cmp	r3, #1
 800571a:	d107      	bne.n	800572c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f06f 0201 	mvn.w	r2, #1
 8005724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7fc ff0a 	bl	8002540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005736:	2b80      	cmp	r3, #128	; 0x80
 8005738:	d10e      	bne.n	8005758 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005744:	2b80      	cmp	r3, #128	; 0x80
 8005746:	d107      	bne.n	8005758 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fd32 	bl	80061bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005762:	2b40      	cmp	r3, #64	; 0x40
 8005764:	d10e      	bne.n	8005784 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005770:	2b40      	cmp	r3, #64	; 0x40
 8005772:	d107      	bne.n	8005784 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800577c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f9b7 	bl	8005af2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0320 	and.w	r3, r3, #32
 800578e:	2b20      	cmp	r3, #32
 8005790:	d10e      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b20      	cmp	r3, #32
 800579e:	d107      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f06f 0220 	mvn.w	r2, #32
 80057a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fcfd 	bl	80061aa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057b0:	bf00      	nop
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e0ac      	b.n	800592c <HAL_TIM_PWM_ConfigChannel+0x174>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b0c      	cmp	r3, #12
 80057de:	f200 809f 	bhi.w	8005920 <HAL_TIM_PWM_ConfigChannel+0x168>
 80057e2:	a201      	add	r2, pc, #4	; (adr r2, 80057e8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80057e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e8:	0800581d 	.word	0x0800581d
 80057ec:	08005921 	.word	0x08005921
 80057f0:	08005921 	.word	0x08005921
 80057f4:	08005921 	.word	0x08005921
 80057f8:	0800585d 	.word	0x0800585d
 80057fc:	08005921 	.word	0x08005921
 8005800:	08005921 	.word	0x08005921
 8005804:	08005921 	.word	0x08005921
 8005808:	0800589f 	.word	0x0800589f
 800580c:	08005921 	.word	0x08005921
 8005810:	08005921 	.word	0x08005921
 8005814:	08005921 	.word	0x08005921
 8005818:	080058df 	.word	0x080058df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68b9      	ldr	r1, [r7, #8]
 8005822:	4618      	mov	r0, r3
 8005824:	f000 f9d0 	bl	8005bc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0208 	orr.w	r2, r2, #8
 8005836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0204 	bic.w	r2, r2, #4
 8005846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6999      	ldr	r1, [r3, #24]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	691a      	ldr	r2, [r3, #16]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	619a      	str	r2, [r3, #24]
      break;
 800585a:	e062      	b.n	8005922 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fa16 	bl	8005c94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6999      	ldr	r1, [r3, #24]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	021a      	lsls	r2, r3, #8
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	619a      	str	r2, [r3, #24]
      break;
 800589c:	e041      	b.n	8005922 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68b9      	ldr	r1, [r7, #8]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 fa5f 	bl	8005d68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0208 	orr.w	r2, r2, #8
 80058b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69da      	ldr	r2, [r3, #28]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0204 	bic.w	r2, r2, #4
 80058c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69d9      	ldr	r1, [r3, #28]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	691a      	ldr	r2, [r3, #16]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	61da      	str	r2, [r3, #28]
      break;
 80058dc:	e021      	b.n	8005922 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 faa9 	bl	8005e3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69da      	ldr	r2, [r3, #28]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69d9      	ldr	r1, [r3, #28]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	021a      	lsls	r2, r3, #8
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	61da      	str	r2, [r3, #28]
      break;
 800591e:	e000      	b.n	8005922 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005920:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005944:	2b01      	cmp	r3, #1
 8005946:	d101      	bne.n	800594c <HAL_TIM_ConfigClockSource+0x18>
 8005948:	2302      	movs	r3, #2
 800594a:	e0b3      	b.n	8005ab4 <HAL_TIM_ConfigClockSource+0x180>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2202      	movs	r2, #2
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800596a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005972:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005984:	d03e      	beq.n	8005a04 <HAL_TIM_ConfigClockSource+0xd0>
 8005986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800598a:	f200 8087 	bhi.w	8005a9c <HAL_TIM_ConfigClockSource+0x168>
 800598e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005992:	f000 8085 	beq.w	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 8005996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599a:	d87f      	bhi.n	8005a9c <HAL_TIM_ConfigClockSource+0x168>
 800599c:	2b70      	cmp	r3, #112	; 0x70
 800599e:	d01a      	beq.n	80059d6 <HAL_TIM_ConfigClockSource+0xa2>
 80059a0:	2b70      	cmp	r3, #112	; 0x70
 80059a2:	d87b      	bhi.n	8005a9c <HAL_TIM_ConfigClockSource+0x168>
 80059a4:	2b60      	cmp	r3, #96	; 0x60
 80059a6:	d050      	beq.n	8005a4a <HAL_TIM_ConfigClockSource+0x116>
 80059a8:	2b60      	cmp	r3, #96	; 0x60
 80059aa:	d877      	bhi.n	8005a9c <HAL_TIM_ConfigClockSource+0x168>
 80059ac:	2b50      	cmp	r3, #80	; 0x50
 80059ae:	d03c      	beq.n	8005a2a <HAL_TIM_ConfigClockSource+0xf6>
 80059b0:	2b50      	cmp	r3, #80	; 0x50
 80059b2:	d873      	bhi.n	8005a9c <HAL_TIM_ConfigClockSource+0x168>
 80059b4:	2b40      	cmp	r3, #64	; 0x40
 80059b6:	d058      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0x136>
 80059b8:	2b40      	cmp	r3, #64	; 0x40
 80059ba:	d86f      	bhi.n	8005a9c <HAL_TIM_ConfigClockSource+0x168>
 80059bc:	2b30      	cmp	r3, #48	; 0x30
 80059be:	d064      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x156>
 80059c0:	2b30      	cmp	r3, #48	; 0x30
 80059c2:	d86b      	bhi.n	8005a9c <HAL_TIM_ConfigClockSource+0x168>
 80059c4:	2b20      	cmp	r3, #32
 80059c6:	d060      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x156>
 80059c8:	2b20      	cmp	r3, #32
 80059ca:	d867      	bhi.n	8005a9c <HAL_TIM_ConfigClockSource+0x168>
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d05c      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x156>
 80059d0:	2b10      	cmp	r3, #16
 80059d2:	d05a      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80059d4:	e062      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	6899      	ldr	r1, [r3, #8]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f000 faee 	bl	8005fc6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	609a      	str	r2, [r3, #8]
      break;
 8005a02:	e04e      	b.n	8005aa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6818      	ldr	r0, [r3, #0]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	6899      	ldr	r1, [r3, #8]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f000 fad7 	bl	8005fc6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a26:	609a      	str	r2, [r3, #8]
      break;
 8005a28:	e03b      	b.n	8005aa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6818      	ldr	r0, [r3, #0]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	6859      	ldr	r1, [r3, #4]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	461a      	mov	r2, r3
 8005a38:	f000 fa4e 	bl	8005ed8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2150      	movs	r1, #80	; 0x50
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 faa5 	bl	8005f92 <TIM_ITRx_SetConfig>
      break;
 8005a48:	e02b      	b.n	8005aa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6818      	ldr	r0, [r3, #0]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	6859      	ldr	r1, [r3, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	461a      	mov	r2, r3
 8005a58:	f000 fa6c 	bl	8005f34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2160      	movs	r1, #96	; 0x60
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fa95 	bl	8005f92 <TIM_ITRx_SetConfig>
      break;
 8005a68:	e01b      	b.n	8005aa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6818      	ldr	r0, [r3, #0]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	6859      	ldr	r1, [r3, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	461a      	mov	r2, r3
 8005a78:	f000 fa2e 	bl	8005ed8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2140      	movs	r1, #64	; 0x40
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fa85 	bl	8005f92 <TIM_ITRx_SetConfig>
      break;
 8005a88:	e00b      	b.n	8005aa2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4619      	mov	r1, r3
 8005a94:	4610      	mov	r0, r2
 8005a96:	f000 fa7c 	bl	8005f92 <TIM_ITRx_SetConfig>
        break;
 8005a9a:	e002      	b.n	8005aa2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005a9c:	bf00      	nop
 8005a9e:	e000      	b.n	8005aa2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005aa0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bc80      	pop	{r7}
 8005acc:	4770      	bx	lr

08005ace <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ad6:	bf00      	nop
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bc80      	pop	{r7}
 8005ade:	4770      	bx	lr

08005ae0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bc80      	pop	{r7}
 8005af0:	4770      	bx	lr

08005af2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bc80      	pop	{r7}
 8005b02:	4770      	bx	lr

08005b04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a29      	ldr	r2, [pc, #164]	; (8005bbc <TIM_Base_SetConfig+0xb8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d00b      	beq.n	8005b34 <TIM_Base_SetConfig+0x30>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b22:	d007      	beq.n	8005b34 <TIM_Base_SetConfig+0x30>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a26      	ldr	r2, [pc, #152]	; (8005bc0 <TIM_Base_SetConfig+0xbc>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d003      	beq.n	8005b34 <TIM_Base_SetConfig+0x30>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a25      	ldr	r2, [pc, #148]	; (8005bc4 <TIM_Base_SetConfig+0xc0>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d108      	bne.n	8005b46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a1c      	ldr	r2, [pc, #112]	; (8005bbc <TIM_Base_SetConfig+0xb8>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00b      	beq.n	8005b66 <TIM_Base_SetConfig+0x62>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b54:	d007      	beq.n	8005b66 <TIM_Base_SetConfig+0x62>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a19      	ldr	r2, [pc, #100]	; (8005bc0 <TIM_Base_SetConfig+0xbc>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d003      	beq.n	8005b66 <TIM_Base_SetConfig+0x62>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a18      	ldr	r2, [pc, #96]	; (8005bc4 <TIM_Base_SetConfig+0xc0>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d108      	bne.n	8005b78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	689a      	ldr	r2, [r3, #8]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a07      	ldr	r2, [pc, #28]	; (8005bbc <TIM_Base_SetConfig+0xb8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d103      	bne.n	8005bac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	691a      	ldr	r2, [r3, #16]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	615a      	str	r2, [r3, #20]
}
 8005bb2:	bf00      	nop
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bc80      	pop	{r7}
 8005bba:	4770      	bx	lr
 8005bbc:	40012c00 	.word	0x40012c00
 8005bc0:	40000400 	.word	0x40000400
 8005bc4:	40000800 	.word	0x40000800

08005bc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	f023 0201 	bic.w	r2, r3, #1
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0303 	bic.w	r3, r3, #3
 8005bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f023 0302 	bic.w	r3, r3, #2
 8005c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a1c      	ldr	r2, [pc, #112]	; (8005c90 <TIM_OC1_SetConfig+0xc8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d10c      	bne.n	8005c3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f023 0308 	bic.w	r3, r3, #8
 8005c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f023 0304 	bic.w	r3, r3, #4
 8005c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a13      	ldr	r2, [pc, #76]	; (8005c90 <TIM_OC1_SetConfig+0xc8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d111      	bne.n	8005c6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	621a      	str	r2, [r3, #32]
}
 8005c84:	bf00      	nop
 8005c86:	371c      	adds	r7, #28
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bc80      	pop	{r7}
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	40012c00 	.word	0x40012c00

08005c94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	f023 0210 	bic.w	r2, r3, #16
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	021b      	lsls	r3, r3, #8
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f023 0320 	bic.w	r3, r3, #32
 8005cde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a1d      	ldr	r2, [pc, #116]	; (8005d64 <TIM_OC2_SetConfig+0xd0>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d10d      	bne.n	8005d10 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a14      	ldr	r2, [pc, #80]	; (8005d64 <TIM_OC2_SetConfig+0xd0>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d113      	bne.n	8005d40 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	621a      	str	r2, [r3, #32]
}
 8005d5a:	bf00      	nop
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bc80      	pop	{r7}
 8005d62:	4770      	bx	lr
 8005d64:	40012c00 	.word	0x40012c00

08005d68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f023 0303 	bic.w	r3, r3, #3
 8005d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	021b      	lsls	r3, r3, #8
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a1d      	ldr	r2, [pc, #116]	; (8005e38 <TIM_OC3_SetConfig+0xd0>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d10d      	bne.n	8005de2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	021b      	lsls	r3, r3, #8
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a14      	ldr	r2, [pc, #80]	; (8005e38 <TIM_OC3_SetConfig+0xd0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d113      	bne.n	8005e12 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	621a      	str	r2, [r3, #32]
}
 8005e2c:	bf00      	nop
 8005e2e:	371c      	adds	r7, #28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bc80      	pop	{r7}
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	40012c00 	.word	0x40012c00

08005e3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	021b      	lsls	r3, r3, #8
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	031b      	lsls	r3, r3, #12
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a0f      	ldr	r2, [pc, #60]	; (8005ed4 <TIM_OC4_SetConfig+0x98>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d109      	bne.n	8005eb0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ea2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	019b      	lsls	r3, r3, #6
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	621a      	str	r2, [r3, #32]
}
 8005eca:	bf00      	nop
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bc80      	pop	{r7}
 8005ed2:	4770      	bx	lr
 8005ed4:	40012c00 	.word	0x40012c00

08005ed8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	f023 0201 	bic.w	r2, r3, #1
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	011b      	lsls	r3, r3, #4
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f023 030a 	bic.w	r3, r3, #10
 8005f14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	621a      	str	r2, [r3, #32]
}
 8005f2a:	bf00      	nop
 8005f2c:	371c      	adds	r7, #28
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bc80      	pop	{r7}
 8005f32:	4770      	bx	lr

08005f34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	f023 0210 	bic.w	r2, r3, #16
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	031b      	lsls	r3, r3, #12
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	621a      	str	r2, [r3, #32]
}
 8005f88:	bf00      	nop
 8005f8a:	371c      	adds	r7, #28
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bc80      	pop	{r7}
 8005f90:	4770      	bx	lr

08005f92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b085      	sub	sp, #20
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	f043 0307 	orr.w	r3, r3, #7
 8005fb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	609a      	str	r2, [r3, #8]
}
 8005fbc:	bf00      	nop
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bc80      	pop	{r7}
 8005fc4:	4770      	bx	lr

08005fc6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b087      	sub	sp, #28
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	60f8      	str	r0, [r7, #12]
 8005fce:	60b9      	str	r1, [r7, #8]
 8005fd0:	607a      	str	r2, [r7, #4]
 8005fd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fe0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	021a      	lsls	r2, r3, #8
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	609a      	str	r2, [r3, #8]
}
 8005ffa:	bf00      	nop
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bc80      	pop	{r7}
 8006002:	4770      	bx	lr

08006004 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f003 031f 	and.w	r3, r3, #31
 8006016:	2201      	movs	r2, #1
 8006018:	fa02 f303 	lsl.w	r3, r2, r3
 800601c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6a1a      	ldr	r2, [r3, #32]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	43db      	mvns	r3, r3
 8006026:	401a      	ands	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a1a      	ldr	r2, [r3, #32]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f003 031f 	and.w	r3, r3, #31
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	fa01 f303 	lsl.w	r3, r1, r3
 800603c:	431a      	orrs	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	621a      	str	r2, [r3, #32]
}
 8006042:	bf00      	nop
 8006044:	371c      	adds	r7, #28
 8006046:	46bd      	mov	sp, r7
 8006048:	bc80      	pop	{r7}
 800604a:	4770      	bx	lr

0800604c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006060:	2302      	movs	r3, #2
 8006062:	e046      	b.n	80060f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a16      	ldr	r2, [pc, #88]	; (80060fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d00e      	beq.n	80060c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b0:	d009      	beq.n	80060c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a12      	ldr	r2, [pc, #72]	; (8006100 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d004      	beq.n	80060c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a10      	ldr	r2, [pc, #64]	; (8006104 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d10c      	bne.n	80060e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bc80      	pop	{r7}
 80060fa:	4770      	bx	lr
 80060fc:	40012c00 	.word	0x40012c00
 8006100:	40000400 	.word	0x40000400
 8006104:	40000800 	.word	0x40000800

08006108 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800611c:	2b01      	cmp	r3, #1
 800611e:	d101      	bne.n	8006124 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006120:	2302      	movs	r3, #2
 8006122:	e03d      	b.n	80061a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	4313      	orrs	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4313      	orrs	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bc80      	pop	{r7}
 80061a8:	4770      	bx	lr

080061aa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bc80      	pop	{r7}
 80061ba:	4770      	bx	lr

080061bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bc80      	pop	{r7}
 80061cc:	4770      	bx	lr

080061ce <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b082      	sub	sp, #8
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e03f      	b.n	8006260 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d106      	bne.n	80061fa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7fd f893 	bl	8003320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2224      	movs	r2, #36	; 0x24
 80061fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68da      	ldr	r2, [r3, #12]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006210:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fc84 	bl	8006b20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	691a      	ldr	r2, [r3, #16]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006226:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	695a      	ldr	r2, [r3, #20]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006236:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006246:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2220      	movs	r2, #32
 800625a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b08a      	sub	sp, #40	; 0x28
 800626c:	af02      	add	r7, sp, #8
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	603b      	str	r3, [r7, #0]
 8006274:	4613      	mov	r3, r2
 8006276:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b20      	cmp	r3, #32
 8006286:	d17c      	bne.n	8006382 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d002      	beq.n	8006294 <HAL_UART_Transmit+0x2c>
 800628e:	88fb      	ldrh	r3, [r7, #6]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e075      	b.n	8006384 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d101      	bne.n	80062a6 <HAL_UART_Transmit+0x3e>
 80062a2:	2302      	movs	r3, #2
 80062a4:	e06e      	b.n	8006384 <HAL_UART_Transmit+0x11c>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2221      	movs	r2, #33	; 0x21
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062bc:	f7fd fa04 	bl	80036c8 <HAL_GetTick>
 80062c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	88fa      	ldrh	r2, [r7, #6]
 80062c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	88fa      	ldrh	r2, [r7, #6]
 80062cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d6:	d108      	bne.n	80062ea <HAL_UART_Transmit+0x82>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d104      	bne.n	80062ea <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80062e0:	2300      	movs	r3, #0
 80062e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	61bb      	str	r3, [r7, #24]
 80062e8:	e003      	b.n	80062f2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80062fa:	e02a      	b.n	8006352 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2200      	movs	r2, #0
 8006304:	2180      	movs	r1, #128	; 0x80
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 fa37 	bl	800677a <UART_WaitOnFlagUntilTimeout>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e036      	b.n	8006384 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10b      	bne.n	8006334 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	881b      	ldrh	r3, [r3, #0]
 8006320:	461a      	mov	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800632a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	3302      	adds	r3, #2
 8006330:	61bb      	str	r3, [r7, #24]
 8006332:	e007      	b.n	8006344 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	781a      	ldrb	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	3301      	adds	r3, #1
 8006342:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006348:	b29b      	uxth	r3, r3
 800634a:	3b01      	subs	r3, #1
 800634c:	b29a      	uxth	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006356:	b29b      	uxth	r3, r3
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1cf      	bne.n	80062fc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	2200      	movs	r2, #0
 8006364:	2140      	movs	r1, #64	; 0x40
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 fa07 	bl	800677a <UART_WaitOnFlagUntilTimeout>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e006      	b.n	8006384 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2220      	movs	r2, #32
 800637a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	e000      	b.n	8006384 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006382:	2302      	movs	r3, #2
  }
}
 8006384:	4618      	mov	r0, r3
 8006386:	3720      	adds	r7, #32
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	4613      	mov	r3, r2
 8006398:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b20      	cmp	r3, #32
 80063a4:	d11d      	bne.n	80063e2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <HAL_UART_Receive_IT+0x26>
 80063ac:	88fb      	ldrh	r3, [r7, #6]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e016      	b.n	80063e4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <HAL_UART_Receive_IT+0x38>
 80063c0:	2302      	movs	r3, #2
 80063c2:	e00f      	b.n	80063e4 <HAL_UART_Receive_IT+0x58>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80063d2:	88fb      	ldrh	r3, [r7, #6]
 80063d4:	461a      	mov	r2, r3
 80063d6:	68b9      	ldr	r1, [r7, #8]
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 fa18 	bl	800680e <UART_Start_Receive_IT>
 80063de:	4603      	mov	r3, r0
 80063e0:	e000      	b.n	80063e4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80063e2:	2302      	movs	r3, #2
  }
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b08a      	sub	sp, #40	; 0x28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800640c:	2300      	movs	r3, #0
 800640e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006410:	2300      	movs	r3, #0
 8006412:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	f003 030f 	and.w	r3, r3, #15
 800641a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10d      	bne.n	800643e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	f003 0320 	and.w	r3, r3, #32
 8006428:	2b00      	cmp	r3, #0
 800642a:	d008      	beq.n	800643e <HAL_UART_IRQHandler+0x52>
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	f003 0320 	and.w	r3, r3, #32
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fac9 	bl	80069ce <UART_Receive_IT>
      return;
 800643c:	e17b      	b.n	8006736 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 80b1 	beq.w	80065a8 <HAL_UART_IRQHandler+0x1bc>
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	2b00      	cmp	r3, #0
 800644e:	d105      	bne.n	800645c <HAL_UART_IRQHandler+0x70>
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 80a6 	beq.w	80065a8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00a      	beq.n	800647c <HAL_UART_IRQHandler+0x90>
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006474:	f043 0201 	orr.w	r2, r3, #1
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	f003 0304 	and.w	r3, r3, #4
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <HAL_UART_IRQHandler+0xb0>
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d005      	beq.n	800649c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006494:	f043 0202 	orr.w	r2, r3, #2
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <HAL_UART_IRQHandler+0xd0>
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d005      	beq.n	80064bc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b4:	f043 0204 	orr.w	r2, r3, #4
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	f003 0308 	and.w	r3, r3, #8
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00f      	beq.n	80064e6 <HAL_UART_IRQHandler+0xfa>
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	f003 0320 	and.w	r3, r3, #32
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d104      	bne.n	80064da <HAL_UART_IRQHandler+0xee>
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d005      	beq.n	80064e6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	f043 0208 	orr.w	r2, r3, #8
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 811e 	beq.w	800672c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	f003 0320 	and.w	r3, r3, #32
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d007      	beq.n	800650a <HAL_UART_IRQHandler+0x11e>
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	f003 0320 	and.w	r3, r3, #32
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 fa62 	bl	80069ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006514:	2b00      	cmp	r3, #0
 8006516:	bf14      	ite	ne
 8006518:	2301      	movne	r3, #1
 800651a:	2300      	moveq	r3, #0
 800651c:	b2db      	uxtb	r3, r3
 800651e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b00      	cmp	r3, #0
 800652a:	d102      	bne.n	8006532 <HAL_UART_IRQHandler+0x146>
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d031      	beq.n	8006596 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f9a4 	bl	8006880 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006542:	2b00      	cmp	r3, #0
 8006544:	d023      	beq.n	800658e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	695a      	ldr	r2, [r3, #20]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006554:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655a:	2b00      	cmp	r3, #0
 800655c:	d013      	beq.n	8006586 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006562:	4a76      	ldr	r2, [pc, #472]	; (800673c <HAL_UART_IRQHandler+0x350>)
 8006564:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656a:	4618      	mov	r0, r3
 800656c:	f7fd fa22 	bl	80039b4 <HAL_DMA_Abort_IT>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d016      	beq.n	80065a4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006580:	4610      	mov	r0, r2
 8006582:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006584:	e00e      	b.n	80065a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f8e3 	bl	8006752 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800658c:	e00a      	b.n	80065a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f8df 	bl	8006752 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006594:	e006      	b.n	80065a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f8db 	bl	8006752 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80065a2:	e0c3      	b.n	800672c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a4:	bf00      	nop
    return;
 80065a6:	e0c1      	b.n	800672c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	f040 80a1 	bne.w	80066f4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	f003 0310 	and.w	r3, r3, #16
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 809b 	beq.w	80066f4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	f003 0310 	and.w	r3, r3, #16
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 8095 	beq.w	80066f4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065ca:	2300      	movs	r3, #0
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	60fb      	str	r3, [r7, #12]
 80065de:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d04e      	beq.n	800668c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80065f8:	8a3b      	ldrh	r3, [r7, #16]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 8098 	beq.w	8006730 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006604:	8a3a      	ldrh	r2, [r7, #16]
 8006606:	429a      	cmp	r2, r3
 8006608:	f080 8092 	bcs.w	8006730 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	8a3a      	ldrh	r2, [r7, #16]
 8006610:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	2b20      	cmp	r3, #32
 800661a:	d02b      	beq.n	8006674 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68da      	ldr	r2, [r3, #12]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800662a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	695a      	ldr	r2, [r3, #20]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 0201 	bic.w	r2, r2, #1
 800663a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	695a      	ldr	r2, [r3, #20]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800664a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68da      	ldr	r2, [r3, #12]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0210 	bic.w	r2, r2, #16
 8006668:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666e:	4618      	mov	r0, r3
 8006670:	f7fd f965 	bl	800393e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800667c:	b29b      	uxth	r3, r3
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	b29b      	uxth	r3, r3
 8006682:	4619      	mov	r1, r3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f86d 	bl	8006764 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800668a:	e051      	b.n	8006730 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006694:	b29b      	uxth	r3, r3
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800669e:	b29b      	uxth	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d047      	beq.n	8006734 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80066a4:	8a7b      	ldrh	r3, [r7, #18]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d044      	beq.n	8006734 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68da      	ldr	r2, [r3, #12]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066b8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	695a      	ldr	r2, [r3, #20]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 0201 	bic.w	r2, r2, #1
 80066c8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0210 	bic.w	r2, r2, #16
 80066e6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066e8:	8a7b      	ldrh	r3, [r7, #18]
 80066ea:	4619      	mov	r1, r3
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 f839 	bl	8006764 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80066f2:	e01f      	b.n	8006734 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d008      	beq.n	8006710 <HAL_UART_IRQHandler+0x324>
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f8f9 	bl	8006900 <UART_Transmit_IT>
    return;
 800670e:	e012      	b.n	8006736 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00d      	beq.n	8006736 <HAL_UART_IRQHandler+0x34a>
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006720:	2b00      	cmp	r3, #0
 8006722:	d008      	beq.n	8006736 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f93a 	bl	800699e <UART_EndTransmit_IT>
    return;
 800672a:	e004      	b.n	8006736 <HAL_UART_IRQHandler+0x34a>
    return;
 800672c:	bf00      	nop
 800672e:	e002      	b.n	8006736 <HAL_UART_IRQHandler+0x34a>
      return;
 8006730:	bf00      	nop
 8006732:	e000      	b.n	8006736 <HAL_UART_IRQHandler+0x34a>
      return;
 8006734:	bf00      	nop
  }
}
 8006736:	3728      	adds	r7, #40	; 0x28
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	080068d9 	.word	0x080068d9

08006740 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	bc80      	pop	{r7}
 8006750:	4770      	bx	lr

08006752 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800675a:	bf00      	nop
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	bc80      	pop	{r7}
 8006762:	4770      	bx	lr

08006764 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	460b      	mov	r3, r1
 800676e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	bc80      	pop	{r7}
 8006778:	4770      	bx	lr

0800677a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	603b      	str	r3, [r7, #0]
 8006786:	4613      	mov	r3, r2
 8006788:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800678a:	e02c      	b.n	80067e6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006792:	d028      	beq.n	80067e6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d007      	beq.n	80067aa <UART_WaitOnFlagUntilTimeout+0x30>
 800679a:	f7fc ff95 	bl	80036c8 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d21d      	bcs.n	80067e6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68da      	ldr	r2, [r3, #12]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067b8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	695a      	ldr	r2, [r3, #20]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0201 	bic.w	r2, r2, #1
 80067c8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2220      	movs	r2, #32
 80067d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e00f      	b.n	8006806 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	4013      	ands	r3, r2
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	bf0c      	ite	eq
 80067f6:	2301      	moveq	r3, #1
 80067f8:	2300      	movne	r3, #0
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	461a      	mov	r2, r3
 80067fe:	79fb      	ldrb	r3, [r7, #7]
 8006800:	429a      	cmp	r2, r3
 8006802:	d0c3      	beq.n	800678c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800680e:	b480      	push	{r7}
 8006810:	b085      	sub	sp, #20
 8006812:	af00      	add	r7, sp, #0
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	60b9      	str	r1, [r7, #8]
 8006818:	4613      	mov	r3, r2
 800681a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	88fa      	ldrh	r2, [r7, #6]
 8006826:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	88fa      	ldrh	r2, [r7, #6]
 800682c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2222      	movs	r2, #34	; 0x22
 8006838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68da      	ldr	r2, [r3, #12]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006852:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	695a      	ldr	r2, [r3, #20]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f042 0201 	orr.w	r2, r2, #1
 8006862:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68da      	ldr	r2, [r3, #12]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f042 0220 	orr.w	r2, r2, #32
 8006872:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	bc80      	pop	{r7}
 800687e:	4770      	bx	lr

08006880 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68da      	ldr	r2, [r3, #12]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006896:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	695a      	ldr	r2, [r3, #20]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 0201 	bic.w	r2, r2, #1
 80068a6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d107      	bne.n	80068c0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f022 0210 	bic.w	r2, r2, #16
 80068be:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2220      	movs	r2, #32
 80068c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80068ce:	bf00      	nop
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bc80      	pop	{r7}
 80068d6:	4770      	bx	lr

080068d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f7ff ff2d 	bl	8006752 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068f8:	bf00      	nop
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b21      	cmp	r3, #33	; 0x21
 8006912:	d13e      	bne.n	8006992 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800691c:	d114      	bne.n	8006948 <UART_Transmit_IT+0x48>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d110      	bne.n	8006948 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	881b      	ldrh	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800693a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	1c9a      	adds	r2, r3, #2
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	621a      	str	r2, [r3, #32]
 8006946:	e008      	b.n	800695a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a1b      	ldr	r3, [r3, #32]
 800694c:	1c59      	adds	r1, r3, #1
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	6211      	str	r1, [r2, #32]
 8006952:	781a      	ldrb	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800695e:	b29b      	uxth	r3, r3
 8006960:	3b01      	subs	r3, #1
 8006962:	b29b      	uxth	r3, r3
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	4619      	mov	r1, r3
 8006968:	84d1      	strh	r1, [r2, #38]	; 0x26
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10f      	bne.n	800698e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800697c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68da      	ldr	r2, [r3, #12]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800698c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	e000      	b.n	8006994 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006992:	2302      	movs	r3, #2
  }
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	bc80      	pop	{r7}
 800699c:	4770      	bx	lr

0800699e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b082      	sub	sp, #8
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68da      	ldr	r2, [r3, #12]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7ff febe 	bl	8006740 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b086      	sub	sp, #24
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b22      	cmp	r3, #34	; 0x22
 80069e0:	f040 8099 	bne.w	8006b16 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ec:	d117      	bne.n	8006a1e <UART_Receive_IT+0x50>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d113      	bne.n	8006a1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80069f6:	2300      	movs	r3, #0
 80069f8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fe:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a16:	1c9a      	adds	r2, r3, #2
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	629a      	str	r2, [r3, #40]	; 0x28
 8006a1c:	e026      	b.n	8006a6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a22:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006a24:	2300      	movs	r3, #0
 8006a26:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a30:	d007      	beq.n	8006a42 <UART_Receive_IT+0x74>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10a      	bne.n	8006a50 <UART_Receive_IT+0x82>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d106      	bne.n	8006a50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	701a      	strb	r2, [r3, #0]
 8006a4e:	e008      	b.n	8006a62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a66:	1c5a      	adds	r2, r3, #1
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	3b01      	subs	r3, #1
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	4619      	mov	r1, r3
 8006a7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d148      	bne.n	8006b12 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68da      	ldr	r2, [r3, #12]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 0220 	bic.w	r2, r2, #32
 8006a8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68da      	ldr	r2, [r3, #12]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	695a      	ldr	r2, [r3, #20]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 0201 	bic.w	r2, r2, #1
 8006aae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d123      	bne.n	8006b08 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68da      	ldr	r2, [r3, #12]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f022 0210 	bic.w	r2, r2, #16
 8006ad4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0310 	and.w	r3, r3, #16
 8006ae0:	2b10      	cmp	r3, #16
 8006ae2:	d10a      	bne.n	8006afa <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7ff fe2f 	bl	8006764 <HAL_UARTEx_RxEventCallback>
 8006b06:	e002      	b.n	8006b0e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7fa fc4d 	bl	80013a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e002      	b.n	8006b18 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	e000      	b.n	8006b18 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006b16:	2302      	movs	r3, #2
  }
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689a      	ldr	r2, [r3, #8]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	431a      	orrs	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006b5a:	f023 030c 	bic.w	r3, r3, #12
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	6812      	ldr	r2, [r2, #0]
 8006b62:	68b9      	ldr	r1, [r7, #8]
 8006b64:	430b      	orrs	r3, r1
 8006b66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	699a      	ldr	r2, [r3, #24]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a2c      	ldr	r2, [pc, #176]	; (8006c34 <UART_SetConfig+0x114>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d103      	bne.n	8006b90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006b88:	f7fd ff18 	bl	80049bc <HAL_RCC_GetPCLK2Freq>
 8006b8c:	60f8      	str	r0, [r7, #12]
 8006b8e:	e002      	b.n	8006b96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006b90:	f7fd ff00 	bl	8004994 <HAL_RCC_GetPCLK1Freq>
 8006b94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	009a      	lsls	r2, r3, #2
 8006ba0:	441a      	add	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bac:	4a22      	ldr	r2, [pc, #136]	; (8006c38 <UART_SetConfig+0x118>)
 8006bae:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb2:	095b      	lsrs	r3, r3, #5
 8006bb4:	0119      	lsls	r1, r3, #4
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	009a      	lsls	r2, r3, #2
 8006bc0:	441a      	add	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bcc:	4b1a      	ldr	r3, [pc, #104]	; (8006c38 <UART_SetConfig+0x118>)
 8006bce:	fba3 0302 	umull	r0, r3, r3, r2
 8006bd2:	095b      	lsrs	r3, r3, #5
 8006bd4:	2064      	movs	r0, #100	; 0x64
 8006bd6:	fb00 f303 	mul.w	r3, r0, r3
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	011b      	lsls	r3, r3, #4
 8006bde:	3332      	adds	r3, #50	; 0x32
 8006be0:	4a15      	ldr	r2, [pc, #84]	; (8006c38 <UART_SetConfig+0x118>)
 8006be2:	fba2 2303 	umull	r2, r3, r2, r3
 8006be6:	095b      	lsrs	r3, r3, #5
 8006be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bec:	4419      	add	r1, r3
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	009a      	lsls	r2, r3, #2
 8006bf8:	441a      	add	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c04:	4b0c      	ldr	r3, [pc, #48]	; (8006c38 <UART_SetConfig+0x118>)
 8006c06:	fba3 0302 	umull	r0, r3, r3, r2
 8006c0a:	095b      	lsrs	r3, r3, #5
 8006c0c:	2064      	movs	r0, #100	; 0x64
 8006c0e:	fb00 f303 	mul.w	r3, r0, r3
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	011b      	lsls	r3, r3, #4
 8006c16:	3332      	adds	r3, #50	; 0x32
 8006c18:	4a07      	ldr	r2, [pc, #28]	; (8006c38 <UART_SetConfig+0x118>)
 8006c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1e:	095b      	lsrs	r3, r3, #5
 8006c20:	f003 020f 	and.w	r2, r3, #15
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	440a      	add	r2, r1
 8006c2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006c2c:	bf00      	nop
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	40013800 	.word	0x40013800
 8006c38:	51eb851f 	.word	0x51eb851f

08006c3c <arm_pid_init_f32>:
 8006c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3e:	4604      	mov	r4, r0
 8006c40:	6986      	ldr	r6, [r0, #24]
 8006c42:	6a25      	ldr	r5, [r4, #32]
 8006c44:	4630      	mov	r0, r6
 8006c46:	460f      	mov	r7, r1
 8006c48:	69e1      	ldr	r1, [r4, #28]
 8006c4a:	f7f9 ff93 	bl	8000b74 <__addsf3>
 8006c4e:	4629      	mov	r1, r5
 8006c50:	f7f9 ff90 	bl	8000b74 <__addsf3>
 8006c54:	4629      	mov	r1, r5
 8006c56:	6020      	str	r0, [r4, #0]
 8006c58:	4628      	mov	r0, r5
 8006c5a:	f7f9 ff8b 	bl	8000b74 <__addsf3>
 8006c5e:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8006c62:	4601      	mov	r1, r0
 8006c64:	4630      	mov	r0, r6
 8006c66:	f7f9 ff83 	bl	8000b70 <__aeabi_fsub>
 8006c6a:	60a5      	str	r5, [r4, #8]
 8006c6c:	6060      	str	r0, [r4, #4]
 8006c6e:	b167      	cbz	r7, 8006c8a <arm_pid_init_f32+0x4e>
 8006c70:	2300      	movs	r3, #0
 8006c72:	7323      	strb	r3, [r4, #12]
 8006c74:	7363      	strb	r3, [r4, #13]
 8006c76:	73a3      	strb	r3, [r4, #14]
 8006c78:	73e3      	strb	r3, [r4, #15]
 8006c7a:	7423      	strb	r3, [r4, #16]
 8006c7c:	7463      	strb	r3, [r4, #17]
 8006c7e:	74a3      	strb	r3, [r4, #18]
 8006c80:	74e3      	strb	r3, [r4, #19]
 8006c82:	7523      	strb	r3, [r4, #20]
 8006c84:	7563      	strb	r3, [r4, #21]
 8006c86:	75a3      	strb	r3, [r4, #22]
 8006c88:	75e3      	strb	r3, [r4, #23]
 8006c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006c8c <atof>:
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	f001 bad3 	b.w	8008238 <strtod>
	...

08006c94 <__errno>:
 8006c94:	4b01      	ldr	r3, [pc, #4]	; (8006c9c <__errno+0x8>)
 8006c96:	6818      	ldr	r0, [r3, #0]
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	20000018 	.word	0x20000018

08006ca0 <__libc_init_array>:
 8006ca0:	b570      	push	{r4, r5, r6, lr}
 8006ca2:	2600      	movs	r6, #0
 8006ca4:	4d0c      	ldr	r5, [pc, #48]	; (8006cd8 <__libc_init_array+0x38>)
 8006ca6:	4c0d      	ldr	r4, [pc, #52]	; (8006cdc <__libc_init_array+0x3c>)
 8006ca8:	1b64      	subs	r4, r4, r5
 8006caa:	10a4      	asrs	r4, r4, #2
 8006cac:	42a6      	cmp	r6, r4
 8006cae:	d109      	bne.n	8006cc4 <__libc_init_array+0x24>
 8006cb0:	f004 f9c8 	bl	800b044 <_init>
 8006cb4:	2600      	movs	r6, #0
 8006cb6:	4d0a      	ldr	r5, [pc, #40]	; (8006ce0 <__libc_init_array+0x40>)
 8006cb8:	4c0a      	ldr	r4, [pc, #40]	; (8006ce4 <__libc_init_array+0x44>)
 8006cba:	1b64      	subs	r4, r4, r5
 8006cbc:	10a4      	asrs	r4, r4, #2
 8006cbe:	42a6      	cmp	r6, r4
 8006cc0:	d105      	bne.n	8006cce <__libc_init_array+0x2e>
 8006cc2:	bd70      	pop	{r4, r5, r6, pc}
 8006cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cc8:	4798      	blx	r3
 8006cca:	3601      	adds	r6, #1
 8006ccc:	e7ee      	b.n	8006cac <__libc_init_array+0xc>
 8006cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd2:	4798      	blx	r3
 8006cd4:	3601      	adds	r6, #1
 8006cd6:	e7f2      	b.n	8006cbe <__libc_init_array+0x1e>
 8006cd8:	0800b71c 	.word	0x0800b71c
 8006cdc:	0800b71c 	.word	0x0800b71c
 8006ce0:	0800b71c 	.word	0x0800b71c
 8006ce4:	0800b720 	.word	0x0800b720

08006ce8 <memset>:
 8006ce8:	4603      	mov	r3, r0
 8006cea:	4402      	add	r2, r0
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d100      	bne.n	8006cf2 <memset+0xa>
 8006cf0:	4770      	bx	lr
 8006cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8006cf6:	e7f9      	b.n	8006cec <memset+0x4>

08006cf8 <__cvt>:
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cfe:	461f      	mov	r7, r3
 8006d00:	bfbb      	ittet	lt
 8006d02:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006d06:	461f      	movlt	r7, r3
 8006d08:	2300      	movge	r3, #0
 8006d0a:	232d      	movlt	r3, #45	; 0x2d
 8006d0c:	b088      	sub	sp, #32
 8006d0e:	4614      	mov	r4, r2
 8006d10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d12:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006d14:	7013      	strb	r3, [r2, #0]
 8006d16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d18:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006d1c:	f023 0820 	bic.w	r8, r3, #32
 8006d20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d24:	d005      	beq.n	8006d32 <__cvt+0x3a>
 8006d26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d2a:	d100      	bne.n	8006d2e <__cvt+0x36>
 8006d2c:	3501      	adds	r5, #1
 8006d2e:	2302      	movs	r3, #2
 8006d30:	e000      	b.n	8006d34 <__cvt+0x3c>
 8006d32:	2303      	movs	r3, #3
 8006d34:	aa07      	add	r2, sp, #28
 8006d36:	9204      	str	r2, [sp, #16]
 8006d38:	aa06      	add	r2, sp, #24
 8006d3a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006d3e:	e9cd 3500 	strd	r3, r5, [sp]
 8006d42:	4622      	mov	r2, r4
 8006d44:	463b      	mov	r3, r7
 8006d46:	f001 fb0f 	bl	8008368 <_dtoa_r>
 8006d4a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d4e:	4606      	mov	r6, r0
 8006d50:	d102      	bne.n	8006d58 <__cvt+0x60>
 8006d52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d54:	07db      	lsls	r3, r3, #31
 8006d56:	d522      	bpl.n	8006d9e <__cvt+0xa6>
 8006d58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d5c:	eb06 0905 	add.w	r9, r6, r5
 8006d60:	d110      	bne.n	8006d84 <__cvt+0x8c>
 8006d62:	7833      	ldrb	r3, [r6, #0]
 8006d64:	2b30      	cmp	r3, #48	; 0x30
 8006d66:	d10a      	bne.n	8006d7e <__cvt+0x86>
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	4639      	mov	r1, r7
 8006d70:	f7f9 fe1a 	bl	80009a8 <__aeabi_dcmpeq>
 8006d74:	b918      	cbnz	r0, 8006d7e <__cvt+0x86>
 8006d76:	f1c5 0501 	rsb	r5, r5, #1
 8006d7a:	f8ca 5000 	str.w	r5, [sl]
 8006d7e:	f8da 3000 	ldr.w	r3, [sl]
 8006d82:	4499      	add	r9, r3
 8006d84:	2200      	movs	r2, #0
 8006d86:	2300      	movs	r3, #0
 8006d88:	4620      	mov	r0, r4
 8006d8a:	4639      	mov	r1, r7
 8006d8c:	f7f9 fe0c 	bl	80009a8 <__aeabi_dcmpeq>
 8006d90:	b108      	cbz	r0, 8006d96 <__cvt+0x9e>
 8006d92:	f8cd 901c 	str.w	r9, [sp, #28]
 8006d96:	2230      	movs	r2, #48	; 0x30
 8006d98:	9b07      	ldr	r3, [sp, #28]
 8006d9a:	454b      	cmp	r3, r9
 8006d9c:	d307      	bcc.n	8006dae <__cvt+0xb6>
 8006d9e:	4630      	mov	r0, r6
 8006da0:	9b07      	ldr	r3, [sp, #28]
 8006da2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006da4:	1b9b      	subs	r3, r3, r6
 8006da6:	6013      	str	r3, [r2, #0]
 8006da8:	b008      	add	sp, #32
 8006daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dae:	1c59      	adds	r1, r3, #1
 8006db0:	9107      	str	r1, [sp, #28]
 8006db2:	701a      	strb	r2, [r3, #0]
 8006db4:	e7f0      	b.n	8006d98 <__cvt+0xa0>

08006db6 <__exponent>:
 8006db6:	4603      	mov	r3, r0
 8006db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dba:	2900      	cmp	r1, #0
 8006dbc:	f803 2b02 	strb.w	r2, [r3], #2
 8006dc0:	bfb6      	itet	lt
 8006dc2:	222d      	movlt	r2, #45	; 0x2d
 8006dc4:	222b      	movge	r2, #43	; 0x2b
 8006dc6:	4249      	neglt	r1, r1
 8006dc8:	2909      	cmp	r1, #9
 8006dca:	7042      	strb	r2, [r0, #1]
 8006dcc:	dd2b      	ble.n	8006e26 <__exponent+0x70>
 8006dce:	f10d 0407 	add.w	r4, sp, #7
 8006dd2:	46a4      	mov	ip, r4
 8006dd4:	270a      	movs	r7, #10
 8006dd6:	fb91 f6f7 	sdiv	r6, r1, r7
 8006dda:	460a      	mov	r2, r1
 8006ddc:	46a6      	mov	lr, r4
 8006dde:	fb07 1516 	mls	r5, r7, r6, r1
 8006de2:	2a63      	cmp	r2, #99	; 0x63
 8006de4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006de8:	4631      	mov	r1, r6
 8006dea:	f104 34ff 	add.w	r4, r4, #4294967295
 8006dee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006df2:	dcf0      	bgt.n	8006dd6 <__exponent+0x20>
 8006df4:	3130      	adds	r1, #48	; 0x30
 8006df6:	f1ae 0502 	sub.w	r5, lr, #2
 8006dfa:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006dfe:	4629      	mov	r1, r5
 8006e00:	1c44      	adds	r4, r0, #1
 8006e02:	4561      	cmp	r1, ip
 8006e04:	d30a      	bcc.n	8006e1c <__exponent+0x66>
 8006e06:	f10d 0209 	add.w	r2, sp, #9
 8006e0a:	eba2 020e 	sub.w	r2, r2, lr
 8006e0e:	4565      	cmp	r5, ip
 8006e10:	bf88      	it	hi
 8006e12:	2200      	movhi	r2, #0
 8006e14:	4413      	add	r3, r2
 8006e16:	1a18      	subs	r0, r3, r0
 8006e18:	b003      	add	sp, #12
 8006e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e20:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006e24:	e7ed      	b.n	8006e02 <__exponent+0x4c>
 8006e26:	2330      	movs	r3, #48	; 0x30
 8006e28:	3130      	adds	r1, #48	; 0x30
 8006e2a:	7083      	strb	r3, [r0, #2]
 8006e2c:	70c1      	strb	r1, [r0, #3]
 8006e2e:	1d03      	adds	r3, r0, #4
 8006e30:	e7f1      	b.n	8006e16 <__exponent+0x60>
	...

08006e34 <_printf_float>:
 8006e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e38:	b091      	sub	sp, #68	; 0x44
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006e40:	4616      	mov	r6, r2
 8006e42:	461f      	mov	r7, r3
 8006e44:	4605      	mov	r5, r0
 8006e46:	f002 fbe3 	bl	8009610 <_localeconv_r>
 8006e4a:	6803      	ldr	r3, [r0, #0]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e50:	f7f9 f97e 	bl	8000150 <strlen>
 8006e54:	2300      	movs	r3, #0
 8006e56:	930e      	str	r3, [sp, #56]	; 0x38
 8006e58:	f8d8 3000 	ldr.w	r3, [r8]
 8006e5c:	900a      	str	r0, [sp, #40]	; 0x28
 8006e5e:	3307      	adds	r3, #7
 8006e60:	f023 0307 	bic.w	r3, r3, #7
 8006e64:	f103 0208 	add.w	r2, r3, #8
 8006e68:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006e6c:	f8d4 b000 	ldr.w	fp, [r4]
 8006e70:	f8c8 2000 	str.w	r2, [r8]
 8006e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e78:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e7c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006e80:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006e84:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e86:	f04f 32ff 	mov.w	r2, #4294967295
 8006e8a:	4640      	mov	r0, r8
 8006e8c:	4b9c      	ldr	r3, [pc, #624]	; (8007100 <_printf_float+0x2cc>)
 8006e8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e90:	f7f9 fdbc 	bl	8000a0c <__aeabi_dcmpun>
 8006e94:	bb70      	cbnz	r0, 8006ef4 <_printf_float+0xc0>
 8006e96:	f04f 32ff 	mov.w	r2, #4294967295
 8006e9a:	4640      	mov	r0, r8
 8006e9c:	4b98      	ldr	r3, [pc, #608]	; (8007100 <_printf_float+0x2cc>)
 8006e9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ea0:	f7f9 fd96 	bl	80009d0 <__aeabi_dcmple>
 8006ea4:	bb30      	cbnz	r0, 8006ef4 <_printf_float+0xc0>
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	4640      	mov	r0, r8
 8006eac:	4651      	mov	r1, sl
 8006eae:	f7f9 fd85 	bl	80009bc <__aeabi_dcmplt>
 8006eb2:	b110      	cbz	r0, 8006eba <_printf_float+0x86>
 8006eb4:	232d      	movs	r3, #45	; 0x2d
 8006eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eba:	4b92      	ldr	r3, [pc, #584]	; (8007104 <_printf_float+0x2d0>)
 8006ebc:	4892      	ldr	r0, [pc, #584]	; (8007108 <_printf_float+0x2d4>)
 8006ebe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006ec2:	bf94      	ite	ls
 8006ec4:	4698      	movls	r8, r3
 8006ec6:	4680      	movhi	r8, r0
 8006ec8:	2303      	movs	r3, #3
 8006eca:	f04f 0a00 	mov.w	sl, #0
 8006ece:	6123      	str	r3, [r4, #16]
 8006ed0:	f02b 0304 	bic.w	r3, fp, #4
 8006ed4:	6023      	str	r3, [r4, #0]
 8006ed6:	4633      	mov	r3, r6
 8006ed8:	4621      	mov	r1, r4
 8006eda:	4628      	mov	r0, r5
 8006edc:	9700      	str	r7, [sp, #0]
 8006ede:	aa0f      	add	r2, sp, #60	; 0x3c
 8006ee0:	f000 f9d4 	bl	800728c <_printf_common>
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	f040 8090 	bne.w	800700a <_printf_float+0x1d6>
 8006eea:	f04f 30ff 	mov.w	r0, #4294967295
 8006eee:	b011      	add	sp, #68	; 0x44
 8006ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef4:	4642      	mov	r2, r8
 8006ef6:	4653      	mov	r3, sl
 8006ef8:	4640      	mov	r0, r8
 8006efa:	4651      	mov	r1, sl
 8006efc:	f7f9 fd86 	bl	8000a0c <__aeabi_dcmpun>
 8006f00:	b148      	cbz	r0, 8006f16 <_printf_float+0xe2>
 8006f02:	f1ba 0f00 	cmp.w	sl, #0
 8006f06:	bfb8      	it	lt
 8006f08:	232d      	movlt	r3, #45	; 0x2d
 8006f0a:	4880      	ldr	r0, [pc, #512]	; (800710c <_printf_float+0x2d8>)
 8006f0c:	bfb8      	it	lt
 8006f0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f12:	4b7f      	ldr	r3, [pc, #508]	; (8007110 <_printf_float+0x2dc>)
 8006f14:	e7d3      	b.n	8006ebe <_printf_float+0x8a>
 8006f16:	6863      	ldr	r3, [r4, #4]
 8006f18:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006f1c:	1c5a      	adds	r2, r3, #1
 8006f1e:	d142      	bne.n	8006fa6 <_printf_float+0x172>
 8006f20:	2306      	movs	r3, #6
 8006f22:	6063      	str	r3, [r4, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	9206      	str	r2, [sp, #24]
 8006f28:	aa0e      	add	r2, sp, #56	; 0x38
 8006f2a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006f2e:	aa0d      	add	r2, sp, #52	; 0x34
 8006f30:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006f34:	9203      	str	r2, [sp, #12]
 8006f36:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006f3a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006f3e:	6023      	str	r3, [r4, #0]
 8006f40:	6863      	ldr	r3, [r4, #4]
 8006f42:	4642      	mov	r2, r8
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	4628      	mov	r0, r5
 8006f48:	4653      	mov	r3, sl
 8006f4a:	910b      	str	r1, [sp, #44]	; 0x2c
 8006f4c:	f7ff fed4 	bl	8006cf8 <__cvt>
 8006f50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f52:	4680      	mov	r8, r0
 8006f54:	2947      	cmp	r1, #71	; 0x47
 8006f56:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006f58:	d108      	bne.n	8006f6c <_printf_float+0x138>
 8006f5a:	1cc8      	adds	r0, r1, #3
 8006f5c:	db02      	blt.n	8006f64 <_printf_float+0x130>
 8006f5e:	6863      	ldr	r3, [r4, #4]
 8006f60:	4299      	cmp	r1, r3
 8006f62:	dd40      	ble.n	8006fe6 <_printf_float+0x1b2>
 8006f64:	f1a9 0902 	sub.w	r9, r9, #2
 8006f68:	fa5f f989 	uxtb.w	r9, r9
 8006f6c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006f70:	d81f      	bhi.n	8006fb2 <_printf_float+0x17e>
 8006f72:	464a      	mov	r2, r9
 8006f74:	3901      	subs	r1, #1
 8006f76:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f7a:	910d      	str	r1, [sp, #52]	; 0x34
 8006f7c:	f7ff ff1b 	bl	8006db6 <__exponent>
 8006f80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f82:	4682      	mov	sl, r0
 8006f84:	1813      	adds	r3, r2, r0
 8006f86:	2a01      	cmp	r2, #1
 8006f88:	6123      	str	r3, [r4, #16]
 8006f8a:	dc02      	bgt.n	8006f92 <_printf_float+0x15e>
 8006f8c:	6822      	ldr	r2, [r4, #0]
 8006f8e:	07d2      	lsls	r2, r2, #31
 8006f90:	d501      	bpl.n	8006f96 <_printf_float+0x162>
 8006f92:	3301      	adds	r3, #1
 8006f94:	6123      	str	r3, [r4, #16]
 8006f96:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d09b      	beq.n	8006ed6 <_printf_float+0xa2>
 8006f9e:	232d      	movs	r3, #45	; 0x2d
 8006fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fa4:	e797      	b.n	8006ed6 <_printf_float+0xa2>
 8006fa6:	2947      	cmp	r1, #71	; 0x47
 8006fa8:	d1bc      	bne.n	8006f24 <_printf_float+0xf0>
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1ba      	bne.n	8006f24 <_printf_float+0xf0>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e7b7      	b.n	8006f22 <_printf_float+0xee>
 8006fb2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006fb6:	d118      	bne.n	8006fea <_printf_float+0x1b6>
 8006fb8:	2900      	cmp	r1, #0
 8006fba:	6863      	ldr	r3, [r4, #4]
 8006fbc:	dd0b      	ble.n	8006fd6 <_printf_float+0x1a2>
 8006fbe:	6121      	str	r1, [r4, #16]
 8006fc0:	b913      	cbnz	r3, 8006fc8 <_printf_float+0x194>
 8006fc2:	6822      	ldr	r2, [r4, #0]
 8006fc4:	07d0      	lsls	r0, r2, #31
 8006fc6:	d502      	bpl.n	8006fce <_printf_float+0x19a>
 8006fc8:	3301      	adds	r3, #1
 8006fca:	440b      	add	r3, r1
 8006fcc:	6123      	str	r3, [r4, #16]
 8006fce:	f04f 0a00 	mov.w	sl, #0
 8006fd2:	65a1      	str	r1, [r4, #88]	; 0x58
 8006fd4:	e7df      	b.n	8006f96 <_printf_float+0x162>
 8006fd6:	b913      	cbnz	r3, 8006fde <_printf_float+0x1aa>
 8006fd8:	6822      	ldr	r2, [r4, #0]
 8006fda:	07d2      	lsls	r2, r2, #31
 8006fdc:	d501      	bpl.n	8006fe2 <_printf_float+0x1ae>
 8006fde:	3302      	adds	r3, #2
 8006fe0:	e7f4      	b.n	8006fcc <_printf_float+0x198>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e7f2      	b.n	8006fcc <_printf_float+0x198>
 8006fe6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006fea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fec:	4299      	cmp	r1, r3
 8006fee:	db05      	blt.n	8006ffc <_printf_float+0x1c8>
 8006ff0:	6823      	ldr	r3, [r4, #0]
 8006ff2:	6121      	str	r1, [r4, #16]
 8006ff4:	07d8      	lsls	r0, r3, #31
 8006ff6:	d5ea      	bpl.n	8006fce <_printf_float+0x19a>
 8006ff8:	1c4b      	adds	r3, r1, #1
 8006ffa:	e7e7      	b.n	8006fcc <_printf_float+0x198>
 8006ffc:	2900      	cmp	r1, #0
 8006ffe:	bfcc      	ite	gt
 8007000:	2201      	movgt	r2, #1
 8007002:	f1c1 0202 	rsble	r2, r1, #2
 8007006:	4413      	add	r3, r2
 8007008:	e7e0      	b.n	8006fcc <_printf_float+0x198>
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	055a      	lsls	r2, r3, #21
 800700e:	d407      	bmi.n	8007020 <_printf_float+0x1ec>
 8007010:	6923      	ldr	r3, [r4, #16]
 8007012:	4642      	mov	r2, r8
 8007014:	4631      	mov	r1, r6
 8007016:	4628      	mov	r0, r5
 8007018:	47b8      	blx	r7
 800701a:	3001      	adds	r0, #1
 800701c:	d12b      	bne.n	8007076 <_printf_float+0x242>
 800701e:	e764      	b.n	8006eea <_printf_float+0xb6>
 8007020:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007024:	f240 80dd 	bls.w	80071e2 <_printf_float+0x3ae>
 8007028:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800702c:	2200      	movs	r2, #0
 800702e:	2300      	movs	r3, #0
 8007030:	f7f9 fcba 	bl	80009a8 <__aeabi_dcmpeq>
 8007034:	2800      	cmp	r0, #0
 8007036:	d033      	beq.n	80070a0 <_printf_float+0x26c>
 8007038:	2301      	movs	r3, #1
 800703a:	4631      	mov	r1, r6
 800703c:	4628      	mov	r0, r5
 800703e:	4a35      	ldr	r2, [pc, #212]	; (8007114 <_printf_float+0x2e0>)
 8007040:	47b8      	blx	r7
 8007042:	3001      	adds	r0, #1
 8007044:	f43f af51 	beq.w	8006eea <_printf_float+0xb6>
 8007048:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800704c:	429a      	cmp	r2, r3
 800704e:	db02      	blt.n	8007056 <_printf_float+0x222>
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	07d8      	lsls	r0, r3, #31
 8007054:	d50f      	bpl.n	8007076 <_printf_float+0x242>
 8007056:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800705a:	4631      	mov	r1, r6
 800705c:	4628      	mov	r0, r5
 800705e:	47b8      	blx	r7
 8007060:	3001      	adds	r0, #1
 8007062:	f43f af42 	beq.w	8006eea <_printf_float+0xb6>
 8007066:	f04f 0800 	mov.w	r8, #0
 800706a:	f104 091a 	add.w	r9, r4, #26
 800706e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007070:	3b01      	subs	r3, #1
 8007072:	4543      	cmp	r3, r8
 8007074:	dc09      	bgt.n	800708a <_printf_float+0x256>
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	079b      	lsls	r3, r3, #30
 800707a:	f100 8102 	bmi.w	8007282 <_printf_float+0x44e>
 800707e:	68e0      	ldr	r0, [r4, #12]
 8007080:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007082:	4298      	cmp	r0, r3
 8007084:	bfb8      	it	lt
 8007086:	4618      	movlt	r0, r3
 8007088:	e731      	b.n	8006eee <_printf_float+0xba>
 800708a:	2301      	movs	r3, #1
 800708c:	464a      	mov	r2, r9
 800708e:	4631      	mov	r1, r6
 8007090:	4628      	mov	r0, r5
 8007092:	47b8      	blx	r7
 8007094:	3001      	adds	r0, #1
 8007096:	f43f af28 	beq.w	8006eea <_printf_float+0xb6>
 800709a:	f108 0801 	add.w	r8, r8, #1
 800709e:	e7e6      	b.n	800706e <_printf_float+0x23a>
 80070a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	dc38      	bgt.n	8007118 <_printf_float+0x2e4>
 80070a6:	2301      	movs	r3, #1
 80070a8:	4631      	mov	r1, r6
 80070aa:	4628      	mov	r0, r5
 80070ac:	4a19      	ldr	r2, [pc, #100]	; (8007114 <_printf_float+0x2e0>)
 80070ae:	47b8      	blx	r7
 80070b0:	3001      	adds	r0, #1
 80070b2:	f43f af1a 	beq.w	8006eea <_printf_float+0xb6>
 80070b6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80070ba:	4313      	orrs	r3, r2
 80070bc:	d102      	bne.n	80070c4 <_printf_float+0x290>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	07d9      	lsls	r1, r3, #31
 80070c2:	d5d8      	bpl.n	8007076 <_printf_float+0x242>
 80070c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070c8:	4631      	mov	r1, r6
 80070ca:	4628      	mov	r0, r5
 80070cc:	47b8      	blx	r7
 80070ce:	3001      	adds	r0, #1
 80070d0:	f43f af0b 	beq.w	8006eea <_printf_float+0xb6>
 80070d4:	f04f 0900 	mov.w	r9, #0
 80070d8:	f104 0a1a 	add.w	sl, r4, #26
 80070dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070de:	425b      	negs	r3, r3
 80070e0:	454b      	cmp	r3, r9
 80070e2:	dc01      	bgt.n	80070e8 <_printf_float+0x2b4>
 80070e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070e6:	e794      	b.n	8007012 <_printf_float+0x1de>
 80070e8:	2301      	movs	r3, #1
 80070ea:	4652      	mov	r2, sl
 80070ec:	4631      	mov	r1, r6
 80070ee:	4628      	mov	r0, r5
 80070f0:	47b8      	blx	r7
 80070f2:	3001      	adds	r0, #1
 80070f4:	f43f aef9 	beq.w	8006eea <_printf_float+0xb6>
 80070f8:	f109 0901 	add.w	r9, r9, #1
 80070fc:	e7ee      	b.n	80070dc <_printf_float+0x2a8>
 80070fe:	bf00      	nop
 8007100:	7fefffff 	.word	0x7fefffff
 8007104:	0800b280 	.word	0x0800b280
 8007108:	0800b284 	.word	0x0800b284
 800710c:	0800b28c 	.word	0x0800b28c
 8007110:	0800b288 	.word	0x0800b288
 8007114:	0800b290 	.word	0x0800b290
 8007118:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800711a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800711c:	429a      	cmp	r2, r3
 800711e:	bfa8      	it	ge
 8007120:	461a      	movge	r2, r3
 8007122:	2a00      	cmp	r2, #0
 8007124:	4691      	mov	r9, r2
 8007126:	dc37      	bgt.n	8007198 <_printf_float+0x364>
 8007128:	f04f 0b00 	mov.w	fp, #0
 800712c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007130:	f104 021a 	add.w	r2, r4, #26
 8007134:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007138:	ebaa 0309 	sub.w	r3, sl, r9
 800713c:	455b      	cmp	r3, fp
 800713e:	dc33      	bgt.n	80071a8 <_printf_float+0x374>
 8007140:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007144:	429a      	cmp	r2, r3
 8007146:	db3b      	blt.n	80071c0 <_printf_float+0x38c>
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	07da      	lsls	r2, r3, #31
 800714c:	d438      	bmi.n	80071c0 <_printf_float+0x38c>
 800714e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007150:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007152:	eba3 020a 	sub.w	r2, r3, sl
 8007156:	eba3 0901 	sub.w	r9, r3, r1
 800715a:	4591      	cmp	r9, r2
 800715c:	bfa8      	it	ge
 800715e:	4691      	movge	r9, r2
 8007160:	f1b9 0f00 	cmp.w	r9, #0
 8007164:	dc34      	bgt.n	80071d0 <_printf_float+0x39c>
 8007166:	f04f 0800 	mov.w	r8, #0
 800716a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800716e:	f104 0a1a 	add.w	sl, r4, #26
 8007172:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007176:	1a9b      	subs	r3, r3, r2
 8007178:	eba3 0309 	sub.w	r3, r3, r9
 800717c:	4543      	cmp	r3, r8
 800717e:	f77f af7a 	ble.w	8007076 <_printf_float+0x242>
 8007182:	2301      	movs	r3, #1
 8007184:	4652      	mov	r2, sl
 8007186:	4631      	mov	r1, r6
 8007188:	4628      	mov	r0, r5
 800718a:	47b8      	blx	r7
 800718c:	3001      	adds	r0, #1
 800718e:	f43f aeac 	beq.w	8006eea <_printf_float+0xb6>
 8007192:	f108 0801 	add.w	r8, r8, #1
 8007196:	e7ec      	b.n	8007172 <_printf_float+0x33e>
 8007198:	4613      	mov	r3, r2
 800719a:	4631      	mov	r1, r6
 800719c:	4642      	mov	r2, r8
 800719e:	4628      	mov	r0, r5
 80071a0:	47b8      	blx	r7
 80071a2:	3001      	adds	r0, #1
 80071a4:	d1c0      	bne.n	8007128 <_printf_float+0x2f4>
 80071a6:	e6a0      	b.n	8006eea <_printf_float+0xb6>
 80071a8:	2301      	movs	r3, #1
 80071aa:	4631      	mov	r1, r6
 80071ac:	4628      	mov	r0, r5
 80071ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80071b0:	47b8      	blx	r7
 80071b2:	3001      	adds	r0, #1
 80071b4:	f43f ae99 	beq.w	8006eea <_printf_float+0xb6>
 80071b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80071ba:	f10b 0b01 	add.w	fp, fp, #1
 80071be:	e7b9      	b.n	8007134 <_printf_float+0x300>
 80071c0:	4631      	mov	r1, r6
 80071c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071c6:	4628      	mov	r0, r5
 80071c8:	47b8      	blx	r7
 80071ca:	3001      	adds	r0, #1
 80071cc:	d1bf      	bne.n	800714e <_printf_float+0x31a>
 80071ce:	e68c      	b.n	8006eea <_printf_float+0xb6>
 80071d0:	464b      	mov	r3, r9
 80071d2:	4631      	mov	r1, r6
 80071d4:	4628      	mov	r0, r5
 80071d6:	eb08 020a 	add.w	r2, r8, sl
 80071da:	47b8      	blx	r7
 80071dc:	3001      	adds	r0, #1
 80071de:	d1c2      	bne.n	8007166 <_printf_float+0x332>
 80071e0:	e683      	b.n	8006eea <_printf_float+0xb6>
 80071e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071e4:	2a01      	cmp	r2, #1
 80071e6:	dc01      	bgt.n	80071ec <_printf_float+0x3b8>
 80071e8:	07db      	lsls	r3, r3, #31
 80071ea:	d537      	bpl.n	800725c <_printf_float+0x428>
 80071ec:	2301      	movs	r3, #1
 80071ee:	4642      	mov	r2, r8
 80071f0:	4631      	mov	r1, r6
 80071f2:	4628      	mov	r0, r5
 80071f4:	47b8      	blx	r7
 80071f6:	3001      	adds	r0, #1
 80071f8:	f43f ae77 	beq.w	8006eea <_printf_float+0xb6>
 80071fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007200:	4631      	mov	r1, r6
 8007202:	4628      	mov	r0, r5
 8007204:	47b8      	blx	r7
 8007206:	3001      	adds	r0, #1
 8007208:	f43f ae6f 	beq.w	8006eea <_printf_float+0xb6>
 800720c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007210:	2200      	movs	r2, #0
 8007212:	2300      	movs	r3, #0
 8007214:	f7f9 fbc8 	bl	80009a8 <__aeabi_dcmpeq>
 8007218:	b9d8      	cbnz	r0, 8007252 <_printf_float+0x41e>
 800721a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800721c:	f108 0201 	add.w	r2, r8, #1
 8007220:	3b01      	subs	r3, #1
 8007222:	4631      	mov	r1, r6
 8007224:	4628      	mov	r0, r5
 8007226:	47b8      	blx	r7
 8007228:	3001      	adds	r0, #1
 800722a:	d10e      	bne.n	800724a <_printf_float+0x416>
 800722c:	e65d      	b.n	8006eea <_printf_float+0xb6>
 800722e:	2301      	movs	r3, #1
 8007230:	464a      	mov	r2, r9
 8007232:	4631      	mov	r1, r6
 8007234:	4628      	mov	r0, r5
 8007236:	47b8      	blx	r7
 8007238:	3001      	adds	r0, #1
 800723a:	f43f ae56 	beq.w	8006eea <_printf_float+0xb6>
 800723e:	f108 0801 	add.w	r8, r8, #1
 8007242:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007244:	3b01      	subs	r3, #1
 8007246:	4543      	cmp	r3, r8
 8007248:	dcf1      	bgt.n	800722e <_printf_float+0x3fa>
 800724a:	4653      	mov	r3, sl
 800724c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007250:	e6e0      	b.n	8007014 <_printf_float+0x1e0>
 8007252:	f04f 0800 	mov.w	r8, #0
 8007256:	f104 091a 	add.w	r9, r4, #26
 800725a:	e7f2      	b.n	8007242 <_printf_float+0x40e>
 800725c:	2301      	movs	r3, #1
 800725e:	4642      	mov	r2, r8
 8007260:	e7df      	b.n	8007222 <_printf_float+0x3ee>
 8007262:	2301      	movs	r3, #1
 8007264:	464a      	mov	r2, r9
 8007266:	4631      	mov	r1, r6
 8007268:	4628      	mov	r0, r5
 800726a:	47b8      	blx	r7
 800726c:	3001      	adds	r0, #1
 800726e:	f43f ae3c 	beq.w	8006eea <_printf_float+0xb6>
 8007272:	f108 0801 	add.w	r8, r8, #1
 8007276:	68e3      	ldr	r3, [r4, #12]
 8007278:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800727a:	1a5b      	subs	r3, r3, r1
 800727c:	4543      	cmp	r3, r8
 800727e:	dcf0      	bgt.n	8007262 <_printf_float+0x42e>
 8007280:	e6fd      	b.n	800707e <_printf_float+0x24a>
 8007282:	f04f 0800 	mov.w	r8, #0
 8007286:	f104 0919 	add.w	r9, r4, #25
 800728a:	e7f4      	b.n	8007276 <_printf_float+0x442>

0800728c <_printf_common>:
 800728c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007290:	4616      	mov	r6, r2
 8007292:	4699      	mov	r9, r3
 8007294:	688a      	ldr	r2, [r1, #8]
 8007296:	690b      	ldr	r3, [r1, #16]
 8007298:	4607      	mov	r7, r0
 800729a:	4293      	cmp	r3, r2
 800729c:	bfb8      	it	lt
 800729e:	4613      	movlt	r3, r2
 80072a0:	6033      	str	r3, [r6, #0]
 80072a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072a6:	460c      	mov	r4, r1
 80072a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072ac:	b10a      	cbz	r2, 80072b2 <_printf_common+0x26>
 80072ae:	3301      	adds	r3, #1
 80072b0:	6033      	str	r3, [r6, #0]
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	0699      	lsls	r1, r3, #26
 80072b6:	bf42      	ittt	mi
 80072b8:	6833      	ldrmi	r3, [r6, #0]
 80072ba:	3302      	addmi	r3, #2
 80072bc:	6033      	strmi	r3, [r6, #0]
 80072be:	6825      	ldr	r5, [r4, #0]
 80072c0:	f015 0506 	ands.w	r5, r5, #6
 80072c4:	d106      	bne.n	80072d4 <_printf_common+0x48>
 80072c6:	f104 0a19 	add.w	sl, r4, #25
 80072ca:	68e3      	ldr	r3, [r4, #12]
 80072cc:	6832      	ldr	r2, [r6, #0]
 80072ce:	1a9b      	subs	r3, r3, r2
 80072d0:	42ab      	cmp	r3, r5
 80072d2:	dc28      	bgt.n	8007326 <_printf_common+0x9a>
 80072d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072d8:	1e13      	subs	r3, r2, #0
 80072da:	6822      	ldr	r2, [r4, #0]
 80072dc:	bf18      	it	ne
 80072de:	2301      	movne	r3, #1
 80072e0:	0692      	lsls	r2, r2, #26
 80072e2:	d42d      	bmi.n	8007340 <_printf_common+0xb4>
 80072e4:	4649      	mov	r1, r9
 80072e6:	4638      	mov	r0, r7
 80072e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072ec:	47c0      	blx	r8
 80072ee:	3001      	adds	r0, #1
 80072f0:	d020      	beq.n	8007334 <_printf_common+0xa8>
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	68e5      	ldr	r5, [r4, #12]
 80072f6:	f003 0306 	and.w	r3, r3, #6
 80072fa:	2b04      	cmp	r3, #4
 80072fc:	bf18      	it	ne
 80072fe:	2500      	movne	r5, #0
 8007300:	6832      	ldr	r2, [r6, #0]
 8007302:	f04f 0600 	mov.w	r6, #0
 8007306:	68a3      	ldr	r3, [r4, #8]
 8007308:	bf08      	it	eq
 800730a:	1aad      	subeq	r5, r5, r2
 800730c:	6922      	ldr	r2, [r4, #16]
 800730e:	bf08      	it	eq
 8007310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007314:	4293      	cmp	r3, r2
 8007316:	bfc4      	itt	gt
 8007318:	1a9b      	subgt	r3, r3, r2
 800731a:	18ed      	addgt	r5, r5, r3
 800731c:	341a      	adds	r4, #26
 800731e:	42b5      	cmp	r5, r6
 8007320:	d11a      	bne.n	8007358 <_printf_common+0xcc>
 8007322:	2000      	movs	r0, #0
 8007324:	e008      	b.n	8007338 <_printf_common+0xac>
 8007326:	2301      	movs	r3, #1
 8007328:	4652      	mov	r2, sl
 800732a:	4649      	mov	r1, r9
 800732c:	4638      	mov	r0, r7
 800732e:	47c0      	blx	r8
 8007330:	3001      	adds	r0, #1
 8007332:	d103      	bne.n	800733c <_printf_common+0xb0>
 8007334:	f04f 30ff 	mov.w	r0, #4294967295
 8007338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800733c:	3501      	adds	r5, #1
 800733e:	e7c4      	b.n	80072ca <_printf_common+0x3e>
 8007340:	2030      	movs	r0, #48	; 0x30
 8007342:	18e1      	adds	r1, r4, r3
 8007344:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007348:	1c5a      	adds	r2, r3, #1
 800734a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800734e:	4422      	add	r2, r4
 8007350:	3302      	adds	r3, #2
 8007352:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007356:	e7c5      	b.n	80072e4 <_printf_common+0x58>
 8007358:	2301      	movs	r3, #1
 800735a:	4622      	mov	r2, r4
 800735c:	4649      	mov	r1, r9
 800735e:	4638      	mov	r0, r7
 8007360:	47c0      	blx	r8
 8007362:	3001      	adds	r0, #1
 8007364:	d0e6      	beq.n	8007334 <_printf_common+0xa8>
 8007366:	3601      	adds	r6, #1
 8007368:	e7d9      	b.n	800731e <_printf_common+0x92>
	...

0800736c <_printf_i>:
 800736c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007370:	7e0f      	ldrb	r7, [r1, #24]
 8007372:	4691      	mov	r9, r2
 8007374:	2f78      	cmp	r7, #120	; 0x78
 8007376:	4680      	mov	r8, r0
 8007378:	460c      	mov	r4, r1
 800737a:	469a      	mov	sl, r3
 800737c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800737e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007382:	d807      	bhi.n	8007394 <_printf_i+0x28>
 8007384:	2f62      	cmp	r7, #98	; 0x62
 8007386:	d80a      	bhi.n	800739e <_printf_i+0x32>
 8007388:	2f00      	cmp	r7, #0
 800738a:	f000 80d9 	beq.w	8007540 <_printf_i+0x1d4>
 800738e:	2f58      	cmp	r7, #88	; 0x58
 8007390:	f000 80a4 	beq.w	80074dc <_printf_i+0x170>
 8007394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007398:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800739c:	e03a      	b.n	8007414 <_printf_i+0xa8>
 800739e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073a2:	2b15      	cmp	r3, #21
 80073a4:	d8f6      	bhi.n	8007394 <_printf_i+0x28>
 80073a6:	a101      	add	r1, pc, #4	; (adr r1, 80073ac <_printf_i+0x40>)
 80073a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073ac:	08007405 	.word	0x08007405
 80073b0:	08007419 	.word	0x08007419
 80073b4:	08007395 	.word	0x08007395
 80073b8:	08007395 	.word	0x08007395
 80073bc:	08007395 	.word	0x08007395
 80073c0:	08007395 	.word	0x08007395
 80073c4:	08007419 	.word	0x08007419
 80073c8:	08007395 	.word	0x08007395
 80073cc:	08007395 	.word	0x08007395
 80073d0:	08007395 	.word	0x08007395
 80073d4:	08007395 	.word	0x08007395
 80073d8:	08007527 	.word	0x08007527
 80073dc:	08007449 	.word	0x08007449
 80073e0:	08007509 	.word	0x08007509
 80073e4:	08007395 	.word	0x08007395
 80073e8:	08007395 	.word	0x08007395
 80073ec:	08007549 	.word	0x08007549
 80073f0:	08007395 	.word	0x08007395
 80073f4:	08007449 	.word	0x08007449
 80073f8:	08007395 	.word	0x08007395
 80073fc:	08007395 	.word	0x08007395
 8007400:	08007511 	.word	0x08007511
 8007404:	682b      	ldr	r3, [r5, #0]
 8007406:	1d1a      	adds	r2, r3, #4
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	602a      	str	r2, [r5, #0]
 800740c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007414:	2301      	movs	r3, #1
 8007416:	e0a4      	b.n	8007562 <_printf_i+0x1f6>
 8007418:	6820      	ldr	r0, [r4, #0]
 800741a:	6829      	ldr	r1, [r5, #0]
 800741c:	0606      	lsls	r6, r0, #24
 800741e:	f101 0304 	add.w	r3, r1, #4
 8007422:	d50a      	bpl.n	800743a <_printf_i+0xce>
 8007424:	680e      	ldr	r6, [r1, #0]
 8007426:	602b      	str	r3, [r5, #0]
 8007428:	2e00      	cmp	r6, #0
 800742a:	da03      	bge.n	8007434 <_printf_i+0xc8>
 800742c:	232d      	movs	r3, #45	; 0x2d
 800742e:	4276      	negs	r6, r6
 8007430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007434:	230a      	movs	r3, #10
 8007436:	485e      	ldr	r0, [pc, #376]	; (80075b0 <_printf_i+0x244>)
 8007438:	e019      	b.n	800746e <_printf_i+0x102>
 800743a:	680e      	ldr	r6, [r1, #0]
 800743c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007440:	602b      	str	r3, [r5, #0]
 8007442:	bf18      	it	ne
 8007444:	b236      	sxthne	r6, r6
 8007446:	e7ef      	b.n	8007428 <_printf_i+0xbc>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	6820      	ldr	r0, [r4, #0]
 800744c:	1d19      	adds	r1, r3, #4
 800744e:	6029      	str	r1, [r5, #0]
 8007450:	0601      	lsls	r1, r0, #24
 8007452:	d501      	bpl.n	8007458 <_printf_i+0xec>
 8007454:	681e      	ldr	r6, [r3, #0]
 8007456:	e002      	b.n	800745e <_printf_i+0xf2>
 8007458:	0646      	lsls	r6, r0, #25
 800745a:	d5fb      	bpl.n	8007454 <_printf_i+0xe8>
 800745c:	881e      	ldrh	r6, [r3, #0]
 800745e:	2f6f      	cmp	r7, #111	; 0x6f
 8007460:	bf0c      	ite	eq
 8007462:	2308      	moveq	r3, #8
 8007464:	230a      	movne	r3, #10
 8007466:	4852      	ldr	r0, [pc, #328]	; (80075b0 <_printf_i+0x244>)
 8007468:	2100      	movs	r1, #0
 800746a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800746e:	6865      	ldr	r5, [r4, #4]
 8007470:	2d00      	cmp	r5, #0
 8007472:	bfa8      	it	ge
 8007474:	6821      	ldrge	r1, [r4, #0]
 8007476:	60a5      	str	r5, [r4, #8]
 8007478:	bfa4      	itt	ge
 800747a:	f021 0104 	bicge.w	r1, r1, #4
 800747e:	6021      	strge	r1, [r4, #0]
 8007480:	b90e      	cbnz	r6, 8007486 <_printf_i+0x11a>
 8007482:	2d00      	cmp	r5, #0
 8007484:	d04d      	beq.n	8007522 <_printf_i+0x1b6>
 8007486:	4615      	mov	r5, r2
 8007488:	fbb6 f1f3 	udiv	r1, r6, r3
 800748c:	fb03 6711 	mls	r7, r3, r1, r6
 8007490:	5dc7      	ldrb	r7, [r0, r7]
 8007492:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007496:	4637      	mov	r7, r6
 8007498:	42bb      	cmp	r3, r7
 800749a:	460e      	mov	r6, r1
 800749c:	d9f4      	bls.n	8007488 <_printf_i+0x11c>
 800749e:	2b08      	cmp	r3, #8
 80074a0:	d10b      	bne.n	80074ba <_printf_i+0x14e>
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	07de      	lsls	r6, r3, #31
 80074a6:	d508      	bpl.n	80074ba <_printf_i+0x14e>
 80074a8:	6923      	ldr	r3, [r4, #16]
 80074aa:	6861      	ldr	r1, [r4, #4]
 80074ac:	4299      	cmp	r1, r3
 80074ae:	bfde      	ittt	le
 80074b0:	2330      	movle	r3, #48	; 0x30
 80074b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074ba:	1b52      	subs	r2, r2, r5
 80074bc:	6122      	str	r2, [r4, #16]
 80074be:	464b      	mov	r3, r9
 80074c0:	4621      	mov	r1, r4
 80074c2:	4640      	mov	r0, r8
 80074c4:	f8cd a000 	str.w	sl, [sp]
 80074c8:	aa03      	add	r2, sp, #12
 80074ca:	f7ff fedf 	bl	800728c <_printf_common>
 80074ce:	3001      	adds	r0, #1
 80074d0:	d14c      	bne.n	800756c <_printf_i+0x200>
 80074d2:	f04f 30ff 	mov.w	r0, #4294967295
 80074d6:	b004      	add	sp, #16
 80074d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074dc:	4834      	ldr	r0, [pc, #208]	; (80075b0 <_printf_i+0x244>)
 80074de:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074e2:	6829      	ldr	r1, [r5, #0]
 80074e4:	6823      	ldr	r3, [r4, #0]
 80074e6:	f851 6b04 	ldr.w	r6, [r1], #4
 80074ea:	6029      	str	r1, [r5, #0]
 80074ec:	061d      	lsls	r5, r3, #24
 80074ee:	d514      	bpl.n	800751a <_printf_i+0x1ae>
 80074f0:	07df      	lsls	r7, r3, #31
 80074f2:	bf44      	itt	mi
 80074f4:	f043 0320 	orrmi.w	r3, r3, #32
 80074f8:	6023      	strmi	r3, [r4, #0]
 80074fa:	b91e      	cbnz	r6, 8007504 <_printf_i+0x198>
 80074fc:	6823      	ldr	r3, [r4, #0]
 80074fe:	f023 0320 	bic.w	r3, r3, #32
 8007502:	6023      	str	r3, [r4, #0]
 8007504:	2310      	movs	r3, #16
 8007506:	e7af      	b.n	8007468 <_printf_i+0xfc>
 8007508:	6823      	ldr	r3, [r4, #0]
 800750a:	f043 0320 	orr.w	r3, r3, #32
 800750e:	6023      	str	r3, [r4, #0]
 8007510:	2378      	movs	r3, #120	; 0x78
 8007512:	4828      	ldr	r0, [pc, #160]	; (80075b4 <_printf_i+0x248>)
 8007514:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007518:	e7e3      	b.n	80074e2 <_printf_i+0x176>
 800751a:	0659      	lsls	r1, r3, #25
 800751c:	bf48      	it	mi
 800751e:	b2b6      	uxthmi	r6, r6
 8007520:	e7e6      	b.n	80074f0 <_printf_i+0x184>
 8007522:	4615      	mov	r5, r2
 8007524:	e7bb      	b.n	800749e <_printf_i+0x132>
 8007526:	682b      	ldr	r3, [r5, #0]
 8007528:	6826      	ldr	r6, [r4, #0]
 800752a:	1d18      	adds	r0, r3, #4
 800752c:	6961      	ldr	r1, [r4, #20]
 800752e:	6028      	str	r0, [r5, #0]
 8007530:	0635      	lsls	r5, r6, #24
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	d501      	bpl.n	800753a <_printf_i+0x1ce>
 8007536:	6019      	str	r1, [r3, #0]
 8007538:	e002      	b.n	8007540 <_printf_i+0x1d4>
 800753a:	0670      	lsls	r0, r6, #25
 800753c:	d5fb      	bpl.n	8007536 <_printf_i+0x1ca>
 800753e:	8019      	strh	r1, [r3, #0]
 8007540:	2300      	movs	r3, #0
 8007542:	4615      	mov	r5, r2
 8007544:	6123      	str	r3, [r4, #16]
 8007546:	e7ba      	b.n	80074be <_printf_i+0x152>
 8007548:	682b      	ldr	r3, [r5, #0]
 800754a:	2100      	movs	r1, #0
 800754c:	1d1a      	adds	r2, r3, #4
 800754e:	602a      	str	r2, [r5, #0]
 8007550:	681d      	ldr	r5, [r3, #0]
 8007552:	6862      	ldr	r2, [r4, #4]
 8007554:	4628      	mov	r0, r5
 8007556:	f002 f879 	bl	800964c <memchr>
 800755a:	b108      	cbz	r0, 8007560 <_printf_i+0x1f4>
 800755c:	1b40      	subs	r0, r0, r5
 800755e:	6060      	str	r0, [r4, #4]
 8007560:	6863      	ldr	r3, [r4, #4]
 8007562:	6123      	str	r3, [r4, #16]
 8007564:	2300      	movs	r3, #0
 8007566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800756a:	e7a8      	b.n	80074be <_printf_i+0x152>
 800756c:	462a      	mov	r2, r5
 800756e:	4649      	mov	r1, r9
 8007570:	4640      	mov	r0, r8
 8007572:	6923      	ldr	r3, [r4, #16]
 8007574:	47d0      	blx	sl
 8007576:	3001      	adds	r0, #1
 8007578:	d0ab      	beq.n	80074d2 <_printf_i+0x166>
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	079b      	lsls	r3, r3, #30
 800757e:	d413      	bmi.n	80075a8 <_printf_i+0x23c>
 8007580:	68e0      	ldr	r0, [r4, #12]
 8007582:	9b03      	ldr	r3, [sp, #12]
 8007584:	4298      	cmp	r0, r3
 8007586:	bfb8      	it	lt
 8007588:	4618      	movlt	r0, r3
 800758a:	e7a4      	b.n	80074d6 <_printf_i+0x16a>
 800758c:	2301      	movs	r3, #1
 800758e:	4632      	mov	r2, r6
 8007590:	4649      	mov	r1, r9
 8007592:	4640      	mov	r0, r8
 8007594:	47d0      	blx	sl
 8007596:	3001      	adds	r0, #1
 8007598:	d09b      	beq.n	80074d2 <_printf_i+0x166>
 800759a:	3501      	adds	r5, #1
 800759c:	68e3      	ldr	r3, [r4, #12]
 800759e:	9903      	ldr	r1, [sp, #12]
 80075a0:	1a5b      	subs	r3, r3, r1
 80075a2:	42ab      	cmp	r3, r5
 80075a4:	dcf2      	bgt.n	800758c <_printf_i+0x220>
 80075a6:	e7eb      	b.n	8007580 <_printf_i+0x214>
 80075a8:	2500      	movs	r5, #0
 80075aa:	f104 0619 	add.w	r6, r4, #25
 80075ae:	e7f5      	b.n	800759c <_printf_i+0x230>
 80075b0:	0800b292 	.word	0x0800b292
 80075b4:	0800b2a3 	.word	0x0800b2a3

080075b8 <siprintf>:
 80075b8:	b40e      	push	{r1, r2, r3}
 80075ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80075be:	b500      	push	{lr}
 80075c0:	b09c      	sub	sp, #112	; 0x70
 80075c2:	ab1d      	add	r3, sp, #116	; 0x74
 80075c4:	9002      	str	r0, [sp, #8]
 80075c6:	9006      	str	r0, [sp, #24]
 80075c8:	9107      	str	r1, [sp, #28]
 80075ca:	9104      	str	r1, [sp, #16]
 80075cc:	4808      	ldr	r0, [pc, #32]	; (80075f0 <siprintf+0x38>)
 80075ce:	4909      	ldr	r1, [pc, #36]	; (80075f4 <siprintf+0x3c>)
 80075d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80075d4:	9105      	str	r1, [sp, #20]
 80075d6:	6800      	ldr	r0, [r0, #0]
 80075d8:	a902      	add	r1, sp, #8
 80075da:	9301      	str	r3, [sp, #4]
 80075dc:	f002 fe56 	bl	800a28c <_svfiprintf_r>
 80075e0:	2200      	movs	r2, #0
 80075e2:	9b02      	ldr	r3, [sp, #8]
 80075e4:	701a      	strb	r2, [r3, #0]
 80075e6:	b01c      	add	sp, #112	; 0x70
 80075e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80075ec:	b003      	add	sp, #12
 80075ee:	4770      	bx	lr
 80075f0:	20000018 	.word	0x20000018
 80075f4:	ffff0208 	.word	0xffff0208

080075f8 <strncmp>:
 80075f8:	4603      	mov	r3, r0
 80075fa:	b510      	push	{r4, lr}
 80075fc:	b172      	cbz	r2, 800761c <strncmp+0x24>
 80075fe:	3901      	subs	r1, #1
 8007600:	1884      	adds	r4, r0, r2
 8007602:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007606:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800760a:	4290      	cmp	r0, r2
 800760c:	d101      	bne.n	8007612 <strncmp+0x1a>
 800760e:	42a3      	cmp	r3, r4
 8007610:	d101      	bne.n	8007616 <strncmp+0x1e>
 8007612:	1a80      	subs	r0, r0, r2
 8007614:	bd10      	pop	{r4, pc}
 8007616:	2800      	cmp	r0, #0
 8007618:	d1f3      	bne.n	8007602 <strncmp+0xa>
 800761a:	e7fa      	b.n	8007612 <strncmp+0x1a>
 800761c:	4610      	mov	r0, r2
 800761e:	e7f9      	b.n	8007614 <strncmp+0x1c>

08007620 <sulp>:
 8007620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007624:	460f      	mov	r7, r1
 8007626:	4690      	mov	r8, r2
 8007628:	f002 fb9c 	bl	8009d64 <__ulp>
 800762c:	4604      	mov	r4, r0
 800762e:	460d      	mov	r5, r1
 8007630:	f1b8 0f00 	cmp.w	r8, #0
 8007634:	d011      	beq.n	800765a <sulp+0x3a>
 8007636:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800763a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800763e:	2b00      	cmp	r3, #0
 8007640:	dd0b      	ble.n	800765a <sulp+0x3a>
 8007642:	2400      	movs	r4, #0
 8007644:	051b      	lsls	r3, r3, #20
 8007646:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800764a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800764e:	4622      	mov	r2, r4
 8007650:	462b      	mov	r3, r5
 8007652:	f7f8 ff41 	bl	80004d8 <__aeabi_dmul>
 8007656:	4604      	mov	r4, r0
 8007658:	460d      	mov	r5, r1
 800765a:	4620      	mov	r0, r4
 800765c:	4629      	mov	r1, r5
 800765e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007662:	0000      	movs	r0, r0
 8007664:	0000      	movs	r0, r0
	...

08007668 <_strtod_l>:
 8007668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766c:	469b      	mov	fp, r3
 800766e:	2300      	movs	r3, #0
 8007670:	b09f      	sub	sp, #124	; 0x7c
 8007672:	931a      	str	r3, [sp, #104]	; 0x68
 8007674:	4b9e      	ldr	r3, [pc, #632]	; (80078f0 <_strtod_l+0x288>)
 8007676:	4682      	mov	sl, r0
 8007678:	681f      	ldr	r7, [r3, #0]
 800767a:	460e      	mov	r6, r1
 800767c:	4638      	mov	r0, r7
 800767e:	9215      	str	r2, [sp, #84]	; 0x54
 8007680:	f7f8 fd66 	bl	8000150 <strlen>
 8007684:	f04f 0800 	mov.w	r8, #0
 8007688:	4604      	mov	r4, r0
 800768a:	f04f 0900 	mov.w	r9, #0
 800768e:	9619      	str	r6, [sp, #100]	; 0x64
 8007690:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007692:	781a      	ldrb	r2, [r3, #0]
 8007694:	2a2b      	cmp	r2, #43	; 0x2b
 8007696:	d04c      	beq.n	8007732 <_strtod_l+0xca>
 8007698:	d83a      	bhi.n	8007710 <_strtod_l+0xa8>
 800769a:	2a0d      	cmp	r2, #13
 800769c:	d833      	bhi.n	8007706 <_strtod_l+0x9e>
 800769e:	2a08      	cmp	r2, #8
 80076a0:	d833      	bhi.n	800770a <_strtod_l+0xa2>
 80076a2:	2a00      	cmp	r2, #0
 80076a4:	d03d      	beq.n	8007722 <_strtod_l+0xba>
 80076a6:	2300      	movs	r3, #0
 80076a8:	930a      	str	r3, [sp, #40]	; 0x28
 80076aa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80076ac:	782b      	ldrb	r3, [r5, #0]
 80076ae:	2b30      	cmp	r3, #48	; 0x30
 80076b0:	f040 80aa 	bne.w	8007808 <_strtod_l+0x1a0>
 80076b4:	786b      	ldrb	r3, [r5, #1]
 80076b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80076ba:	2b58      	cmp	r3, #88	; 0x58
 80076bc:	d166      	bne.n	800778c <_strtod_l+0x124>
 80076be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c0:	4650      	mov	r0, sl
 80076c2:	9301      	str	r3, [sp, #4]
 80076c4:	ab1a      	add	r3, sp, #104	; 0x68
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	4a8a      	ldr	r2, [pc, #552]	; (80078f4 <_strtod_l+0x28c>)
 80076ca:	f8cd b008 	str.w	fp, [sp, #8]
 80076ce:	ab1b      	add	r3, sp, #108	; 0x6c
 80076d0:	a919      	add	r1, sp, #100	; 0x64
 80076d2:	f001 fc9f 	bl	8009014 <__gethex>
 80076d6:	f010 0607 	ands.w	r6, r0, #7
 80076da:	4604      	mov	r4, r0
 80076dc:	d005      	beq.n	80076ea <_strtod_l+0x82>
 80076de:	2e06      	cmp	r6, #6
 80076e0:	d129      	bne.n	8007736 <_strtod_l+0xce>
 80076e2:	2300      	movs	r3, #0
 80076e4:	3501      	adds	r5, #1
 80076e6:	9519      	str	r5, [sp, #100]	; 0x64
 80076e8:	930a      	str	r3, [sp, #40]	; 0x28
 80076ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f040 858a 	bne.w	8008206 <_strtod_l+0xb9e>
 80076f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076f4:	b1d3      	cbz	r3, 800772c <_strtod_l+0xc4>
 80076f6:	4642      	mov	r2, r8
 80076f8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80076fc:	4610      	mov	r0, r2
 80076fe:	4619      	mov	r1, r3
 8007700:	b01f      	add	sp, #124	; 0x7c
 8007702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007706:	2a20      	cmp	r2, #32
 8007708:	d1cd      	bne.n	80076a6 <_strtod_l+0x3e>
 800770a:	3301      	adds	r3, #1
 800770c:	9319      	str	r3, [sp, #100]	; 0x64
 800770e:	e7bf      	b.n	8007690 <_strtod_l+0x28>
 8007710:	2a2d      	cmp	r2, #45	; 0x2d
 8007712:	d1c8      	bne.n	80076a6 <_strtod_l+0x3e>
 8007714:	2201      	movs	r2, #1
 8007716:	920a      	str	r2, [sp, #40]	; 0x28
 8007718:	1c5a      	adds	r2, r3, #1
 800771a:	9219      	str	r2, [sp, #100]	; 0x64
 800771c:	785b      	ldrb	r3, [r3, #1]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1c3      	bne.n	80076aa <_strtod_l+0x42>
 8007722:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007724:	9619      	str	r6, [sp, #100]	; 0x64
 8007726:	2b00      	cmp	r3, #0
 8007728:	f040 856b 	bne.w	8008202 <_strtod_l+0xb9a>
 800772c:	4642      	mov	r2, r8
 800772e:	464b      	mov	r3, r9
 8007730:	e7e4      	b.n	80076fc <_strtod_l+0x94>
 8007732:	2200      	movs	r2, #0
 8007734:	e7ef      	b.n	8007716 <_strtod_l+0xae>
 8007736:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007738:	b13a      	cbz	r2, 800774a <_strtod_l+0xe2>
 800773a:	2135      	movs	r1, #53	; 0x35
 800773c:	a81c      	add	r0, sp, #112	; 0x70
 800773e:	f002 fc15 	bl	8009f6c <__copybits>
 8007742:	4650      	mov	r0, sl
 8007744:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007746:	f001 ffdd 	bl	8009704 <_Bfree>
 800774a:	3e01      	subs	r6, #1
 800774c:	2e04      	cmp	r6, #4
 800774e:	d806      	bhi.n	800775e <_strtod_l+0xf6>
 8007750:	e8df f006 	tbb	[pc, r6]
 8007754:	1714030a 	.word	0x1714030a
 8007758:	0a          	.byte	0x0a
 8007759:	00          	.byte	0x00
 800775a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800775e:	0721      	lsls	r1, r4, #28
 8007760:	d5c3      	bpl.n	80076ea <_strtod_l+0x82>
 8007762:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007766:	e7c0      	b.n	80076ea <_strtod_l+0x82>
 8007768:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800776a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800776e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007772:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007776:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800777a:	e7f0      	b.n	800775e <_strtod_l+0xf6>
 800777c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80078f8 <_strtod_l+0x290>
 8007780:	e7ed      	b.n	800775e <_strtod_l+0xf6>
 8007782:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007786:	f04f 38ff 	mov.w	r8, #4294967295
 800778a:	e7e8      	b.n	800775e <_strtod_l+0xf6>
 800778c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800778e:	1c5a      	adds	r2, r3, #1
 8007790:	9219      	str	r2, [sp, #100]	; 0x64
 8007792:	785b      	ldrb	r3, [r3, #1]
 8007794:	2b30      	cmp	r3, #48	; 0x30
 8007796:	d0f9      	beq.n	800778c <_strtod_l+0x124>
 8007798:	2b00      	cmp	r3, #0
 800779a:	d0a6      	beq.n	80076ea <_strtod_l+0x82>
 800779c:	2301      	movs	r3, #1
 800779e:	9307      	str	r3, [sp, #28]
 80077a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077a2:	220a      	movs	r2, #10
 80077a4:	9308      	str	r3, [sp, #32]
 80077a6:	2300      	movs	r3, #0
 80077a8:	469b      	mov	fp, r3
 80077aa:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80077ae:	9819      	ldr	r0, [sp, #100]	; 0x64
 80077b0:	7805      	ldrb	r5, [r0, #0]
 80077b2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80077b6:	b2d9      	uxtb	r1, r3
 80077b8:	2909      	cmp	r1, #9
 80077ba:	d927      	bls.n	800780c <_strtod_l+0x1a4>
 80077bc:	4622      	mov	r2, r4
 80077be:	4639      	mov	r1, r7
 80077c0:	f7ff ff1a 	bl	80075f8 <strncmp>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d033      	beq.n	8007830 <_strtod_l+0x1c8>
 80077c8:	2000      	movs	r0, #0
 80077ca:	462a      	mov	r2, r5
 80077cc:	465c      	mov	r4, fp
 80077ce:	4603      	mov	r3, r0
 80077d0:	9004      	str	r0, [sp, #16]
 80077d2:	2a65      	cmp	r2, #101	; 0x65
 80077d4:	d001      	beq.n	80077da <_strtod_l+0x172>
 80077d6:	2a45      	cmp	r2, #69	; 0x45
 80077d8:	d114      	bne.n	8007804 <_strtod_l+0x19c>
 80077da:	b91c      	cbnz	r4, 80077e4 <_strtod_l+0x17c>
 80077dc:	9a07      	ldr	r2, [sp, #28]
 80077de:	4302      	orrs	r2, r0
 80077e0:	d09f      	beq.n	8007722 <_strtod_l+0xba>
 80077e2:	2400      	movs	r4, #0
 80077e4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80077e6:	1c72      	adds	r2, r6, #1
 80077e8:	9219      	str	r2, [sp, #100]	; 0x64
 80077ea:	7872      	ldrb	r2, [r6, #1]
 80077ec:	2a2b      	cmp	r2, #43	; 0x2b
 80077ee:	d079      	beq.n	80078e4 <_strtod_l+0x27c>
 80077f0:	2a2d      	cmp	r2, #45	; 0x2d
 80077f2:	f000 8083 	beq.w	80078fc <_strtod_l+0x294>
 80077f6:	2700      	movs	r7, #0
 80077f8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80077fc:	2909      	cmp	r1, #9
 80077fe:	f240 8083 	bls.w	8007908 <_strtod_l+0x2a0>
 8007802:	9619      	str	r6, [sp, #100]	; 0x64
 8007804:	2500      	movs	r5, #0
 8007806:	e09f      	b.n	8007948 <_strtod_l+0x2e0>
 8007808:	2300      	movs	r3, #0
 800780a:	e7c8      	b.n	800779e <_strtod_l+0x136>
 800780c:	f1bb 0f08 	cmp.w	fp, #8
 8007810:	bfd5      	itete	le
 8007812:	9906      	ldrle	r1, [sp, #24]
 8007814:	9905      	ldrgt	r1, [sp, #20]
 8007816:	fb02 3301 	mlale	r3, r2, r1, r3
 800781a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800781e:	f100 0001 	add.w	r0, r0, #1
 8007822:	bfd4      	ite	le
 8007824:	9306      	strle	r3, [sp, #24]
 8007826:	9305      	strgt	r3, [sp, #20]
 8007828:	f10b 0b01 	add.w	fp, fp, #1
 800782c:	9019      	str	r0, [sp, #100]	; 0x64
 800782e:	e7be      	b.n	80077ae <_strtod_l+0x146>
 8007830:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007832:	191a      	adds	r2, r3, r4
 8007834:	9219      	str	r2, [sp, #100]	; 0x64
 8007836:	5d1a      	ldrb	r2, [r3, r4]
 8007838:	f1bb 0f00 	cmp.w	fp, #0
 800783c:	d036      	beq.n	80078ac <_strtod_l+0x244>
 800783e:	465c      	mov	r4, fp
 8007840:	9004      	str	r0, [sp, #16]
 8007842:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007846:	2b09      	cmp	r3, #9
 8007848:	d912      	bls.n	8007870 <_strtod_l+0x208>
 800784a:	2301      	movs	r3, #1
 800784c:	e7c1      	b.n	80077d2 <_strtod_l+0x16a>
 800784e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007850:	3001      	adds	r0, #1
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	9219      	str	r2, [sp, #100]	; 0x64
 8007856:	785a      	ldrb	r2, [r3, #1]
 8007858:	2a30      	cmp	r2, #48	; 0x30
 800785a:	d0f8      	beq.n	800784e <_strtod_l+0x1e6>
 800785c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007860:	2b08      	cmp	r3, #8
 8007862:	f200 84d5 	bhi.w	8008210 <_strtod_l+0xba8>
 8007866:	9004      	str	r0, [sp, #16]
 8007868:	2000      	movs	r0, #0
 800786a:	4604      	mov	r4, r0
 800786c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800786e:	9308      	str	r3, [sp, #32]
 8007870:	3a30      	subs	r2, #48	; 0x30
 8007872:	f100 0301 	add.w	r3, r0, #1
 8007876:	d013      	beq.n	80078a0 <_strtod_l+0x238>
 8007878:	9904      	ldr	r1, [sp, #16]
 800787a:	1905      	adds	r5, r0, r4
 800787c:	4419      	add	r1, r3
 800787e:	9104      	str	r1, [sp, #16]
 8007880:	4623      	mov	r3, r4
 8007882:	210a      	movs	r1, #10
 8007884:	42ab      	cmp	r3, r5
 8007886:	d113      	bne.n	80078b0 <_strtod_l+0x248>
 8007888:	1823      	adds	r3, r4, r0
 800788a:	2b08      	cmp	r3, #8
 800788c:	f104 0401 	add.w	r4, r4, #1
 8007890:	4404      	add	r4, r0
 8007892:	dc1b      	bgt.n	80078cc <_strtod_l+0x264>
 8007894:	230a      	movs	r3, #10
 8007896:	9906      	ldr	r1, [sp, #24]
 8007898:	fb03 2301 	mla	r3, r3, r1, r2
 800789c:	9306      	str	r3, [sp, #24]
 800789e:	2300      	movs	r3, #0
 80078a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80078a2:	4618      	mov	r0, r3
 80078a4:	1c51      	adds	r1, r2, #1
 80078a6:	9119      	str	r1, [sp, #100]	; 0x64
 80078a8:	7852      	ldrb	r2, [r2, #1]
 80078aa:	e7ca      	b.n	8007842 <_strtod_l+0x1da>
 80078ac:	4658      	mov	r0, fp
 80078ae:	e7d3      	b.n	8007858 <_strtod_l+0x1f0>
 80078b0:	2b08      	cmp	r3, #8
 80078b2:	dc04      	bgt.n	80078be <_strtod_l+0x256>
 80078b4:	9f06      	ldr	r7, [sp, #24]
 80078b6:	434f      	muls	r7, r1
 80078b8:	9706      	str	r7, [sp, #24]
 80078ba:	3301      	adds	r3, #1
 80078bc:	e7e2      	b.n	8007884 <_strtod_l+0x21c>
 80078be:	1c5f      	adds	r7, r3, #1
 80078c0:	2f10      	cmp	r7, #16
 80078c2:	bfde      	ittt	le
 80078c4:	9f05      	ldrle	r7, [sp, #20]
 80078c6:	434f      	mulle	r7, r1
 80078c8:	9705      	strle	r7, [sp, #20]
 80078ca:	e7f6      	b.n	80078ba <_strtod_l+0x252>
 80078cc:	2c10      	cmp	r4, #16
 80078ce:	bfdf      	itttt	le
 80078d0:	230a      	movle	r3, #10
 80078d2:	9905      	ldrle	r1, [sp, #20]
 80078d4:	fb03 2301 	mlale	r3, r3, r1, r2
 80078d8:	9305      	strle	r3, [sp, #20]
 80078da:	e7e0      	b.n	800789e <_strtod_l+0x236>
 80078dc:	2300      	movs	r3, #0
 80078de:	9304      	str	r3, [sp, #16]
 80078e0:	2301      	movs	r3, #1
 80078e2:	e77b      	b.n	80077dc <_strtod_l+0x174>
 80078e4:	2700      	movs	r7, #0
 80078e6:	1cb2      	adds	r2, r6, #2
 80078e8:	9219      	str	r2, [sp, #100]	; 0x64
 80078ea:	78b2      	ldrb	r2, [r6, #2]
 80078ec:	e784      	b.n	80077f8 <_strtod_l+0x190>
 80078ee:	bf00      	nop
 80078f0:	0800b400 	.word	0x0800b400
 80078f4:	0800b2b4 	.word	0x0800b2b4
 80078f8:	7ff00000 	.word	0x7ff00000
 80078fc:	2701      	movs	r7, #1
 80078fe:	e7f2      	b.n	80078e6 <_strtod_l+0x27e>
 8007900:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007902:	1c51      	adds	r1, r2, #1
 8007904:	9119      	str	r1, [sp, #100]	; 0x64
 8007906:	7852      	ldrb	r2, [r2, #1]
 8007908:	2a30      	cmp	r2, #48	; 0x30
 800790a:	d0f9      	beq.n	8007900 <_strtod_l+0x298>
 800790c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007910:	2908      	cmp	r1, #8
 8007912:	f63f af77 	bhi.w	8007804 <_strtod_l+0x19c>
 8007916:	f04f 0e0a 	mov.w	lr, #10
 800791a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800791e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007920:	9209      	str	r2, [sp, #36]	; 0x24
 8007922:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007924:	1c51      	adds	r1, r2, #1
 8007926:	9119      	str	r1, [sp, #100]	; 0x64
 8007928:	7852      	ldrb	r2, [r2, #1]
 800792a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800792e:	2d09      	cmp	r5, #9
 8007930:	d935      	bls.n	800799e <_strtod_l+0x336>
 8007932:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007934:	1b49      	subs	r1, r1, r5
 8007936:	2908      	cmp	r1, #8
 8007938:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800793c:	dc02      	bgt.n	8007944 <_strtod_l+0x2dc>
 800793e:	4565      	cmp	r5, ip
 8007940:	bfa8      	it	ge
 8007942:	4665      	movge	r5, ip
 8007944:	b107      	cbz	r7, 8007948 <_strtod_l+0x2e0>
 8007946:	426d      	negs	r5, r5
 8007948:	2c00      	cmp	r4, #0
 800794a:	d14c      	bne.n	80079e6 <_strtod_l+0x37e>
 800794c:	9907      	ldr	r1, [sp, #28]
 800794e:	4301      	orrs	r1, r0
 8007950:	f47f aecb 	bne.w	80076ea <_strtod_l+0x82>
 8007954:	2b00      	cmp	r3, #0
 8007956:	f47f aee4 	bne.w	8007722 <_strtod_l+0xba>
 800795a:	2a69      	cmp	r2, #105	; 0x69
 800795c:	d026      	beq.n	80079ac <_strtod_l+0x344>
 800795e:	dc23      	bgt.n	80079a8 <_strtod_l+0x340>
 8007960:	2a49      	cmp	r2, #73	; 0x49
 8007962:	d023      	beq.n	80079ac <_strtod_l+0x344>
 8007964:	2a4e      	cmp	r2, #78	; 0x4e
 8007966:	f47f aedc 	bne.w	8007722 <_strtod_l+0xba>
 800796a:	499d      	ldr	r1, [pc, #628]	; (8007be0 <_strtod_l+0x578>)
 800796c:	a819      	add	r0, sp, #100	; 0x64
 800796e:	f001 fd9f 	bl	80094b0 <__match>
 8007972:	2800      	cmp	r0, #0
 8007974:	f43f aed5 	beq.w	8007722 <_strtod_l+0xba>
 8007978:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	2b28      	cmp	r3, #40	; 0x28
 800797e:	d12c      	bne.n	80079da <_strtod_l+0x372>
 8007980:	4998      	ldr	r1, [pc, #608]	; (8007be4 <_strtod_l+0x57c>)
 8007982:	aa1c      	add	r2, sp, #112	; 0x70
 8007984:	a819      	add	r0, sp, #100	; 0x64
 8007986:	f001 fda7 	bl	80094d8 <__hexnan>
 800798a:	2805      	cmp	r0, #5
 800798c:	d125      	bne.n	80079da <_strtod_l+0x372>
 800798e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007990:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007994:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007998:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800799c:	e6a5      	b.n	80076ea <_strtod_l+0x82>
 800799e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80079a2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80079a6:	e7bc      	b.n	8007922 <_strtod_l+0x2ba>
 80079a8:	2a6e      	cmp	r2, #110	; 0x6e
 80079aa:	e7dc      	b.n	8007966 <_strtod_l+0x2fe>
 80079ac:	498e      	ldr	r1, [pc, #568]	; (8007be8 <_strtod_l+0x580>)
 80079ae:	a819      	add	r0, sp, #100	; 0x64
 80079b0:	f001 fd7e 	bl	80094b0 <__match>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	f43f aeb4 	beq.w	8007722 <_strtod_l+0xba>
 80079ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079bc:	498b      	ldr	r1, [pc, #556]	; (8007bec <_strtod_l+0x584>)
 80079be:	3b01      	subs	r3, #1
 80079c0:	a819      	add	r0, sp, #100	; 0x64
 80079c2:	9319      	str	r3, [sp, #100]	; 0x64
 80079c4:	f001 fd74 	bl	80094b0 <__match>
 80079c8:	b910      	cbnz	r0, 80079d0 <_strtod_l+0x368>
 80079ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079cc:	3301      	adds	r3, #1
 80079ce:	9319      	str	r3, [sp, #100]	; 0x64
 80079d0:	f04f 0800 	mov.w	r8, #0
 80079d4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007bf0 <_strtod_l+0x588>
 80079d8:	e687      	b.n	80076ea <_strtod_l+0x82>
 80079da:	4886      	ldr	r0, [pc, #536]	; (8007bf4 <_strtod_l+0x58c>)
 80079dc:	f002 fd56 	bl	800a48c <nan>
 80079e0:	4680      	mov	r8, r0
 80079e2:	4689      	mov	r9, r1
 80079e4:	e681      	b.n	80076ea <_strtod_l+0x82>
 80079e6:	9b04      	ldr	r3, [sp, #16]
 80079e8:	f1bb 0f00 	cmp.w	fp, #0
 80079ec:	bf08      	it	eq
 80079ee:	46a3      	moveq	fp, r4
 80079f0:	1aeb      	subs	r3, r5, r3
 80079f2:	2c10      	cmp	r4, #16
 80079f4:	9806      	ldr	r0, [sp, #24]
 80079f6:	4626      	mov	r6, r4
 80079f8:	9307      	str	r3, [sp, #28]
 80079fa:	bfa8      	it	ge
 80079fc:	2610      	movge	r6, #16
 80079fe:	f7f8 fcf1 	bl	80003e4 <__aeabi_ui2d>
 8007a02:	2c09      	cmp	r4, #9
 8007a04:	4680      	mov	r8, r0
 8007a06:	4689      	mov	r9, r1
 8007a08:	dd13      	ble.n	8007a32 <_strtod_l+0x3ca>
 8007a0a:	4b7b      	ldr	r3, [pc, #492]	; (8007bf8 <_strtod_l+0x590>)
 8007a0c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007a10:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007a14:	f7f8 fd60 	bl	80004d8 <__aeabi_dmul>
 8007a18:	4680      	mov	r8, r0
 8007a1a:	9805      	ldr	r0, [sp, #20]
 8007a1c:	4689      	mov	r9, r1
 8007a1e:	f7f8 fce1 	bl	80003e4 <__aeabi_ui2d>
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	4640      	mov	r0, r8
 8007a28:	4649      	mov	r1, r9
 8007a2a:	f7f8 fb9f 	bl	800016c <__adddf3>
 8007a2e:	4680      	mov	r8, r0
 8007a30:	4689      	mov	r9, r1
 8007a32:	2c0f      	cmp	r4, #15
 8007a34:	dc36      	bgt.n	8007aa4 <_strtod_l+0x43c>
 8007a36:	9b07      	ldr	r3, [sp, #28]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f43f ae56 	beq.w	80076ea <_strtod_l+0x82>
 8007a3e:	dd22      	ble.n	8007a86 <_strtod_l+0x41e>
 8007a40:	2b16      	cmp	r3, #22
 8007a42:	dc09      	bgt.n	8007a58 <_strtod_l+0x3f0>
 8007a44:	496c      	ldr	r1, [pc, #432]	; (8007bf8 <_strtod_l+0x590>)
 8007a46:	4642      	mov	r2, r8
 8007a48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a4c:	464b      	mov	r3, r9
 8007a4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a52:	f7f8 fd41 	bl	80004d8 <__aeabi_dmul>
 8007a56:	e7c3      	b.n	80079e0 <_strtod_l+0x378>
 8007a58:	9a07      	ldr	r2, [sp, #28]
 8007a5a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	db20      	blt.n	8007aa4 <_strtod_l+0x43c>
 8007a62:	4d65      	ldr	r5, [pc, #404]	; (8007bf8 <_strtod_l+0x590>)
 8007a64:	f1c4 040f 	rsb	r4, r4, #15
 8007a68:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007a6c:	4642      	mov	r2, r8
 8007a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a72:	464b      	mov	r3, r9
 8007a74:	f7f8 fd30 	bl	80004d8 <__aeabi_dmul>
 8007a78:	9b07      	ldr	r3, [sp, #28]
 8007a7a:	1b1c      	subs	r4, r3, r4
 8007a7c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007a80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a84:	e7e5      	b.n	8007a52 <_strtod_l+0x3ea>
 8007a86:	9b07      	ldr	r3, [sp, #28]
 8007a88:	3316      	adds	r3, #22
 8007a8a:	db0b      	blt.n	8007aa4 <_strtod_l+0x43c>
 8007a8c:	9b04      	ldr	r3, [sp, #16]
 8007a8e:	4640      	mov	r0, r8
 8007a90:	1b5d      	subs	r5, r3, r5
 8007a92:	4b59      	ldr	r3, [pc, #356]	; (8007bf8 <_strtod_l+0x590>)
 8007a94:	4649      	mov	r1, r9
 8007a96:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007a9a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a9e:	f7f8 fe45 	bl	800072c <__aeabi_ddiv>
 8007aa2:	e79d      	b.n	80079e0 <_strtod_l+0x378>
 8007aa4:	9b07      	ldr	r3, [sp, #28]
 8007aa6:	1ba6      	subs	r6, r4, r6
 8007aa8:	441e      	add	r6, r3
 8007aaa:	2e00      	cmp	r6, #0
 8007aac:	dd74      	ble.n	8007b98 <_strtod_l+0x530>
 8007aae:	f016 030f 	ands.w	r3, r6, #15
 8007ab2:	d00a      	beq.n	8007aca <_strtod_l+0x462>
 8007ab4:	4950      	ldr	r1, [pc, #320]	; (8007bf8 <_strtod_l+0x590>)
 8007ab6:	4642      	mov	r2, r8
 8007ab8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007abc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ac0:	464b      	mov	r3, r9
 8007ac2:	f7f8 fd09 	bl	80004d8 <__aeabi_dmul>
 8007ac6:	4680      	mov	r8, r0
 8007ac8:	4689      	mov	r9, r1
 8007aca:	f036 060f 	bics.w	r6, r6, #15
 8007ace:	d052      	beq.n	8007b76 <_strtod_l+0x50e>
 8007ad0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007ad4:	dd27      	ble.n	8007b26 <_strtod_l+0x4be>
 8007ad6:	f04f 0b00 	mov.w	fp, #0
 8007ada:	f8cd b010 	str.w	fp, [sp, #16]
 8007ade:	f8cd b020 	str.w	fp, [sp, #32]
 8007ae2:	f8cd b018 	str.w	fp, [sp, #24]
 8007ae6:	2322      	movs	r3, #34	; 0x22
 8007ae8:	f04f 0800 	mov.w	r8, #0
 8007aec:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007bf0 <_strtod_l+0x588>
 8007af0:	f8ca 3000 	str.w	r3, [sl]
 8007af4:	9b08      	ldr	r3, [sp, #32]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f43f adf7 	beq.w	80076ea <_strtod_l+0x82>
 8007afc:	4650      	mov	r0, sl
 8007afe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007b00:	f001 fe00 	bl	8009704 <_Bfree>
 8007b04:	4650      	mov	r0, sl
 8007b06:	9906      	ldr	r1, [sp, #24]
 8007b08:	f001 fdfc 	bl	8009704 <_Bfree>
 8007b0c:	4650      	mov	r0, sl
 8007b0e:	9904      	ldr	r1, [sp, #16]
 8007b10:	f001 fdf8 	bl	8009704 <_Bfree>
 8007b14:	4650      	mov	r0, sl
 8007b16:	9908      	ldr	r1, [sp, #32]
 8007b18:	f001 fdf4 	bl	8009704 <_Bfree>
 8007b1c:	4659      	mov	r1, fp
 8007b1e:	4650      	mov	r0, sl
 8007b20:	f001 fdf0 	bl	8009704 <_Bfree>
 8007b24:	e5e1      	b.n	80076ea <_strtod_l+0x82>
 8007b26:	4b35      	ldr	r3, [pc, #212]	; (8007bfc <_strtod_l+0x594>)
 8007b28:	4640      	mov	r0, r8
 8007b2a:	9305      	str	r3, [sp, #20]
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	4649      	mov	r1, r9
 8007b30:	461f      	mov	r7, r3
 8007b32:	1136      	asrs	r6, r6, #4
 8007b34:	2e01      	cmp	r6, #1
 8007b36:	dc21      	bgt.n	8007b7c <_strtod_l+0x514>
 8007b38:	b10b      	cbz	r3, 8007b3e <_strtod_l+0x4d6>
 8007b3a:	4680      	mov	r8, r0
 8007b3c:	4689      	mov	r9, r1
 8007b3e:	4b2f      	ldr	r3, [pc, #188]	; (8007bfc <_strtod_l+0x594>)
 8007b40:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007b44:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007b48:	4642      	mov	r2, r8
 8007b4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b4e:	464b      	mov	r3, r9
 8007b50:	f7f8 fcc2 	bl	80004d8 <__aeabi_dmul>
 8007b54:	4b26      	ldr	r3, [pc, #152]	; (8007bf0 <_strtod_l+0x588>)
 8007b56:	460a      	mov	r2, r1
 8007b58:	400b      	ands	r3, r1
 8007b5a:	4929      	ldr	r1, [pc, #164]	; (8007c00 <_strtod_l+0x598>)
 8007b5c:	4680      	mov	r8, r0
 8007b5e:	428b      	cmp	r3, r1
 8007b60:	d8b9      	bhi.n	8007ad6 <_strtod_l+0x46e>
 8007b62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007b66:	428b      	cmp	r3, r1
 8007b68:	bf86      	itte	hi
 8007b6a:	f04f 38ff 	movhi.w	r8, #4294967295
 8007b6e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007c04 <_strtod_l+0x59c>
 8007b72:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007b76:	2300      	movs	r3, #0
 8007b78:	9305      	str	r3, [sp, #20]
 8007b7a:	e07f      	b.n	8007c7c <_strtod_l+0x614>
 8007b7c:	07f2      	lsls	r2, r6, #31
 8007b7e:	d505      	bpl.n	8007b8c <_strtod_l+0x524>
 8007b80:	9b05      	ldr	r3, [sp, #20]
 8007b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b86:	f7f8 fca7 	bl	80004d8 <__aeabi_dmul>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	9a05      	ldr	r2, [sp, #20]
 8007b8e:	3701      	adds	r7, #1
 8007b90:	3208      	adds	r2, #8
 8007b92:	1076      	asrs	r6, r6, #1
 8007b94:	9205      	str	r2, [sp, #20]
 8007b96:	e7cd      	b.n	8007b34 <_strtod_l+0x4cc>
 8007b98:	d0ed      	beq.n	8007b76 <_strtod_l+0x50e>
 8007b9a:	4276      	negs	r6, r6
 8007b9c:	f016 020f 	ands.w	r2, r6, #15
 8007ba0:	d00a      	beq.n	8007bb8 <_strtod_l+0x550>
 8007ba2:	4b15      	ldr	r3, [pc, #84]	; (8007bf8 <_strtod_l+0x590>)
 8007ba4:	4640      	mov	r0, r8
 8007ba6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007baa:	4649      	mov	r1, r9
 8007bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb0:	f7f8 fdbc 	bl	800072c <__aeabi_ddiv>
 8007bb4:	4680      	mov	r8, r0
 8007bb6:	4689      	mov	r9, r1
 8007bb8:	1136      	asrs	r6, r6, #4
 8007bba:	d0dc      	beq.n	8007b76 <_strtod_l+0x50e>
 8007bbc:	2e1f      	cmp	r6, #31
 8007bbe:	dd23      	ble.n	8007c08 <_strtod_l+0x5a0>
 8007bc0:	f04f 0b00 	mov.w	fp, #0
 8007bc4:	f8cd b010 	str.w	fp, [sp, #16]
 8007bc8:	f8cd b020 	str.w	fp, [sp, #32]
 8007bcc:	f8cd b018 	str.w	fp, [sp, #24]
 8007bd0:	2322      	movs	r3, #34	; 0x22
 8007bd2:	f04f 0800 	mov.w	r8, #0
 8007bd6:	f04f 0900 	mov.w	r9, #0
 8007bda:	f8ca 3000 	str.w	r3, [sl]
 8007bde:	e789      	b.n	8007af4 <_strtod_l+0x48c>
 8007be0:	0800b28d 	.word	0x0800b28d
 8007be4:	0800b2c8 	.word	0x0800b2c8
 8007be8:	0800b285 	.word	0x0800b285
 8007bec:	0800b30b 	.word	0x0800b30b
 8007bf0:	7ff00000 	.word	0x7ff00000
 8007bf4:	0800b5b8 	.word	0x0800b5b8
 8007bf8:	0800b498 	.word	0x0800b498
 8007bfc:	0800b470 	.word	0x0800b470
 8007c00:	7ca00000 	.word	0x7ca00000
 8007c04:	7fefffff 	.word	0x7fefffff
 8007c08:	f016 0310 	ands.w	r3, r6, #16
 8007c0c:	bf18      	it	ne
 8007c0e:	236a      	movne	r3, #106	; 0x6a
 8007c10:	4640      	mov	r0, r8
 8007c12:	9305      	str	r3, [sp, #20]
 8007c14:	4649      	mov	r1, r9
 8007c16:	2300      	movs	r3, #0
 8007c18:	4fb0      	ldr	r7, [pc, #704]	; (8007edc <_strtod_l+0x874>)
 8007c1a:	07f2      	lsls	r2, r6, #31
 8007c1c:	d504      	bpl.n	8007c28 <_strtod_l+0x5c0>
 8007c1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c22:	f7f8 fc59 	bl	80004d8 <__aeabi_dmul>
 8007c26:	2301      	movs	r3, #1
 8007c28:	1076      	asrs	r6, r6, #1
 8007c2a:	f107 0708 	add.w	r7, r7, #8
 8007c2e:	d1f4      	bne.n	8007c1a <_strtod_l+0x5b2>
 8007c30:	b10b      	cbz	r3, 8007c36 <_strtod_l+0x5ce>
 8007c32:	4680      	mov	r8, r0
 8007c34:	4689      	mov	r9, r1
 8007c36:	9b05      	ldr	r3, [sp, #20]
 8007c38:	b1c3      	cbz	r3, 8007c6c <_strtod_l+0x604>
 8007c3a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007c3e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	4649      	mov	r1, r9
 8007c46:	dd11      	ble.n	8007c6c <_strtod_l+0x604>
 8007c48:	2b1f      	cmp	r3, #31
 8007c4a:	f340 8127 	ble.w	8007e9c <_strtod_l+0x834>
 8007c4e:	2b34      	cmp	r3, #52	; 0x34
 8007c50:	bfd8      	it	le
 8007c52:	f04f 33ff 	movle.w	r3, #4294967295
 8007c56:	f04f 0800 	mov.w	r8, #0
 8007c5a:	bfcf      	iteee	gt
 8007c5c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007c60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007c64:	fa03 f202 	lslle.w	r2, r3, r2
 8007c68:	ea02 0901 	andle.w	r9, r2, r1
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	2300      	movs	r3, #0
 8007c70:	4640      	mov	r0, r8
 8007c72:	4649      	mov	r1, r9
 8007c74:	f7f8 fe98 	bl	80009a8 <__aeabi_dcmpeq>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	d1a1      	bne.n	8007bc0 <_strtod_l+0x558>
 8007c7c:	9b06      	ldr	r3, [sp, #24]
 8007c7e:	465a      	mov	r2, fp
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	4650      	mov	r0, sl
 8007c84:	4623      	mov	r3, r4
 8007c86:	9908      	ldr	r1, [sp, #32]
 8007c88:	f001 fda4 	bl	80097d4 <__s2b>
 8007c8c:	9008      	str	r0, [sp, #32]
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	f43f af21 	beq.w	8007ad6 <_strtod_l+0x46e>
 8007c94:	9b04      	ldr	r3, [sp, #16]
 8007c96:	f04f 0b00 	mov.w	fp, #0
 8007c9a:	1b5d      	subs	r5, r3, r5
 8007c9c:	9b07      	ldr	r3, [sp, #28]
 8007c9e:	f8cd b010 	str.w	fp, [sp, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	bfb4      	ite	lt
 8007ca6:	462b      	movlt	r3, r5
 8007ca8:	2300      	movge	r3, #0
 8007caa:	930e      	str	r3, [sp, #56]	; 0x38
 8007cac:	9b07      	ldr	r3, [sp, #28]
 8007cae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007cb2:	9314      	str	r3, [sp, #80]	; 0x50
 8007cb4:	9b08      	ldr	r3, [sp, #32]
 8007cb6:	4650      	mov	r0, sl
 8007cb8:	6859      	ldr	r1, [r3, #4]
 8007cba:	f001 fce3 	bl	8009684 <_Balloc>
 8007cbe:	9006      	str	r0, [sp, #24]
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	f43f af10 	beq.w	8007ae6 <_strtod_l+0x47e>
 8007cc6:	9b08      	ldr	r3, [sp, #32]
 8007cc8:	300c      	adds	r0, #12
 8007cca:	691a      	ldr	r2, [r3, #16]
 8007ccc:	f103 010c 	add.w	r1, r3, #12
 8007cd0:	3202      	adds	r2, #2
 8007cd2:	0092      	lsls	r2, r2, #2
 8007cd4:	f001 fcc8 	bl	8009668 <memcpy>
 8007cd8:	ab1c      	add	r3, sp, #112	; 0x70
 8007cda:	9301      	str	r3, [sp, #4]
 8007cdc:	ab1b      	add	r3, sp, #108	; 0x6c
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	4642      	mov	r2, r8
 8007ce2:	464b      	mov	r3, r9
 8007ce4:	4650      	mov	r0, sl
 8007ce6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8007cea:	f002 f8b5 	bl	8009e58 <__d2b>
 8007cee:	901a      	str	r0, [sp, #104]	; 0x68
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	f43f aef8 	beq.w	8007ae6 <_strtod_l+0x47e>
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	4650      	mov	r0, sl
 8007cfa:	f001 fe03 	bl	8009904 <__i2b>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	9004      	str	r0, [sp, #16]
 8007d02:	2800      	cmp	r0, #0
 8007d04:	f43f aeef 	beq.w	8007ae6 <_strtod_l+0x47e>
 8007d08:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007d0a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007d0c:	2d00      	cmp	r5, #0
 8007d0e:	bfab      	itete	ge
 8007d10:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007d12:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8007d14:	18ee      	addge	r6, r5, r3
 8007d16:	1b5c      	sublt	r4, r3, r5
 8007d18:	9b05      	ldr	r3, [sp, #20]
 8007d1a:	bfa8      	it	ge
 8007d1c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8007d1e:	eba5 0503 	sub.w	r5, r5, r3
 8007d22:	4415      	add	r5, r2
 8007d24:	4b6e      	ldr	r3, [pc, #440]	; (8007ee0 <_strtod_l+0x878>)
 8007d26:	f105 35ff 	add.w	r5, r5, #4294967295
 8007d2a:	bfb8      	it	lt
 8007d2c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007d2e:	429d      	cmp	r5, r3
 8007d30:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007d34:	f280 80c4 	bge.w	8007ec0 <_strtod_l+0x858>
 8007d38:	1b5b      	subs	r3, r3, r5
 8007d3a:	2b1f      	cmp	r3, #31
 8007d3c:	f04f 0701 	mov.w	r7, #1
 8007d40:	eba2 0203 	sub.w	r2, r2, r3
 8007d44:	f300 80b1 	bgt.w	8007eaa <_strtod_l+0x842>
 8007d48:	2500      	movs	r5, #0
 8007d4a:	fa07 f303 	lsl.w	r3, r7, r3
 8007d4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d50:	18b7      	adds	r7, r6, r2
 8007d52:	9b05      	ldr	r3, [sp, #20]
 8007d54:	42be      	cmp	r6, r7
 8007d56:	4414      	add	r4, r2
 8007d58:	441c      	add	r4, r3
 8007d5a:	4633      	mov	r3, r6
 8007d5c:	bfa8      	it	ge
 8007d5e:	463b      	movge	r3, r7
 8007d60:	42a3      	cmp	r3, r4
 8007d62:	bfa8      	it	ge
 8007d64:	4623      	movge	r3, r4
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	bfc2      	ittt	gt
 8007d6a:	1aff      	subgt	r7, r7, r3
 8007d6c:	1ae4      	subgt	r4, r4, r3
 8007d6e:	1af6      	subgt	r6, r6, r3
 8007d70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	dd17      	ble.n	8007da6 <_strtod_l+0x73e>
 8007d76:	461a      	mov	r2, r3
 8007d78:	4650      	mov	r0, sl
 8007d7a:	9904      	ldr	r1, [sp, #16]
 8007d7c:	f001 fe80 	bl	8009a80 <__pow5mult>
 8007d80:	9004      	str	r0, [sp, #16]
 8007d82:	2800      	cmp	r0, #0
 8007d84:	f43f aeaf 	beq.w	8007ae6 <_strtod_l+0x47e>
 8007d88:	4601      	mov	r1, r0
 8007d8a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007d8c:	4650      	mov	r0, sl
 8007d8e:	f001 fdcf 	bl	8009930 <__multiply>
 8007d92:	9009      	str	r0, [sp, #36]	; 0x24
 8007d94:	2800      	cmp	r0, #0
 8007d96:	f43f aea6 	beq.w	8007ae6 <_strtod_l+0x47e>
 8007d9a:	4650      	mov	r0, sl
 8007d9c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007d9e:	f001 fcb1 	bl	8009704 <_Bfree>
 8007da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da4:	931a      	str	r3, [sp, #104]	; 0x68
 8007da6:	2f00      	cmp	r7, #0
 8007da8:	f300 808e 	bgt.w	8007ec8 <_strtod_l+0x860>
 8007dac:	9b07      	ldr	r3, [sp, #28]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	dd08      	ble.n	8007dc4 <_strtod_l+0x75c>
 8007db2:	4650      	mov	r0, sl
 8007db4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007db6:	9906      	ldr	r1, [sp, #24]
 8007db8:	f001 fe62 	bl	8009a80 <__pow5mult>
 8007dbc:	9006      	str	r0, [sp, #24]
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	f43f ae91 	beq.w	8007ae6 <_strtod_l+0x47e>
 8007dc4:	2c00      	cmp	r4, #0
 8007dc6:	dd08      	ble.n	8007dda <_strtod_l+0x772>
 8007dc8:	4622      	mov	r2, r4
 8007dca:	4650      	mov	r0, sl
 8007dcc:	9906      	ldr	r1, [sp, #24]
 8007dce:	f001 feb1 	bl	8009b34 <__lshift>
 8007dd2:	9006      	str	r0, [sp, #24]
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	f43f ae86 	beq.w	8007ae6 <_strtod_l+0x47e>
 8007dda:	2e00      	cmp	r6, #0
 8007ddc:	dd08      	ble.n	8007df0 <_strtod_l+0x788>
 8007dde:	4632      	mov	r2, r6
 8007de0:	4650      	mov	r0, sl
 8007de2:	9904      	ldr	r1, [sp, #16]
 8007de4:	f001 fea6 	bl	8009b34 <__lshift>
 8007de8:	9004      	str	r0, [sp, #16]
 8007dea:	2800      	cmp	r0, #0
 8007dec:	f43f ae7b 	beq.w	8007ae6 <_strtod_l+0x47e>
 8007df0:	4650      	mov	r0, sl
 8007df2:	9a06      	ldr	r2, [sp, #24]
 8007df4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007df6:	f001 ff29 	bl	8009c4c <__mdiff>
 8007dfa:	4683      	mov	fp, r0
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	f43f ae72 	beq.w	8007ae6 <_strtod_l+0x47e>
 8007e02:	2400      	movs	r4, #0
 8007e04:	68c3      	ldr	r3, [r0, #12]
 8007e06:	9904      	ldr	r1, [sp, #16]
 8007e08:	60c4      	str	r4, [r0, #12]
 8007e0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e0c:	f001 ff02 	bl	8009c14 <__mcmp>
 8007e10:	42a0      	cmp	r0, r4
 8007e12:	da6b      	bge.n	8007eec <_strtod_l+0x884>
 8007e14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e16:	ea53 0308 	orrs.w	r3, r3, r8
 8007e1a:	f040 8091 	bne.w	8007f40 <_strtod_l+0x8d8>
 8007e1e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f040 808c 	bne.w	8007f40 <_strtod_l+0x8d8>
 8007e28:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e2c:	0d1b      	lsrs	r3, r3, #20
 8007e2e:	051b      	lsls	r3, r3, #20
 8007e30:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007e34:	f240 8084 	bls.w	8007f40 <_strtod_l+0x8d8>
 8007e38:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007e3c:	b91b      	cbnz	r3, 8007e46 <_strtod_l+0x7de>
 8007e3e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	dd7c      	ble.n	8007f40 <_strtod_l+0x8d8>
 8007e46:	4659      	mov	r1, fp
 8007e48:	2201      	movs	r2, #1
 8007e4a:	4650      	mov	r0, sl
 8007e4c:	f001 fe72 	bl	8009b34 <__lshift>
 8007e50:	9904      	ldr	r1, [sp, #16]
 8007e52:	4683      	mov	fp, r0
 8007e54:	f001 fede 	bl	8009c14 <__mcmp>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	dd71      	ble.n	8007f40 <_strtod_l+0x8d8>
 8007e5c:	9905      	ldr	r1, [sp, #20]
 8007e5e:	464b      	mov	r3, r9
 8007e60:	4a20      	ldr	r2, [pc, #128]	; (8007ee4 <_strtod_l+0x87c>)
 8007e62:	2900      	cmp	r1, #0
 8007e64:	f000 808c 	beq.w	8007f80 <_strtod_l+0x918>
 8007e68:	ea02 0109 	and.w	r1, r2, r9
 8007e6c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007e70:	f300 8086 	bgt.w	8007f80 <_strtod_l+0x918>
 8007e74:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007e78:	f77f aeaa 	ble.w	8007bd0 <_strtod_l+0x568>
 8007e7c:	4640      	mov	r0, r8
 8007e7e:	4649      	mov	r1, r9
 8007e80:	4b19      	ldr	r3, [pc, #100]	; (8007ee8 <_strtod_l+0x880>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	f7f8 fb28 	bl	80004d8 <__aeabi_dmul>
 8007e88:	460b      	mov	r3, r1
 8007e8a:	4303      	orrs	r3, r0
 8007e8c:	bf08      	it	eq
 8007e8e:	2322      	moveq	r3, #34	; 0x22
 8007e90:	4680      	mov	r8, r0
 8007e92:	4689      	mov	r9, r1
 8007e94:	bf08      	it	eq
 8007e96:	f8ca 3000 	streq.w	r3, [sl]
 8007e9a:	e62f      	b.n	8007afc <_strtod_l+0x494>
 8007e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea4:	ea03 0808 	and.w	r8, r3, r8
 8007ea8:	e6e0      	b.n	8007c6c <_strtod_l+0x604>
 8007eaa:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007eae:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007eb2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007eb6:	35e2      	adds	r5, #226	; 0xe2
 8007eb8:	fa07 f505 	lsl.w	r5, r7, r5
 8007ebc:	970f      	str	r7, [sp, #60]	; 0x3c
 8007ebe:	e747      	b.n	8007d50 <_strtod_l+0x6e8>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	2500      	movs	r5, #0
 8007ec4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ec6:	e743      	b.n	8007d50 <_strtod_l+0x6e8>
 8007ec8:	463a      	mov	r2, r7
 8007eca:	4650      	mov	r0, sl
 8007ecc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007ece:	f001 fe31 	bl	8009b34 <__lshift>
 8007ed2:	901a      	str	r0, [sp, #104]	; 0x68
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	f47f af69 	bne.w	8007dac <_strtod_l+0x744>
 8007eda:	e604      	b.n	8007ae6 <_strtod_l+0x47e>
 8007edc:	0800b2e0 	.word	0x0800b2e0
 8007ee0:	fffffc02 	.word	0xfffffc02
 8007ee4:	7ff00000 	.word	0x7ff00000
 8007ee8:	39500000 	.word	0x39500000
 8007eec:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007ef0:	d165      	bne.n	8007fbe <_strtod_l+0x956>
 8007ef2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ef4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ef8:	b35a      	cbz	r2, 8007f52 <_strtod_l+0x8ea>
 8007efa:	4a99      	ldr	r2, [pc, #612]	; (8008160 <_strtod_l+0xaf8>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d12b      	bne.n	8007f58 <_strtod_l+0x8f0>
 8007f00:	9b05      	ldr	r3, [sp, #20]
 8007f02:	4641      	mov	r1, r8
 8007f04:	b303      	cbz	r3, 8007f48 <_strtod_l+0x8e0>
 8007f06:	464a      	mov	r2, r9
 8007f08:	4b96      	ldr	r3, [pc, #600]	; (8008164 <_strtod_l+0xafc>)
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007f10:	f04f 32ff 	mov.w	r2, #4294967295
 8007f14:	d81b      	bhi.n	8007f4e <_strtod_l+0x8e6>
 8007f16:	0d1b      	lsrs	r3, r3, #20
 8007f18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f20:	4299      	cmp	r1, r3
 8007f22:	d119      	bne.n	8007f58 <_strtod_l+0x8f0>
 8007f24:	4b90      	ldr	r3, [pc, #576]	; (8008168 <_strtod_l+0xb00>)
 8007f26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d102      	bne.n	8007f32 <_strtod_l+0x8ca>
 8007f2c:	3101      	adds	r1, #1
 8007f2e:	f43f adda 	beq.w	8007ae6 <_strtod_l+0x47e>
 8007f32:	f04f 0800 	mov.w	r8, #0
 8007f36:	4b8b      	ldr	r3, [pc, #556]	; (8008164 <_strtod_l+0xafc>)
 8007f38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f3a:	401a      	ands	r2, r3
 8007f3c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007f40:	9b05      	ldr	r3, [sp, #20]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d19a      	bne.n	8007e7c <_strtod_l+0x814>
 8007f46:	e5d9      	b.n	8007afc <_strtod_l+0x494>
 8007f48:	f04f 33ff 	mov.w	r3, #4294967295
 8007f4c:	e7e8      	b.n	8007f20 <_strtod_l+0x8b8>
 8007f4e:	4613      	mov	r3, r2
 8007f50:	e7e6      	b.n	8007f20 <_strtod_l+0x8b8>
 8007f52:	ea53 0308 	orrs.w	r3, r3, r8
 8007f56:	d081      	beq.n	8007e5c <_strtod_l+0x7f4>
 8007f58:	b1e5      	cbz	r5, 8007f94 <_strtod_l+0x92c>
 8007f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f5c:	421d      	tst	r5, r3
 8007f5e:	d0ef      	beq.n	8007f40 <_strtod_l+0x8d8>
 8007f60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f62:	4640      	mov	r0, r8
 8007f64:	4649      	mov	r1, r9
 8007f66:	9a05      	ldr	r2, [sp, #20]
 8007f68:	b1c3      	cbz	r3, 8007f9c <_strtod_l+0x934>
 8007f6a:	f7ff fb59 	bl	8007620 <sulp>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	460b      	mov	r3, r1
 8007f72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f76:	f7f8 f8f9 	bl	800016c <__adddf3>
 8007f7a:	4680      	mov	r8, r0
 8007f7c:	4689      	mov	r9, r1
 8007f7e:	e7df      	b.n	8007f40 <_strtod_l+0x8d8>
 8007f80:	4013      	ands	r3, r2
 8007f82:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007f86:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007f8a:	f04f 38ff 	mov.w	r8, #4294967295
 8007f8e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007f92:	e7d5      	b.n	8007f40 <_strtod_l+0x8d8>
 8007f94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f96:	ea13 0f08 	tst.w	r3, r8
 8007f9a:	e7e0      	b.n	8007f5e <_strtod_l+0x8f6>
 8007f9c:	f7ff fb40 	bl	8007620 <sulp>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007fa8:	f7f8 f8de 	bl	8000168 <__aeabi_dsub>
 8007fac:	2200      	movs	r2, #0
 8007fae:	2300      	movs	r3, #0
 8007fb0:	4680      	mov	r8, r0
 8007fb2:	4689      	mov	r9, r1
 8007fb4:	f7f8 fcf8 	bl	80009a8 <__aeabi_dcmpeq>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	d0c1      	beq.n	8007f40 <_strtod_l+0x8d8>
 8007fbc:	e608      	b.n	8007bd0 <_strtod_l+0x568>
 8007fbe:	4658      	mov	r0, fp
 8007fc0:	9904      	ldr	r1, [sp, #16]
 8007fc2:	f001 ffa5 	bl	8009f10 <__ratio>
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fcc:	4606      	mov	r6, r0
 8007fce:	460f      	mov	r7, r1
 8007fd0:	f7f8 fcfe 	bl	80009d0 <__aeabi_dcmple>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d070      	beq.n	80080ba <_strtod_l+0xa52>
 8007fd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d042      	beq.n	8008064 <_strtod_l+0x9fc>
 8007fde:	2600      	movs	r6, #0
 8007fe0:	4f62      	ldr	r7, [pc, #392]	; (800816c <_strtod_l+0xb04>)
 8007fe2:	4d62      	ldr	r5, [pc, #392]	; (800816c <_strtod_l+0xb04>)
 8007fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fea:	0d1b      	lsrs	r3, r3, #20
 8007fec:	051b      	lsls	r3, r3, #20
 8007fee:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ff0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ff2:	4b5f      	ldr	r3, [pc, #380]	; (8008170 <_strtod_l+0xb08>)
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	f040 80c3 	bne.w	8008180 <_strtod_l+0xb18>
 8007ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ffc:	4640      	mov	r0, r8
 8007ffe:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8008002:	4649      	mov	r1, r9
 8008004:	f001 feae 	bl	8009d64 <__ulp>
 8008008:	4602      	mov	r2, r0
 800800a:	460b      	mov	r3, r1
 800800c:	4630      	mov	r0, r6
 800800e:	4639      	mov	r1, r7
 8008010:	f7f8 fa62 	bl	80004d8 <__aeabi_dmul>
 8008014:	4642      	mov	r2, r8
 8008016:	464b      	mov	r3, r9
 8008018:	f7f8 f8a8 	bl	800016c <__adddf3>
 800801c:	460b      	mov	r3, r1
 800801e:	4951      	ldr	r1, [pc, #324]	; (8008164 <_strtod_l+0xafc>)
 8008020:	4a54      	ldr	r2, [pc, #336]	; (8008174 <_strtod_l+0xb0c>)
 8008022:	4019      	ands	r1, r3
 8008024:	4291      	cmp	r1, r2
 8008026:	4680      	mov	r8, r0
 8008028:	d95d      	bls.n	80080e6 <_strtod_l+0xa7e>
 800802a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800802c:	4b4e      	ldr	r3, [pc, #312]	; (8008168 <_strtod_l+0xb00>)
 800802e:	429a      	cmp	r2, r3
 8008030:	d103      	bne.n	800803a <_strtod_l+0x9d2>
 8008032:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008034:	3301      	adds	r3, #1
 8008036:	f43f ad56 	beq.w	8007ae6 <_strtod_l+0x47e>
 800803a:	f04f 38ff 	mov.w	r8, #4294967295
 800803e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008168 <_strtod_l+0xb00>
 8008042:	4650      	mov	r0, sl
 8008044:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008046:	f001 fb5d 	bl	8009704 <_Bfree>
 800804a:	4650      	mov	r0, sl
 800804c:	9906      	ldr	r1, [sp, #24]
 800804e:	f001 fb59 	bl	8009704 <_Bfree>
 8008052:	4650      	mov	r0, sl
 8008054:	9904      	ldr	r1, [sp, #16]
 8008056:	f001 fb55 	bl	8009704 <_Bfree>
 800805a:	4659      	mov	r1, fp
 800805c:	4650      	mov	r0, sl
 800805e:	f001 fb51 	bl	8009704 <_Bfree>
 8008062:	e627      	b.n	8007cb4 <_strtod_l+0x64c>
 8008064:	f1b8 0f00 	cmp.w	r8, #0
 8008068:	d119      	bne.n	800809e <_strtod_l+0xa36>
 800806a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800806c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008070:	b9e3      	cbnz	r3, 80080ac <_strtod_l+0xa44>
 8008072:	2200      	movs	r2, #0
 8008074:	4630      	mov	r0, r6
 8008076:	4639      	mov	r1, r7
 8008078:	4b3c      	ldr	r3, [pc, #240]	; (800816c <_strtod_l+0xb04>)
 800807a:	f7f8 fc9f 	bl	80009bc <__aeabi_dcmplt>
 800807e:	b9c8      	cbnz	r0, 80080b4 <_strtod_l+0xa4c>
 8008080:	2200      	movs	r2, #0
 8008082:	4630      	mov	r0, r6
 8008084:	4639      	mov	r1, r7
 8008086:	4b3c      	ldr	r3, [pc, #240]	; (8008178 <_strtod_l+0xb10>)
 8008088:	f7f8 fa26 	bl	80004d8 <__aeabi_dmul>
 800808c:	4604      	mov	r4, r0
 800808e:	460d      	mov	r5, r1
 8008090:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008094:	9416      	str	r4, [sp, #88]	; 0x58
 8008096:	9317      	str	r3, [sp, #92]	; 0x5c
 8008098:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800809c:	e7a2      	b.n	8007fe4 <_strtod_l+0x97c>
 800809e:	f1b8 0f01 	cmp.w	r8, #1
 80080a2:	d103      	bne.n	80080ac <_strtod_l+0xa44>
 80080a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f43f ad92 	beq.w	8007bd0 <_strtod_l+0x568>
 80080ac:	2600      	movs	r6, #0
 80080ae:	2400      	movs	r4, #0
 80080b0:	4f32      	ldr	r7, [pc, #200]	; (800817c <_strtod_l+0xb14>)
 80080b2:	e796      	b.n	8007fe2 <_strtod_l+0x97a>
 80080b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80080b6:	4d30      	ldr	r5, [pc, #192]	; (8008178 <_strtod_l+0xb10>)
 80080b8:	e7ea      	b.n	8008090 <_strtod_l+0xa28>
 80080ba:	4b2f      	ldr	r3, [pc, #188]	; (8008178 <_strtod_l+0xb10>)
 80080bc:	2200      	movs	r2, #0
 80080be:	4630      	mov	r0, r6
 80080c0:	4639      	mov	r1, r7
 80080c2:	f7f8 fa09 	bl	80004d8 <__aeabi_dmul>
 80080c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080c8:	4604      	mov	r4, r0
 80080ca:	460d      	mov	r5, r1
 80080cc:	b933      	cbnz	r3, 80080dc <_strtod_l+0xa74>
 80080ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080d2:	9010      	str	r0, [sp, #64]	; 0x40
 80080d4:	9311      	str	r3, [sp, #68]	; 0x44
 80080d6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80080da:	e783      	b.n	8007fe4 <_strtod_l+0x97c>
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80080e4:	e7f7      	b.n	80080d6 <_strtod_l+0xa6e>
 80080e6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80080ea:	9b05      	ldr	r3, [sp, #20]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1a8      	bne.n	8008042 <_strtod_l+0x9da>
 80080f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80080f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080f6:	0d1b      	lsrs	r3, r3, #20
 80080f8:	051b      	lsls	r3, r3, #20
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d1a1      	bne.n	8008042 <_strtod_l+0x9da>
 80080fe:	4620      	mov	r0, r4
 8008100:	4629      	mov	r1, r5
 8008102:	f7f9 f825 	bl	8001150 <__aeabi_d2lz>
 8008106:	f7f8 f9b9 	bl	800047c <__aeabi_l2d>
 800810a:	4602      	mov	r2, r0
 800810c:	460b      	mov	r3, r1
 800810e:	4620      	mov	r0, r4
 8008110:	4629      	mov	r1, r5
 8008112:	f7f8 f829 	bl	8000168 <__aeabi_dsub>
 8008116:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008118:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800811c:	ea43 0308 	orr.w	r3, r3, r8
 8008120:	4313      	orrs	r3, r2
 8008122:	4604      	mov	r4, r0
 8008124:	460d      	mov	r5, r1
 8008126:	d066      	beq.n	80081f6 <_strtod_l+0xb8e>
 8008128:	a309      	add	r3, pc, #36	; (adr r3, 8008150 <_strtod_l+0xae8>)
 800812a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812e:	f7f8 fc45 	bl	80009bc <__aeabi_dcmplt>
 8008132:	2800      	cmp	r0, #0
 8008134:	f47f ace2 	bne.w	8007afc <_strtod_l+0x494>
 8008138:	a307      	add	r3, pc, #28	; (adr r3, 8008158 <_strtod_l+0xaf0>)
 800813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813e:	4620      	mov	r0, r4
 8008140:	4629      	mov	r1, r5
 8008142:	f7f8 fc59 	bl	80009f8 <__aeabi_dcmpgt>
 8008146:	2800      	cmp	r0, #0
 8008148:	f43f af7b 	beq.w	8008042 <_strtod_l+0x9da>
 800814c:	e4d6      	b.n	8007afc <_strtod_l+0x494>
 800814e:	bf00      	nop
 8008150:	94a03595 	.word	0x94a03595
 8008154:	3fdfffff 	.word	0x3fdfffff
 8008158:	35afe535 	.word	0x35afe535
 800815c:	3fe00000 	.word	0x3fe00000
 8008160:	000fffff 	.word	0x000fffff
 8008164:	7ff00000 	.word	0x7ff00000
 8008168:	7fefffff 	.word	0x7fefffff
 800816c:	3ff00000 	.word	0x3ff00000
 8008170:	7fe00000 	.word	0x7fe00000
 8008174:	7c9fffff 	.word	0x7c9fffff
 8008178:	3fe00000 	.word	0x3fe00000
 800817c:	bff00000 	.word	0xbff00000
 8008180:	9b05      	ldr	r3, [sp, #20]
 8008182:	b313      	cbz	r3, 80081ca <_strtod_l+0xb62>
 8008184:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008186:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800818a:	d81e      	bhi.n	80081ca <_strtod_l+0xb62>
 800818c:	a326      	add	r3, pc, #152	; (adr r3, 8008228 <_strtod_l+0xbc0>)
 800818e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008192:	4620      	mov	r0, r4
 8008194:	4629      	mov	r1, r5
 8008196:	f7f8 fc1b 	bl	80009d0 <__aeabi_dcmple>
 800819a:	b190      	cbz	r0, 80081c2 <_strtod_l+0xb5a>
 800819c:	4629      	mov	r1, r5
 800819e:	4620      	mov	r0, r4
 80081a0:	f7f8 fc72 	bl	8000a88 <__aeabi_d2uiz>
 80081a4:	2801      	cmp	r0, #1
 80081a6:	bf38      	it	cc
 80081a8:	2001      	movcc	r0, #1
 80081aa:	f7f8 f91b 	bl	80003e4 <__aeabi_ui2d>
 80081ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081b0:	4604      	mov	r4, r0
 80081b2:	460d      	mov	r5, r1
 80081b4:	b9d3      	cbnz	r3, 80081ec <_strtod_l+0xb84>
 80081b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081ba:	9012      	str	r0, [sp, #72]	; 0x48
 80081bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80081be:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80081c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80081c4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80081c8:	1a9f      	subs	r7, r3, r2
 80081ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081ce:	f001 fdc9 	bl	8009d64 <__ulp>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4630      	mov	r0, r6
 80081d8:	4639      	mov	r1, r7
 80081da:	f7f8 f97d 	bl	80004d8 <__aeabi_dmul>
 80081de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80081e2:	f7f7 ffc3 	bl	800016c <__adddf3>
 80081e6:	4680      	mov	r8, r0
 80081e8:	4689      	mov	r9, r1
 80081ea:	e77e      	b.n	80080ea <_strtod_l+0xa82>
 80081ec:	4602      	mov	r2, r0
 80081ee:	460b      	mov	r3, r1
 80081f0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80081f4:	e7e3      	b.n	80081be <_strtod_l+0xb56>
 80081f6:	a30e      	add	r3, pc, #56	; (adr r3, 8008230 <_strtod_l+0xbc8>)
 80081f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fc:	f7f8 fbde 	bl	80009bc <__aeabi_dcmplt>
 8008200:	e7a1      	b.n	8008146 <_strtod_l+0xade>
 8008202:	2300      	movs	r3, #0
 8008204:	930a      	str	r3, [sp, #40]	; 0x28
 8008206:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008208:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800820a:	6013      	str	r3, [r2, #0]
 800820c:	f7ff ba71 	b.w	80076f2 <_strtod_l+0x8a>
 8008210:	2a65      	cmp	r2, #101	; 0x65
 8008212:	f43f ab63 	beq.w	80078dc <_strtod_l+0x274>
 8008216:	2a45      	cmp	r2, #69	; 0x45
 8008218:	f43f ab60 	beq.w	80078dc <_strtod_l+0x274>
 800821c:	2301      	movs	r3, #1
 800821e:	f7ff bb95 	b.w	800794c <_strtod_l+0x2e4>
 8008222:	bf00      	nop
 8008224:	f3af 8000 	nop.w
 8008228:	ffc00000 	.word	0xffc00000
 800822c:	41dfffff 	.word	0x41dfffff
 8008230:	94a03595 	.word	0x94a03595
 8008234:	3fcfffff 	.word	0x3fcfffff

08008238 <strtod>:
 8008238:	460a      	mov	r2, r1
 800823a:	4601      	mov	r1, r0
 800823c:	4802      	ldr	r0, [pc, #8]	; (8008248 <strtod+0x10>)
 800823e:	4b03      	ldr	r3, [pc, #12]	; (800824c <strtod+0x14>)
 8008240:	6800      	ldr	r0, [r0, #0]
 8008242:	f7ff ba11 	b.w	8007668 <_strtod_l>
 8008246:	bf00      	nop
 8008248:	20000018 	.word	0x20000018
 800824c:	20000080 	.word	0x20000080

08008250 <quorem>:
 8008250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008254:	6903      	ldr	r3, [r0, #16]
 8008256:	690c      	ldr	r4, [r1, #16]
 8008258:	4607      	mov	r7, r0
 800825a:	42a3      	cmp	r3, r4
 800825c:	f2c0 8082 	blt.w	8008364 <quorem+0x114>
 8008260:	3c01      	subs	r4, #1
 8008262:	f100 0514 	add.w	r5, r0, #20
 8008266:	f101 0814 	add.w	r8, r1, #20
 800826a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800826e:	9301      	str	r3, [sp, #4]
 8008270:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008274:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008278:	3301      	adds	r3, #1
 800827a:	429a      	cmp	r2, r3
 800827c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008280:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008284:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008288:	d331      	bcc.n	80082ee <quorem+0x9e>
 800828a:	f04f 0e00 	mov.w	lr, #0
 800828e:	4640      	mov	r0, r8
 8008290:	46ac      	mov	ip, r5
 8008292:	46f2      	mov	sl, lr
 8008294:	f850 2b04 	ldr.w	r2, [r0], #4
 8008298:	b293      	uxth	r3, r2
 800829a:	fb06 e303 	mla	r3, r6, r3, lr
 800829e:	0c12      	lsrs	r2, r2, #16
 80082a0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	fb06 e202 	mla	r2, r6, r2, lr
 80082aa:	ebaa 0303 	sub.w	r3, sl, r3
 80082ae:	f8dc a000 	ldr.w	sl, [ip]
 80082b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082b6:	fa1f fa8a 	uxth.w	sl, sl
 80082ba:	4453      	add	r3, sl
 80082bc:	f8dc a000 	ldr.w	sl, [ip]
 80082c0:	b292      	uxth	r2, r2
 80082c2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80082c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082d0:	4581      	cmp	r9, r0
 80082d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80082d6:	f84c 3b04 	str.w	r3, [ip], #4
 80082da:	d2db      	bcs.n	8008294 <quorem+0x44>
 80082dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80082e0:	b92b      	cbnz	r3, 80082ee <quorem+0x9e>
 80082e2:	9b01      	ldr	r3, [sp, #4]
 80082e4:	3b04      	subs	r3, #4
 80082e6:	429d      	cmp	r5, r3
 80082e8:	461a      	mov	r2, r3
 80082ea:	d32f      	bcc.n	800834c <quorem+0xfc>
 80082ec:	613c      	str	r4, [r7, #16]
 80082ee:	4638      	mov	r0, r7
 80082f0:	f001 fc90 	bl	8009c14 <__mcmp>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	db25      	blt.n	8008344 <quorem+0xf4>
 80082f8:	4628      	mov	r0, r5
 80082fa:	f04f 0c00 	mov.w	ip, #0
 80082fe:	3601      	adds	r6, #1
 8008300:	f858 1b04 	ldr.w	r1, [r8], #4
 8008304:	f8d0 e000 	ldr.w	lr, [r0]
 8008308:	b28b      	uxth	r3, r1
 800830a:	ebac 0303 	sub.w	r3, ip, r3
 800830e:	fa1f f28e 	uxth.w	r2, lr
 8008312:	4413      	add	r3, r2
 8008314:	0c0a      	lsrs	r2, r1, #16
 8008316:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800831a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800831e:	b29b      	uxth	r3, r3
 8008320:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008324:	45c1      	cmp	r9, r8
 8008326:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800832a:	f840 3b04 	str.w	r3, [r0], #4
 800832e:	d2e7      	bcs.n	8008300 <quorem+0xb0>
 8008330:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008334:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008338:	b922      	cbnz	r2, 8008344 <quorem+0xf4>
 800833a:	3b04      	subs	r3, #4
 800833c:	429d      	cmp	r5, r3
 800833e:	461a      	mov	r2, r3
 8008340:	d30a      	bcc.n	8008358 <quorem+0x108>
 8008342:	613c      	str	r4, [r7, #16]
 8008344:	4630      	mov	r0, r6
 8008346:	b003      	add	sp, #12
 8008348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800834c:	6812      	ldr	r2, [r2, #0]
 800834e:	3b04      	subs	r3, #4
 8008350:	2a00      	cmp	r2, #0
 8008352:	d1cb      	bne.n	80082ec <quorem+0x9c>
 8008354:	3c01      	subs	r4, #1
 8008356:	e7c6      	b.n	80082e6 <quorem+0x96>
 8008358:	6812      	ldr	r2, [r2, #0]
 800835a:	3b04      	subs	r3, #4
 800835c:	2a00      	cmp	r2, #0
 800835e:	d1f0      	bne.n	8008342 <quorem+0xf2>
 8008360:	3c01      	subs	r4, #1
 8008362:	e7eb      	b.n	800833c <quorem+0xec>
 8008364:	2000      	movs	r0, #0
 8008366:	e7ee      	b.n	8008346 <quorem+0xf6>

08008368 <_dtoa_r>:
 8008368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800836c:	4616      	mov	r6, r2
 800836e:	461f      	mov	r7, r3
 8008370:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008372:	b099      	sub	sp, #100	; 0x64
 8008374:	4605      	mov	r5, r0
 8008376:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800837a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800837e:	b974      	cbnz	r4, 800839e <_dtoa_r+0x36>
 8008380:	2010      	movs	r0, #16
 8008382:	f001 f949 	bl	8009618 <malloc>
 8008386:	4602      	mov	r2, r0
 8008388:	6268      	str	r0, [r5, #36]	; 0x24
 800838a:	b920      	cbnz	r0, 8008396 <_dtoa_r+0x2e>
 800838c:	21ea      	movs	r1, #234	; 0xea
 800838e:	4ba8      	ldr	r3, [pc, #672]	; (8008630 <_dtoa_r+0x2c8>)
 8008390:	48a8      	ldr	r0, [pc, #672]	; (8008634 <_dtoa_r+0x2cc>)
 8008392:	f002 f89f 	bl	800a4d4 <__assert_func>
 8008396:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800839a:	6004      	str	r4, [r0, #0]
 800839c:	60c4      	str	r4, [r0, #12]
 800839e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80083a0:	6819      	ldr	r1, [r3, #0]
 80083a2:	b151      	cbz	r1, 80083ba <_dtoa_r+0x52>
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	2301      	movs	r3, #1
 80083a8:	4093      	lsls	r3, r2
 80083aa:	604a      	str	r2, [r1, #4]
 80083ac:	608b      	str	r3, [r1, #8]
 80083ae:	4628      	mov	r0, r5
 80083b0:	f001 f9a8 	bl	8009704 <_Bfree>
 80083b4:	2200      	movs	r2, #0
 80083b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80083b8:	601a      	str	r2, [r3, #0]
 80083ba:	1e3b      	subs	r3, r7, #0
 80083bc:	bfaf      	iteee	ge
 80083be:	2300      	movge	r3, #0
 80083c0:	2201      	movlt	r2, #1
 80083c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80083c6:	9305      	strlt	r3, [sp, #20]
 80083c8:	bfa8      	it	ge
 80083ca:	f8c8 3000 	strge.w	r3, [r8]
 80083ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80083d2:	4b99      	ldr	r3, [pc, #612]	; (8008638 <_dtoa_r+0x2d0>)
 80083d4:	bfb8      	it	lt
 80083d6:	f8c8 2000 	strlt.w	r2, [r8]
 80083da:	ea33 0309 	bics.w	r3, r3, r9
 80083de:	d119      	bne.n	8008414 <_dtoa_r+0xac>
 80083e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80083e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083ec:	4333      	orrs	r3, r6
 80083ee:	f000 857f 	beq.w	8008ef0 <_dtoa_r+0xb88>
 80083f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80083f4:	b953      	cbnz	r3, 800840c <_dtoa_r+0xa4>
 80083f6:	4b91      	ldr	r3, [pc, #580]	; (800863c <_dtoa_r+0x2d4>)
 80083f8:	e022      	b.n	8008440 <_dtoa_r+0xd8>
 80083fa:	4b91      	ldr	r3, [pc, #580]	; (8008640 <_dtoa_r+0x2d8>)
 80083fc:	9303      	str	r3, [sp, #12]
 80083fe:	3308      	adds	r3, #8
 8008400:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008402:	6013      	str	r3, [r2, #0]
 8008404:	9803      	ldr	r0, [sp, #12]
 8008406:	b019      	add	sp, #100	; 0x64
 8008408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840c:	4b8b      	ldr	r3, [pc, #556]	; (800863c <_dtoa_r+0x2d4>)
 800840e:	9303      	str	r3, [sp, #12]
 8008410:	3303      	adds	r3, #3
 8008412:	e7f5      	b.n	8008400 <_dtoa_r+0x98>
 8008414:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008418:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800841c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008420:	2200      	movs	r2, #0
 8008422:	2300      	movs	r3, #0
 8008424:	f7f8 fac0 	bl	80009a8 <__aeabi_dcmpeq>
 8008428:	4680      	mov	r8, r0
 800842a:	b158      	cbz	r0, 8008444 <_dtoa_r+0xdc>
 800842c:	2301      	movs	r3, #1
 800842e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008430:	6013      	str	r3, [r2, #0]
 8008432:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008434:	2b00      	cmp	r3, #0
 8008436:	f000 8558 	beq.w	8008eea <_dtoa_r+0xb82>
 800843a:	4882      	ldr	r0, [pc, #520]	; (8008644 <_dtoa_r+0x2dc>)
 800843c:	6018      	str	r0, [r3, #0]
 800843e:	1e43      	subs	r3, r0, #1
 8008440:	9303      	str	r3, [sp, #12]
 8008442:	e7df      	b.n	8008404 <_dtoa_r+0x9c>
 8008444:	ab16      	add	r3, sp, #88	; 0x58
 8008446:	9301      	str	r3, [sp, #4]
 8008448:	ab17      	add	r3, sp, #92	; 0x5c
 800844a:	9300      	str	r3, [sp, #0]
 800844c:	4628      	mov	r0, r5
 800844e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008452:	f001 fd01 	bl	8009e58 <__d2b>
 8008456:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800845a:	4683      	mov	fp, r0
 800845c:	2c00      	cmp	r4, #0
 800845e:	d07f      	beq.n	8008560 <_dtoa_r+0x1f8>
 8008460:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008464:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008466:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800846a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800846e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008472:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008476:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800847a:	2200      	movs	r2, #0
 800847c:	4b72      	ldr	r3, [pc, #456]	; (8008648 <_dtoa_r+0x2e0>)
 800847e:	f7f7 fe73 	bl	8000168 <__aeabi_dsub>
 8008482:	a365      	add	r3, pc, #404	; (adr r3, 8008618 <_dtoa_r+0x2b0>)
 8008484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008488:	f7f8 f826 	bl	80004d8 <__aeabi_dmul>
 800848c:	a364      	add	r3, pc, #400	; (adr r3, 8008620 <_dtoa_r+0x2b8>)
 800848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008492:	f7f7 fe6b 	bl	800016c <__adddf3>
 8008496:	4606      	mov	r6, r0
 8008498:	4620      	mov	r0, r4
 800849a:	460f      	mov	r7, r1
 800849c:	f7f7 ffb2 	bl	8000404 <__aeabi_i2d>
 80084a0:	a361      	add	r3, pc, #388	; (adr r3, 8008628 <_dtoa_r+0x2c0>)
 80084a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a6:	f7f8 f817 	bl	80004d8 <__aeabi_dmul>
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	4630      	mov	r0, r6
 80084b0:	4639      	mov	r1, r7
 80084b2:	f7f7 fe5b 	bl	800016c <__adddf3>
 80084b6:	4606      	mov	r6, r0
 80084b8:	460f      	mov	r7, r1
 80084ba:	f7f8 fabd 	bl	8000a38 <__aeabi_d2iz>
 80084be:	2200      	movs	r2, #0
 80084c0:	4682      	mov	sl, r0
 80084c2:	2300      	movs	r3, #0
 80084c4:	4630      	mov	r0, r6
 80084c6:	4639      	mov	r1, r7
 80084c8:	f7f8 fa78 	bl	80009bc <__aeabi_dcmplt>
 80084cc:	b148      	cbz	r0, 80084e2 <_dtoa_r+0x17a>
 80084ce:	4650      	mov	r0, sl
 80084d0:	f7f7 ff98 	bl	8000404 <__aeabi_i2d>
 80084d4:	4632      	mov	r2, r6
 80084d6:	463b      	mov	r3, r7
 80084d8:	f7f8 fa66 	bl	80009a8 <__aeabi_dcmpeq>
 80084dc:	b908      	cbnz	r0, 80084e2 <_dtoa_r+0x17a>
 80084de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084e2:	f1ba 0f16 	cmp.w	sl, #22
 80084e6:	d858      	bhi.n	800859a <_dtoa_r+0x232>
 80084e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084ec:	4b57      	ldr	r3, [pc, #348]	; (800864c <_dtoa_r+0x2e4>)
 80084ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	f7f8 fa61 	bl	80009bc <__aeabi_dcmplt>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	d04f      	beq.n	800859e <_dtoa_r+0x236>
 80084fe:	2300      	movs	r3, #0
 8008500:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008504:	930f      	str	r3, [sp, #60]	; 0x3c
 8008506:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008508:	1b1c      	subs	r4, r3, r4
 800850a:	1e63      	subs	r3, r4, #1
 800850c:	9309      	str	r3, [sp, #36]	; 0x24
 800850e:	bf49      	itett	mi
 8008510:	f1c4 0301 	rsbmi	r3, r4, #1
 8008514:	2300      	movpl	r3, #0
 8008516:	9306      	strmi	r3, [sp, #24]
 8008518:	2300      	movmi	r3, #0
 800851a:	bf54      	ite	pl
 800851c:	9306      	strpl	r3, [sp, #24]
 800851e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008520:	f1ba 0f00 	cmp.w	sl, #0
 8008524:	db3d      	blt.n	80085a2 <_dtoa_r+0x23a>
 8008526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008528:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800852c:	4453      	add	r3, sl
 800852e:	9309      	str	r3, [sp, #36]	; 0x24
 8008530:	2300      	movs	r3, #0
 8008532:	930a      	str	r3, [sp, #40]	; 0x28
 8008534:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008536:	2b09      	cmp	r3, #9
 8008538:	f200 808c 	bhi.w	8008654 <_dtoa_r+0x2ec>
 800853c:	2b05      	cmp	r3, #5
 800853e:	bfc4      	itt	gt
 8008540:	3b04      	subgt	r3, #4
 8008542:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008544:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008546:	bfc8      	it	gt
 8008548:	2400      	movgt	r4, #0
 800854a:	f1a3 0302 	sub.w	r3, r3, #2
 800854e:	bfd8      	it	le
 8008550:	2401      	movle	r4, #1
 8008552:	2b03      	cmp	r3, #3
 8008554:	f200 808a 	bhi.w	800866c <_dtoa_r+0x304>
 8008558:	e8df f003 	tbb	[pc, r3]
 800855c:	5b4d4f2d 	.word	0x5b4d4f2d
 8008560:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008564:	441c      	add	r4, r3
 8008566:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800856a:	2b20      	cmp	r3, #32
 800856c:	bfc3      	ittte	gt
 800856e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008572:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008576:	fa09 f303 	lslgt.w	r3, r9, r3
 800857a:	f1c3 0320 	rsble	r3, r3, #32
 800857e:	bfc6      	itte	gt
 8008580:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008584:	4318      	orrgt	r0, r3
 8008586:	fa06 f003 	lslle.w	r0, r6, r3
 800858a:	f7f7 ff2b 	bl	80003e4 <__aeabi_ui2d>
 800858e:	2301      	movs	r3, #1
 8008590:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008594:	3c01      	subs	r4, #1
 8008596:	9313      	str	r3, [sp, #76]	; 0x4c
 8008598:	e76f      	b.n	800847a <_dtoa_r+0x112>
 800859a:	2301      	movs	r3, #1
 800859c:	e7b2      	b.n	8008504 <_dtoa_r+0x19c>
 800859e:	900f      	str	r0, [sp, #60]	; 0x3c
 80085a0:	e7b1      	b.n	8008506 <_dtoa_r+0x19e>
 80085a2:	9b06      	ldr	r3, [sp, #24]
 80085a4:	eba3 030a 	sub.w	r3, r3, sl
 80085a8:	9306      	str	r3, [sp, #24]
 80085aa:	f1ca 0300 	rsb	r3, sl, #0
 80085ae:	930a      	str	r3, [sp, #40]	; 0x28
 80085b0:	2300      	movs	r3, #0
 80085b2:	930e      	str	r3, [sp, #56]	; 0x38
 80085b4:	e7be      	b.n	8008534 <_dtoa_r+0x1cc>
 80085b6:	2300      	movs	r3, #0
 80085b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80085ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80085bc:	2b00      	cmp	r3, #0
 80085be:	dc58      	bgt.n	8008672 <_dtoa_r+0x30a>
 80085c0:	f04f 0901 	mov.w	r9, #1
 80085c4:	464b      	mov	r3, r9
 80085c6:	f8cd 9020 	str.w	r9, [sp, #32]
 80085ca:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80085ce:	2200      	movs	r2, #0
 80085d0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80085d2:	6042      	str	r2, [r0, #4]
 80085d4:	2204      	movs	r2, #4
 80085d6:	f102 0614 	add.w	r6, r2, #20
 80085da:	429e      	cmp	r6, r3
 80085dc:	6841      	ldr	r1, [r0, #4]
 80085de:	d94e      	bls.n	800867e <_dtoa_r+0x316>
 80085e0:	4628      	mov	r0, r5
 80085e2:	f001 f84f 	bl	8009684 <_Balloc>
 80085e6:	9003      	str	r0, [sp, #12]
 80085e8:	2800      	cmp	r0, #0
 80085ea:	d14c      	bne.n	8008686 <_dtoa_r+0x31e>
 80085ec:	4602      	mov	r2, r0
 80085ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80085f2:	4b17      	ldr	r3, [pc, #92]	; (8008650 <_dtoa_r+0x2e8>)
 80085f4:	e6cc      	b.n	8008390 <_dtoa_r+0x28>
 80085f6:	2301      	movs	r3, #1
 80085f8:	e7de      	b.n	80085b8 <_dtoa_r+0x250>
 80085fa:	2300      	movs	r3, #0
 80085fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80085fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008600:	eb0a 0903 	add.w	r9, sl, r3
 8008604:	f109 0301 	add.w	r3, r9, #1
 8008608:	2b01      	cmp	r3, #1
 800860a:	9308      	str	r3, [sp, #32]
 800860c:	bfb8      	it	lt
 800860e:	2301      	movlt	r3, #1
 8008610:	e7dd      	b.n	80085ce <_dtoa_r+0x266>
 8008612:	2301      	movs	r3, #1
 8008614:	e7f2      	b.n	80085fc <_dtoa_r+0x294>
 8008616:	bf00      	nop
 8008618:	636f4361 	.word	0x636f4361
 800861c:	3fd287a7 	.word	0x3fd287a7
 8008620:	8b60c8b3 	.word	0x8b60c8b3
 8008624:	3fc68a28 	.word	0x3fc68a28
 8008628:	509f79fb 	.word	0x509f79fb
 800862c:	3fd34413 	.word	0x3fd34413
 8008630:	0800b315 	.word	0x0800b315
 8008634:	0800b32c 	.word	0x0800b32c
 8008638:	7ff00000 	.word	0x7ff00000
 800863c:	0800b311 	.word	0x0800b311
 8008640:	0800b308 	.word	0x0800b308
 8008644:	0800b291 	.word	0x0800b291
 8008648:	3ff80000 	.word	0x3ff80000
 800864c:	0800b498 	.word	0x0800b498
 8008650:	0800b387 	.word	0x0800b387
 8008654:	2401      	movs	r4, #1
 8008656:	2300      	movs	r3, #0
 8008658:	940b      	str	r4, [sp, #44]	; 0x2c
 800865a:	9322      	str	r3, [sp, #136]	; 0x88
 800865c:	f04f 39ff 	mov.w	r9, #4294967295
 8008660:	2200      	movs	r2, #0
 8008662:	2312      	movs	r3, #18
 8008664:	f8cd 9020 	str.w	r9, [sp, #32]
 8008668:	9223      	str	r2, [sp, #140]	; 0x8c
 800866a:	e7b0      	b.n	80085ce <_dtoa_r+0x266>
 800866c:	2301      	movs	r3, #1
 800866e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008670:	e7f4      	b.n	800865c <_dtoa_r+0x2f4>
 8008672:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008676:	464b      	mov	r3, r9
 8008678:	f8cd 9020 	str.w	r9, [sp, #32]
 800867c:	e7a7      	b.n	80085ce <_dtoa_r+0x266>
 800867e:	3101      	adds	r1, #1
 8008680:	6041      	str	r1, [r0, #4]
 8008682:	0052      	lsls	r2, r2, #1
 8008684:	e7a7      	b.n	80085d6 <_dtoa_r+0x26e>
 8008686:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008688:	9a03      	ldr	r2, [sp, #12]
 800868a:	601a      	str	r2, [r3, #0]
 800868c:	9b08      	ldr	r3, [sp, #32]
 800868e:	2b0e      	cmp	r3, #14
 8008690:	f200 80a8 	bhi.w	80087e4 <_dtoa_r+0x47c>
 8008694:	2c00      	cmp	r4, #0
 8008696:	f000 80a5 	beq.w	80087e4 <_dtoa_r+0x47c>
 800869a:	f1ba 0f00 	cmp.w	sl, #0
 800869e:	dd34      	ble.n	800870a <_dtoa_r+0x3a2>
 80086a0:	4a9a      	ldr	r2, [pc, #616]	; (800890c <_dtoa_r+0x5a4>)
 80086a2:	f00a 030f 	and.w	r3, sl, #15
 80086a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80086aa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80086ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80086b6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80086ba:	d016      	beq.n	80086ea <_dtoa_r+0x382>
 80086bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086c0:	4b93      	ldr	r3, [pc, #588]	; (8008910 <_dtoa_r+0x5a8>)
 80086c2:	2703      	movs	r7, #3
 80086c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086c8:	f7f8 f830 	bl	800072c <__aeabi_ddiv>
 80086cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086d0:	f004 040f 	and.w	r4, r4, #15
 80086d4:	4e8e      	ldr	r6, [pc, #568]	; (8008910 <_dtoa_r+0x5a8>)
 80086d6:	b954      	cbnz	r4, 80086ee <_dtoa_r+0x386>
 80086d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80086dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086e0:	f7f8 f824 	bl	800072c <__aeabi_ddiv>
 80086e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086e8:	e029      	b.n	800873e <_dtoa_r+0x3d6>
 80086ea:	2702      	movs	r7, #2
 80086ec:	e7f2      	b.n	80086d4 <_dtoa_r+0x36c>
 80086ee:	07e1      	lsls	r1, r4, #31
 80086f0:	d508      	bpl.n	8008704 <_dtoa_r+0x39c>
 80086f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80086f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086fa:	f7f7 feed 	bl	80004d8 <__aeabi_dmul>
 80086fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008702:	3701      	adds	r7, #1
 8008704:	1064      	asrs	r4, r4, #1
 8008706:	3608      	adds	r6, #8
 8008708:	e7e5      	b.n	80086d6 <_dtoa_r+0x36e>
 800870a:	f000 80a5 	beq.w	8008858 <_dtoa_r+0x4f0>
 800870e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008712:	f1ca 0400 	rsb	r4, sl, #0
 8008716:	4b7d      	ldr	r3, [pc, #500]	; (800890c <_dtoa_r+0x5a4>)
 8008718:	f004 020f 	and.w	r2, r4, #15
 800871c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008724:	f7f7 fed8 	bl	80004d8 <__aeabi_dmul>
 8008728:	2702      	movs	r7, #2
 800872a:	2300      	movs	r3, #0
 800872c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008730:	4e77      	ldr	r6, [pc, #476]	; (8008910 <_dtoa_r+0x5a8>)
 8008732:	1124      	asrs	r4, r4, #4
 8008734:	2c00      	cmp	r4, #0
 8008736:	f040 8084 	bne.w	8008842 <_dtoa_r+0x4da>
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1d2      	bne.n	80086e4 <_dtoa_r+0x37c>
 800873e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 808b 	beq.w	800885c <_dtoa_r+0x4f4>
 8008746:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800874a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800874e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008752:	2200      	movs	r2, #0
 8008754:	4b6f      	ldr	r3, [pc, #444]	; (8008914 <_dtoa_r+0x5ac>)
 8008756:	f7f8 f931 	bl	80009bc <__aeabi_dcmplt>
 800875a:	2800      	cmp	r0, #0
 800875c:	d07e      	beq.n	800885c <_dtoa_r+0x4f4>
 800875e:	9b08      	ldr	r3, [sp, #32]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d07b      	beq.n	800885c <_dtoa_r+0x4f4>
 8008764:	f1b9 0f00 	cmp.w	r9, #0
 8008768:	dd38      	ble.n	80087dc <_dtoa_r+0x474>
 800876a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800876e:	2200      	movs	r2, #0
 8008770:	4b69      	ldr	r3, [pc, #420]	; (8008918 <_dtoa_r+0x5b0>)
 8008772:	f7f7 feb1 	bl	80004d8 <__aeabi_dmul>
 8008776:	464c      	mov	r4, r9
 8008778:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800877c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008780:	3701      	adds	r7, #1
 8008782:	4638      	mov	r0, r7
 8008784:	f7f7 fe3e 	bl	8000404 <__aeabi_i2d>
 8008788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800878c:	f7f7 fea4 	bl	80004d8 <__aeabi_dmul>
 8008790:	2200      	movs	r2, #0
 8008792:	4b62      	ldr	r3, [pc, #392]	; (800891c <_dtoa_r+0x5b4>)
 8008794:	f7f7 fcea 	bl	800016c <__adddf3>
 8008798:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800879c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80087a0:	9611      	str	r6, [sp, #68]	; 0x44
 80087a2:	2c00      	cmp	r4, #0
 80087a4:	d15d      	bne.n	8008862 <_dtoa_r+0x4fa>
 80087a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087aa:	2200      	movs	r2, #0
 80087ac:	4b5c      	ldr	r3, [pc, #368]	; (8008920 <_dtoa_r+0x5b8>)
 80087ae:	f7f7 fcdb 	bl	8000168 <__aeabi_dsub>
 80087b2:	4602      	mov	r2, r0
 80087b4:	460b      	mov	r3, r1
 80087b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80087ba:	4633      	mov	r3, r6
 80087bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80087be:	f7f8 f91b 	bl	80009f8 <__aeabi_dcmpgt>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	f040 829c 	bne.w	8008d00 <_dtoa_r+0x998>
 80087c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80087ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80087d2:	f7f8 f8f3 	bl	80009bc <__aeabi_dcmplt>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	f040 8290 	bne.w	8008cfc <_dtoa_r+0x994>
 80087dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80087e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80087e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f2c0 8152 	blt.w	8008a90 <_dtoa_r+0x728>
 80087ec:	f1ba 0f0e 	cmp.w	sl, #14
 80087f0:	f300 814e 	bgt.w	8008a90 <_dtoa_r+0x728>
 80087f4:	4b45      	ldr	r3, [pc, #276]	; (800890c <_dtoa_r+0x5a4>)
 80087f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80087fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80087fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008802:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008804:	2b00      	cmp	r3, #0
 8008806:	f280 80db 	bge.w	80089c0 <_dtoa_r+0x658>
 800880a:	9b08      	ldr	r3, [sp, #32]
 800880c:	2b00      	cmp	r3, #0
 800880e:	f300 80d7 	bgt.w	80089c0 <_dtoa_r+0x658>
 8008812:	f040 8272 	bne.w	8008cfa <_dtoa_r+0x992>
 8008816:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800881a:	2200      	movs	r2, #0
 800881c:	4b40      	ldr	r3, [pc, #256]	; (8008920 <_dtoa_r+0x5b8>)
 800881e:	f7f7 fe5b 	bl	80004d8 <__aeabi_dmul>
 8008822:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008826:	f7f8 f8dd 	bl	80009e4 <__aeabi_dcmpge>
 800882a:	9c08      	ldr	r4, [sp, #32]
 800882c:	4626      	mov	r6, r4
 800882e:	2800      	cmp	r0, #0
 8008830:	f040 8248 	bne.w	8008cc4 <_dtoa_r+0x95c>
 8008834:	2331      	movs	r3, #49	; 0x31
 8008836:	9f03      	ldr	r7, [sp, #12]
 8008838:	f10a 0a01 	add.w	sl, sl, #1
 800883c:	f807 3b01 	strb.w	r3, [r7], #1
 8008840:	e244      	b.n	8008ccc <_dtoa_r+0x964>
 8008842:	07e2      	lsls	r2, r4, #31
 8008844:	d505      	bpl.n	8008852 <_dtoa_r+0x4ea>
 8008846:	e9d6 2300 	ldrd	r2, r3, [r6]
 800884a:	f7f7 fe45 	bl	80004d8 <__aeabi_dmul>
 800884e:	2301      	movs	r3, #1
 8008850:	3701      	adds	r7, #1
 8008852:	1064      	asrs	r4, r4, #1
 8008854:	3608      	adds	r6, #8
 8008856:	e76d      	b.n	8008734 <_dtoa_r+0x3cc>
 8008858:	2702      	movs	r7, #2
 800885a:	e770      	b.n	800873e <_dtoa_r+0x3d6>
 800885c:	46d0      	mov	r8, sl
 800885e:	9c08      	ldr	r4, [sp, #32]
 8008860:	e78f      	b.n	8008782 <_dtoa_r+0x41a>
 8008862:	9903      	ldr	r1, [sp, #12]
 8008864:	4b29      	ldr	r3, [pc, #164]	; (800890c <_dtoa_r+0x5a4>)
 8008866:	4421      	add	r1, r4
 8008868:	9112      	str	r1, [sp, #72]	; 0x48
 800886a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800886c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008870:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008874:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008878:	2900      	cmp	r1, #0
 800887a:	d055      	beq.n	8008928 <_dtoa_r+0x5c0>
 800887c:	2000      	movs	r0, #0
 800887e:	4929      	ldr	r1, [pc, #164]	; (8008924 <_dtoa_r+0x5bc>)
 8008880:	f7f7 ff54 	bl	800072c <__aeabi_ddiv>
 8008884:	463b      	mov	r3, r7
 8008886:	4632      	mov	r2, r6
 8008888:	f7f7 fc6e 	bl	8000168 <__aeabi_dsub>
 800888c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008890:	9f03      	ldr	r7, [sp, #12]
 8008892:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008896:	f7f8 f8cf 	bl	8000a38 <__aeabi_d2iz>
 800889a:	4604      	mov	r4, r0
 800889c:	f7f7 fdb2 	bl	8000404 <__aeabi_i2d>
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088a8:	f7f7 fc5e 	bl	8000168 <__aeabi_dsub>
 80088ac:	4602      	mov	r2, r0
 80088ae:	460b      	mov	r3, r1
 80088b0:	3430      	adds	r4, #48	; 0x30
 80088b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80088b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80088ba:	f807 4b01 	strb.w	r4, [r7], #1
 80088be:	f7f8 f87d 	bl	80009bc <__aeabi_dcmplt>
 80088c2:	2800      	cmp	r0, #0
 80088c4:	d174      	bne.n	80089b0 <_dtoa_r+0x648>
 80088c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088ca:	2000      	movs	r0, #0
 80088cc:	4911      	ldr	r1, [pc, #68]	; (8008914 <_dtoa_r+0x5ac>)
 80088ce:	f7f7 fc4b 	bl	8000168 <__aeabi_dsub>
 80088d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80088d6:	f7f8 f871 	bl	80009bc <__aeabi_dcmplt>
 80088da:	2800      	cmp	r0, #0
 80088dc:	f040 80b7 	bne.w	8008a4e <_dtoa_r+0x6e6>
 80088e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088e2:	429f      	cmp	r7, r3
 80088e4:	f43f af7a 	beq.w	80087dc <_dtoa_r+0x474>
 80088e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80088ec:	2200      	movs	r2, #0
 80088ee:	4b0a      	ldr	r3, [pc, #40]	; (8008918 <_dtoa_r+0x5b0>)
 80088f0:	f7f7 fdf2 	bl	80004d8 <__aeabi_dmul>
 80088f4:	2200      	movs	r2, #0
 80088f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80088fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088fe:	4b06      	ldr	r3, [pc, #24]	; (8008918 <_dtoa_r+0x5b0>)
 8008900:	f7f7 fdea 	bl	80004d8 <__aeabi_dmul>
 8008904:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008908:	e7c3      	b.n	8008892 <_dtoa_r+0x52a>
 800890a:	bf00      	nop
 800890c:	0800b498 	.word	0x0800b498
 8008910:	0800b470 	.word	0x0800b470
 8008914:	3ff00000 	.word	0x3ff00000
 8008918:	40240000 	.word	0x40240000
 800891c:	401c0000 	.word	0x401c0000
 8008920:	40140000 	.word	0x40140000
 8008924:	3fe00000 	.word	0x3fe00000
 8008928:	4630      	mov	r0, r6
 800892a:	4639      	mov	r1, r7
 800892c:	f7f7 fdd4 	bl	80004d8 <__aeabi_dmul>
 8008930:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008932:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008936:	9c03      	ldr	r4, [sp, #12]
 8008938:	9314      	str	r3, [sp, #80]	; 0x50
 800893a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800893e:	f7f8 f87b 	bl	8000a38 <__aeabi_d2iz>
 8008942:	9015      	str	r0, [sp, #84]	; 0x54
 8008944:	f7f7 fd5e 	bl	8000404 <__aeabi_i2d>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008950:	f7f7 fc0a 	bl	8000168 <__aeabi_dsub>
 8008954:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008956:	4606      	mov	r6, r0
 8008958:	3330      	adds	r3, #48	; 0x30
 800895a:	f804 3b01 	strb.w	r3, [r4], #1
 800895e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008960:	460f      	mov	r7, r1
 8008962:	429c      	cmp	r4, r3
 8008964:	f04f 0200 	mov.w	r2, #0
 8008968:	d124      	bne.n	80089b4 <_dtoa_r+0x64c>
 800896a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800896e:	4bb0      	ldr	r3, [pc, #704]	; (8008c30 <_dtoa_r+0x8c8>)
 8008970:	f7f7 fbfc 	bl	800016c <__adddf3>
 8008974:	4602      	mov	r2, r0
 8008976:	460b      	mov	r3, r1
 8008978:	4630      	mov	r0, r6
 800897a:	4639      	mov	r1, r7
 800897c:	f7f8 f83c 	bl	80009f8 <__aeabi_dcmpgt>
 8008980:	2800      	cmp	r0, #0
 8008982:	d163      	bne.n	8008a4c <_dtoa_r+0x6e4>
 8008984:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008988:	2000      	movs	r0, #0
 800898a:	49a9      	ldr	r1, [pc, #676]	; (8008c30 <_dtoa_r+0x8c8>)
 800898c:	f7f7 fbec 	bl	8000168 <__aeabi_dsub>
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	4630      	mov	r0, r6
 8008996:	4639      	mov	r1, r7
 8008998:	f7f8 f810 	bl	80009bc <__aeabi_dcmplt>
 800899c:	2800      	cmp	r0, #0
 800899e:	f43f af1d 	beq.w	80087dc <_dtoa_r+0x474>
 80089a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80089a4:	1e7b      	subs	r3, r7, #1
 80089a6:	9314      	str	r3, [sp, #80]	; 0x50
 80089a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80089ac:	2b30      	cmp	r3, #48	; 0x30
 80089ae:	d0f8      	beq.n	80089a2 <_dtoa_r+0x63a>
 80089b0:	46c2      	mov	sl, r8
 80089b2:	e03b      	b.n	8008a2c <_dtoa_r+0x6c4>
 80089b4:	4b9f      	ldr	r3, [pc, #636]	; (8008c34 <_dtoa_r+0x8cc>)
 80089b6:	f7f7 fd8f 	bl	80004d8 <__aeabi_dmul>
 80089ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089be:	e7bc      	b.n	800893a <_dtoa_r+0x5d2>
 80089c0:	9f03      	ldr	r7, [sp, #12]
 80089c2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80089c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089ca:	4640      	mov	r0, r8
 80089cc:	4649      	mov	r1, r9
 80089ce:	f7f7 fead 	bl	800072c <__aeabi_ddiv>
 80089d2:	f7f8 f831 	bl	8000a38 <__aeabi_d2iz>
 80089d6:	4604      	mov	r4, r0
 80089d8:	f7f7 fd14 	bl	8000404 <__aeabi_i2d>
 80089dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089e0:	f7f7 fd7a 	bl	80004d8 <__aeabi_dmul>
 80089e4:	4602      	mov	r2, r0
 80089e6:	460b      	mov	r3, r1
 80089e8:	4640      	mov	r0, r8
 80089ea:	4649      	mov	r1, r9
 80089ec:	f7f7 fbbc 	bl	8000168 <__aeabi_dsub>
 80089f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80089f4:	f807 6b01 	strb.w	r6, [r7], #1
 80089f8:	9e03      	ldr	r6, [sp, #12]
 80089fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80089fe:	1bbe      	subs	r6, r7, r6
 8008a00:	45b4      	cmp	ip, r6
 8008a02:	4602      	mov	r2, r0
 8008a04:	460b      	mov	r3, r1
 8008a06:	d136      	bne.n	8008a76 <_dtoa_r+0x70e>
 8008a08:	f7f7 fbb0 	bl	800016c <__adddf3>
 8008a0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a10:	4680      	mov	r8, r0
 8008a12:	4689      	mov	r9, r1
 8008a14:	f7f7 fff0 	bl	80009f8 <__aeabi_dcmpgt>
 8008a18:	bb58      	cbnz	r0, 8008a72 <_dtoa_r+0x70a>
 8008a1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a1e:	4640      	mov	r0, r8
 8008a20:	4649      	mov	r1, r9
 8008a22:	f7f7 ffc1 	bl	80009a8 <__aeabi_dcmpeq>
 8008a26:	b108      	cbz	r0, 8008a2c <_dtoa_r+0x6c4>
 8008a28:	07e1      	lsls	r1, r4, #31
 8008a2a:	d422      	bmi.n	8008a72 <_dtoa_r+0x70a>
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	4659      	mov	r1, fp
 8008a30:	f000 fe68 	bl	8009704 <_Bfree>
 8008a34:	2300      	movs	r3, #0
 8008a36:	703b      	strb	r3, [r7, #0]
 8008a38:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008a3a:	f10a 0001 	add.w	r0, sl, #1
 8008a3e:	6018      	str	r0, [r3, #0]
 8008a40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f43f acde 	beq.w	8008404 <_dtoa_r+0x9c>
 8008a48:	601f      	str	r7, [r3, #0]
 8008a4a:	e4db      	b.n	8008404 <_dtoa_r+0x9c>
 8008a4c:	4627      	mov	r7, r4
 8008a4e:	463b      	mov	r3, r7
 8008a50:	461f      	mov	r7, r3
 8008a52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a56:	2a39      	cmp	r2, #57	; 0x39
 8008a58:	d107      	bne.n	8008a6a <_dtoa_r+0x702>
 8008a5a:	9a03      	ldr	r2, [sp, #12]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d1f7      	bne.n	8008a50 <_dtoa_r+0x6e8>
 8008a60:	2230      	movs	r2, #48	; 0x30
 8008a62:	9903      	ldr	r1, [sp, #12]
 8008a64:	f108 0801 	add.w	r8, r8, #1
 8008a68:	700a      	strb	r2, [r1, #0]
 8008a6a:	781a      	ldrb	r2, [r3, #0]
 8008a6c:	3201      	adds	r2, #1
 8008a6e:	701a      	strb	r2, [r3, #0]
 8008a70:	e79e      	b.n	80089b0 <_dtoa_r+0x648>
 8008a72:	46d0      	mov	r8, sl
 8008a74:	e7eb      	b.n	8008a4e <_dtoa_r+0x6e6>
 8008a76:	2200      	movs	r2, #0
 8008a78:	4b6e      	ldr	r3, [pc, #440]	; (8008c34 <_dtoa_r+0x8cc>)
 8008a7a:	f7f7 fd2d 	bl	80004d8 <__aeabi_dmul>
 8008a7e:	2200      	movs	r2, #0
 8008a80:	2300      	movs	r3, #0
 8008a82:	4680      	mov	r8, r0
 8008a84:	4689      	mov	r9, r1
 8008a86:	f7f7 ff8f 	bl	80009a8 <__aeabi_dcmpeq>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	d09b      	beq.n	80089c6 <_dtoa_r+0x65e>
 8008a8e:	e7cd      	b.n	8008a2c <_dtoa_r+0x6c4>
 8008a90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a92:	2a00      	cmp	r2, #0
 8008a94:	f000 80d0 	beq.w	8008c38 <_dtoa_r+0x8d0>
 8008a98:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008a9a:	2a01      	cmp	r2, #1
 8008a9c:	f300 80ae 	bgt.w	8008bfc <_dtoa_r+0x894>
 8008aa0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008aa2:	2a00      	cmp	r2, #0
 8008aa4:	f000 80a6 	beq.w	8008bf4 <_dtoa_r+0x88c>
 8008aa8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008aac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008aae:	9f06      	ldr	r7, [sp, #24]
 8008ab0:	9a06      	ldr	r2, [sp, #24]
 8008ab2:	2101      	movs	r1, #1
 8008ab4:	441a      	add	r2, r3
 8008ab6:	9206      	str	r2, [sp, #24]
 8008ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008aba:	4628      	mov	r0, r5
 8008abc:	441a      	add	r2, r3
 8008abe:	9209      	str	r2, [sp, #36]	; 0x24
 8008ac0:	f000 ff20 	bl	8009904 <__i2b>
 8008ac4:	4606      	mov	r6, r0
 8008ac6:	2f00      	cmp	r7, #0
 8008ac8:	dd0c      	ble.n	8008ae4 <_dtoa_r+0x77c>
 8008aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	dd09      	ble.n	8008ae4 <_dtoa_r+0x77c>
 8008ad0:	42bb      	cmp	r3, r7
 8008ad2:	bfa8      	it	ge
 8008ad4:	463b      	movge	r3, r7
 8008ad6:	9a06      	ldr	r2, [sp, #24]
 8008ad8:	1aff      	subs	r7, r7, r3
 8008ada:	1ad2      	subs	r2, r2, r3
 8008adc:	9206      	str	r2, [sp, #24]
 8008ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ae6:	b1f3      	cbz	r3, 8008b26 <_dtoa_r+0x7be>
 8008ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f000 80a8 	beq.w	8008c40 <_dtoa_r+0x8d8>
 8008af0:	2c00      	cmp	r4, #0
 8008af2:	dd10      	ble.n	8008b16 <_dtoa_r+0x7ae>
 8008af4:	4631      	mov	r1, r6
 8008af6:	4622      	mov	r2, r4
 8008af8:	4628      	mov	r0, r5
 8008afa:	f000 ffc1 	bl	8009a80 <__pow5mult>
 8008afe:	465a      	mov	r2, fp
 8008b00:	4601      	mov	r1, r0
 8008b02:	4606      	mov	r6, r0
 8008b04:	4628      	mov	r0, r5
 8008b06:	f000 ff13 	bl	8009930 <__multiply>
 8008b0a:	4680      	mov	r8, r0
 8008b0c:	4659      	mov	r1, fp
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f000 fdf8 	bl	8009704 <_Bfree>
 8008b14:	46c3      	mov	fp, r8
 8008b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b18:	1b1a      	subs	r2, r3, r4
 8008b1a:	d004      	beq.n	8008b26 <_dtoa_r+0x7be>
 8008b1c:	4659      	mov	r1, fp
 8008b1e:	4628      	mov	r0, r5
 8008b20:	f000 ffae 	bl	8009a80 <__pow5mult>
 8008b24:	4683      	mov	fp, r0
 8008b26:	2101      	movs	r1, #1
 8008b28:	4628      	mov	r0, r5
 8008b2a:	f000 feeb 	bl	8009904 <__i2b>
 8008b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b30:	4604      	mov	r4, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f340 8086 	ble.w	8008c44 <_dtoa_r+0x8dc>
 8008b38:	461a      	mov	r2, r3
 8008b3a:	4601      	mov	r1, r0
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	f000 ff9f 	bl	8009a80 <__pow5mult>
 8008b42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b44:	4604      	mov	r4, r0
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	dd7f      	ble.n	8008c4a <_dtoa_r+0x8e2>
 8008b4a:	f04f 0800 	mov.w	r8, #0
 8008b4e:	6923      	ldr	r3, [r4, #16]
 8008b50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b54:	6918      	ldr	r0, [r3, #16]
 8008b56:	f000 fe87 	bl	8009868 <__hi0bits>
 8008b5a:	f1c0 0020 	rsb	r0, r0, #32
 8008b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b60:	4418      	add	r0, r3
 8008b62:	f010 001f 	ands.w	r0, r0, #31
 8008b66:	f000 8092 	beq.w	8008c8e <_dtoa_r+0x926>
 8008b6a:	f1c0 0320 	rsb	r3, r0, #32
 8008b6e:	2b04      	cmp	r3, #4
 8008b70:	f340 808a 	ble.w	8008c88 <_dtoa_r+0x920>
 8008b74:	f1c0 001c 	rsb	r0, r0, #28
 8008b78:	9b06      	ldr	r3, [sp, #24]
 8008b7a:	4407      	add	r7, r0
 8008b7c:	4403      	add	r3, r0
 8008b7e:	9306      	str	r3, [sp, #24]
 8008b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b82:	4403      	add	r3, r0
 8008b84:	9309      	str	r3, [sp, #36]	; 0x24
 8008b86:	9b06      	ldr	r3, [sp, #24]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	dd05      	ble.n	8008b98 <_dtoa_r+0x830>
 8008b8c:	4659      	mov	r1, fp
 8008b8e:	461a      	mov	r2, r3
 8008b90:	4628      	mov	r0, r5
 8008b92:	f000 ffcf 	bl	8009b34 <__lshift>
 8008b96:	4683      	mov	fp, r0
 8008b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	dd05      	ble.n	8008baa <_dtoa_r+0x842>
 8008b9e:	4621      	mov	r1, r4
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	f000 ffc6 	bl	8009b34 <__lshift>
 8008ba8:	4604      	mov	r4, r0
 8008baa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d070      	beq.n	8008c92 <_dtoa_r+0x92a>
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	4658      	mov	r0, fp
 8008bb4:	f001 f82e 	bl	8009c14 <__mcmp>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	da6a      	bge.n	8008c92 <_dtoa_r+0x92a>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	4659      	mov	r1, fp
 8008bc0:	220a      	movs	r2, #10
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	f000 fdc0 	bl	8009748 <__multadd>
 8008bc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bca:	4683      	mov	fp, r0
 8008bcc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f000 8194 	beq.w	8008efe <_dtoa_r+0xb96>
 8008bd6:	4631      	mov	r1, r6
 8008bd8:	2300      	movs	r3, #0
 8008bda:	220a      	movs	r2, #10
 8008bdc:	4628      	mov	r0, r5
 8008bde:	f000 fdb3 	bl	8009748 <__multadd>
 8008be2:	f1b9 0f00 	cmp.w	r9, #0
 8008be6:	4606      	mov	r6, r0
 8008be8:	f300 8093 	bgt.w	8008d12 <_dtoa_r+0x9aa>
 8008bec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	dc57      	bgt.n	8008ca2 <_dtoa_r+0x93a>
 8008bf2:	e08e      	b.n	8008d12 <_dtoa_r+0x9aa>
 8008bf4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008bf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008bfa:	e757      	b.n	8008aac <_dtoa_r+0x744>
 8008bfc:	9b08      	ldr	r3, [sp, #32]
 8008bfe:	1e5c      	subs	r4, r3, #1
 8008c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c02:	42a3      	cmp	r3, r4
 8008c04:	bfb7      	itett	lt
 8008c06:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008c08:	1b1c      	subge	r4, r3, r4
 8008c0a:	1ae2      	sublt	r2, r4, r3
 8008c0c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008c0e:	bfbe      	ittt	lt
 8008c10:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008c12:	189b      	addlt	r3, r3, r2
 8008c14:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008c16:	9b08      	ldr	r3, [sp, #32]
 8008c18:	bfb8      	it	lt
 8008c1a:	2400      	movlt	r4, #0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	bfbb      	ittet	lt
 8008c20:	9b06      	ldrlt	r3, [sp, #24]
 8008c22:	9a08      	ldrlt	r2, [sp, #32]
 8008c24:	9f06      	ldrge	r7, [sp, #24]
 8008c26:	1a9f      	sublt	r7, r3, r2
 8008c28:	bfac      	ite	ge
 8008c2a:	9b08      	ldrge	r3, [sp, #32]
 8008c2c:	2300      	movlt	r3, #0
 8008c2e:	e73f      	b.n	8008ab0 <_dtoa_r+0x748>
 8008c30:	3fe00000 	.word	0x3fe00000
 8008c34:	40240000 	.word	0x40240000
 8008c38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008c3a:	9f06      	ldr	r7, [sp, #24]
 8008c3c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008c3e:	e742      	b.n	8008ac6 <_dtoa_r+0x75e>
 8008c40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c42:	e76b      	b.n	8008b1c <_dtoa_r+0x7b4>
 8008c44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	dc19      	bgt.n	8008c7e <_dtoa_r+0x916>
 8008c4a:	9b04      	ldr	r3, [sp, #16]
 8008c4c:	b9bb      	cbnz	r3, 8008c7e <_dtoa_r+0x916>
 8008c4e:	9b05      	ldr	r3, [sp, #20]
 8008c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c54:	b99b      	cbnz	r3, 8008c7e <_dtoa_r+0x916>
 8008c56:	9b05      	ldr	r3, [sp, #20]
 8008c58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c5c:	0d1b      	lsrs	r3, r3, #20
 8008c5e:	051b      	lsls	r3, r3, #20
 8008c60:	b183      	cbz	r3, 8008c84 <_dtoa_r+0x91c>
 8008c62:	f04f 0801 	mov.w	r8, #1
 8008c66:	9b06      	ldr	r3, [sp, #24]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	9306      	str	r3, [sp, #24]
 8008c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c6e:	3301      	adds	r3, #1
 8008c70:	9309      	str	r3, [sp, #36]	; 0x24
 8008c72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f47f af6a 	bne.w	8008b4e <_dtoa_r+0x7e6>
 8008c7a:	2001      	movs	r0, #1
 8008c7c:	e76f      	b.n	8008b5e <_dtoa_r+0x7f6>
 8008c7e:	f04f 0800 	mov.w	r8, #0
 8008c82:	e7f6      	b.n	8008c72 <_dtoa_r+0x90a>
 8008c84:	4698      	mov	r8, r3
 8008c86:	e7f4      	b.n	8008c72 <_dtoa_r+0x90a>
 8008c88:	f43f af7d 	beq.w	8008b86 <_dtoa_r+0x81e>
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	301c      	adds	r0, #28
 8008c90:	e772      	b.n	8008b78 <_dtoa_r+0x810>
 8008c92:	9b08      	ldr	r3, [sp, #32]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	dc36      	bgt.n	8008d06 <_dtoa_r+0x99e>
 8008c98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	dd33      	ble.n	8008d06 <_dtoa_r+0x99e>
 8008c9e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ca2:	f1b9 0f00 	cmp.w	r9, #0
 8008ca6:	d10d      	bne.n	8008cc4 <_dtoa_r+0x95c>
 8008ca8:	4621      	mov	r1, r4
 8008caa:	464b      	mov	r3, r9
 8008cac:	2205      	movs	r2, #5
 8008cae:	4628      	mov	r0, r5
 8008cb0:	f000 fd4a 	bl	8009748 <__multadd>
 8008cb4:	4601      	mov	r1, r0
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	4658      	mov	r0, fp
 8008cba:	f000 ffab 	bl	8009c14 <__mcmp>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	f73f adb8 	bgt.w	8008834 <_dtoa_r+0x4cc>
 8008cc4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008cc6:	9f03      	ldr	r7, [sp, #12]
 8008cc8:	ea6f 0a03 	mvn.w	sl, r3
 8008ccc:	f04f 0800 	mov.w	r8, #0
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	f000 fd16 	bl	8009704 <_Bfree>
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	f43f aea7 	beq.w	8008a2c <_dtoa_r+0x6c4>
 8008cde:	f1b8 0f00 	cmp.w	r8, #0
 8008ce2:	d005      	beq.n	8008cf0 <_dtoa_r+0x988>
 8008ce4:	45b0      	cmp	r8, r6
 8008ce6:	d003      	beq.n	8008cf0 <_dtoa_r+0x988>
 8008ce8:	4641      	mov	r1, r8
 8008cea:	4628      	mov	r0, r5
 8008cec:	f000 fd0a 	bl	8009704 <_Bfree>
 8008cf0:	4631      	mov	r1, r6
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	f000 fd06 	bl	8009704 <_Bfree>
 8008cf8:	e698      	b.n	8008a2c <_dtoa_r+0x6c4>
 8008cfa:	2400      	movs	r4, #0
 8008cfc:	4626      	mov	r6, r4
 8008cfe:	e7e1      	b.n	8008cc4 <_dtoa_r+0x95c>
 8008d00:	46c2      	mov	sl, r8
 8008d02:	4626      	mov	r6, r4
 8008d04:	e596      	b.n	8008834 <_dtoa_r+0x4cc>
 8008d06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f000 80fd 	beq.w	8008f0c <_dtoa_r+0xba4>
 8008d12:	2f00      	cmp	r7, #0
 8008d14:	dd05      	ble.n	8008d22 <_dtoa_r+0x9ba>
 8008d16:	4631      	mov	r1, r6
 8008d18:	463a      	mov	r2, r7
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	f000 ff0a 	bl	8009b34 <__lshift>
 8008d20:	4606      	mov	r6, r0
 8008d22:	f1b8 0f00 	cmp.w	r8, #0
 8008d26:	d05c      	beq.n	8008de2 <_dtoa_r+0xa7a>
 8008d28:	4628      	mov	r0, r5
 8008d2a:	6871      	ldr	r1, [r6, #4]
 8008d2c:	f000 fcaa 	bl	8009684 <_Balloc>
 8008d30:	4607      	mov	r7, r0
 8008d32:	b928      	cbnz	r0, 8008d40 <_dtoa_r+0x9d8>
 8008d34:	4602      	mov	r2, r0
 8008d36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008d3a:	4b7f      	ldr	r3, [pc, #508]	; (8008f38 <_dtoa_r+0xbd0>)
 8008d3c:	f7ff bb28 	b.w	8008390 <_dtoa_r+0x28>
 8008d40:	6932      	ldr	r2, [r6, #16]
 8008d42:	f106 010c 	add.w	r1, r6, #12
 8008d46:	3202      	adds	r2, #2
 8008d48:	0092      	lsls	r2, r2, #2
 8008d4a:	300c      	adds	r0, #12
 8008d4c:	f000 fc8c 	bl	8009668 <memcpy>
 8008d50:	2201      	movs	r2, #1
 8008d52:	4639      	mov	r1, r7
 8008d54:	4628      	mov	r0, r5
 8008d56:	f000 feed 	bl	8009b34 <__lshift>
 8008d5a:	46b0      	mov	r8, r6
 8008d5c:	4606      	mov	r6, r0
 8008d5e:	9b03      	ldr	r3, [sp, #12]
 8008d60:	3301      	adds	r3, #1
 8008d62:	9308      	str	r3, [sp, #32]
 8008d64:	9b03      	ldr	r3, [sp, #12]
 8008d66:	444b      	add	r3, r9
 8008d68:	930a      	str	r3, [sp, #40]	; 0x28
 8008d6a:	9b04      	ldr	r3, [sp, #16]
 8008d6c:	f003 0301 	and.w	r3, r3, #1
 8008d70:	9309      	str	r3, [sp, #36]	; 0x24
 8008d72:	9b08      	ldr	r3, [sp, #32]
 8008d74:	4621      	mov	r1, r4
 8008d76:	3b01      	subs	r3, #1
 8008d78:	4658      	mov	r0, fp
 8008d7a:	9304      	str	r3, [sp, #16]
 8008d7c:	f7ff fa68 	bl	8008250 <quorem>
 8008d80:	4603      	mov	r3, r0
 8008d82:	4641      	mov	r1, r8
 8008d84:	3330      	adds	r3, #48	; 0x30
 8008d86:	9006      	str	r0, [sp, #24]
 8008d88:	4658      	mov	r0, fp
 8008d8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d8c:	f000 ff42 	bl	8009c14 <__mcmp>
 8008d90:	4632      	mov	r2, r6
 8008d92:	4681      	mov	r9, r0
 8008d94:	4621      	mov	r1, r4
 8008d96:	4628      	mov	r0, r5
 8008d98:	f000 ff58 	bl	8009c4c <__mdiff>
 8008d9c:	68c2      	ldr	r2, [r0, #12]
 8008d9e:	4607      	mov	r7, r0
 8008da0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008da2:	bb02      	cbnz	r2, 8008de6 <_dtoa_r+0xa7e>
 8008da4:	4601      	mov	r1, r0
 8008da6:	4658      	mov	r0, fp
 8008da8:	f000 ff34 	bl	8009c14 <__mcmp>
 8008dac:	4602      	mov	r2, r0
 8008dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008db0:	4639      	mov	r1, r7
 8008db2:	4628      	mov	r0, r5
 8008db4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008db8:	f000 fca4 	bl	8009704 <_Bfree>
 8008dbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008dbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dc0:	9f08      	ldr	r7, [sp, #32]
 8008dc2:	ea43 0102 	orr.w	r1, r3, r2
 8008dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc8:	430b      	orrs	r3, r1
 8008dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dcc:	d10d      	bne.n	8008dea <_dtoa_r+0xa82>
 8008dce:	2b39      	cmp	r3, #57	; 0x39
 8008dd0:	d029      	beq.n	8008e26 <_dtoa_r+0xabe>
 8008dd2:	f1b9 0f00 	cmp.w	r9, #0
 8008dd6:	dd01      	ble.n	8008ddc <_dtoa_r+0xa74>
 8008dd8:	9b06      	ldr	r3, [sp, #24]
 8008dda:	3331      	adds	r3, #49	; 0x31
 8008ddc:	9a04      	ldr	r2, [sp, #16]
 8008dde:	7013      	strb	r3, [r2, #0]
 8008de0:	e776      	b.n	8008cd0 <_dtoa_r+0x968>
 8008de2:	4630      	mov	r0, r6
 8008de4:	e7b9      	b.n	8008d5a <_dtoa_r+0x9f2>
 8008de6:	2201      	movs	r2, #1
 8008de8:	e7e2      	b.n	8008db0 <_dtoa_r+0xa48>
 8008dea:	f1b9 0f00 	cmp.w	r9, #0
 8008dee:	db06      	blt.n	8008dfe <_dtoa_r+0xa96>
 8008df0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008df2:	ea41 0909 	orr.w	r9, r1, r9
 8008df6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008df8:	ea59 0101 	orrs.w	r1, r9, r1
 8008dfc:	d120      	bne.n	8008e40 <_dtoa_r+0xad8>
 8008dfe:	2a00      	cmp	r2, #0
 8008e00:	ddec      	ble.n	8008ddc <_dtoa_r+0xa74>
 8008e02:	4659      	mov	r1, fp
 8008e04:	2201      	movs	r2, #1
 8008e06:	4628      	mov	r0, r5
 8008e08:	9308      	str	r3, [sp, #32]
 8008e0a:	f000 fe93 	bl	8009b34 <__lshift>
 8008e0e:	4621      	mov	r1, r4
 8008e10:	4683      	mov	fp, r0
 8008e12:	f000 feff 	bl	8009c14 <__mcmp>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	9b08      	ldr	r3, [sp, #32]
 8008e1a:	dc02      	bgt.n	8008e22 <_dtoa_r+0xaba>
 8008e1c:	d1de      	bne.n	8008ddc <_dtoa_r+0xa74>
 8008e1e:	07da      	lsls	r2, r3, #31
 8008e20:	d5dc      	bpl.n	8008ddc <_dtoa_r+0xa74>
 8008e22:	2b39      	cmp	r3, #57	; 0x39
 8008e24:	d1d8      	bne.n	8008dd8 <_dtoa_r+0xa70>
 8008e26:	2339      	movs	r3, #57	; 0x39
 8008e28:	9a04      	ldr	r2, [sp, #16]
 8008e2a:	7013      	strb	r3, [r2, #0]
 8008e2c:	463b      	mov	r3, r7
 8008e2e:	461f      	mov	r7, r3
 8008e30:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008e34:	3b01      	subs	r3, #1
 8008e36:	2a39      	cmp	r2, #57	; 0x39
 8008e38:	d050      	beq.n	8008edc <_dtoa_r+0xb74>
 8008e3a:	3201      	adds	r2, #1
 8008e3c:	701a      	strb	r2, [r3, #0]
 8008e3e:	e747      	b.n	8008cd0 <_dtoa_r+0x968>
 8008e40:	2a00      	cmp	r2, #0
 8008e42:	dd03      	ble.n	8008e4c <_dtoa_r+0xae4>
 8008e44:	2b39      	cmp	r3, #57	; 0x39
 8008e46:	d0ee      	beq.n	8008e26 <_dtoa_r+0xabe>
 8008e48:	3301      	adds	r3, #1
 8008e4a:	e7c7      	b.n	8008ddc <_dtoa_r+0xa74>
 8008e4c:	9a08      	ldr	r2, [sp, #32]
 8008e4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e50:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008e54:	428a      	cmp	r2, r1
 8008e56:	d02a      	beq.n	8008eae <_dtoa_r+0xb46>
 8008e58:	4659      	mov	r1, fp
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	220a      	movs	r2, #10
 8008e5e:	4628      	mov	r0, r5
 8008e60:	f000 fc72 	bl	8009748 <__multadd>
 8008e64:	45b0      	cmp	r8, r6
 8008e66:	4683      	mov	fp, r0
 8008e68:	f04f 0300 	mov.w	r3, #0
 8008e6c:	f04f 020a 	mov.w	r2, #10
 8008e70:	4641      	mov	r1, r8
 8008e72:	4628      	mov	r0, r5
 8008e74:	d107      	bne.n	8008e86 <_dtoa_r+0xb1e>
 8008e76:	f000 fc67 	bl	8009748 <__multadd>
 8008e7a:	4680      	mov	r8, r0
 8008e7c:	4606      	mov	r6, r0
 8008e7e:	9b08      	ldr	r3, [sp, #32]
 8008e80:	3301      	adds	r3, #1
 8008e82:	9308      	str	r3, [sp, #32]
 8008e84:	e775      	b.n	8008d72 <_dtoa_r+0xa0a>
 8008e86:	f000 fc5f 	bl	8009748 <__multadd>
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	4680      	mov	r8, r0
 8008e8e:	2300      	movs	r3, #0
 8008e90:	220a      	movs	r2, #10
 8008e92:	4628      	mov	r0, r5
 8008e94:	f000 fc58 	bl	8009748 <__multadd>
 8008e98:	4606      	mov	r6, r0
 8008e9a:	e7f0      	b.n	8008e7e <_dtoa_r+0xb16>
 8008e9c:	f1b9 0f00 	cmp.w	r9, #0
 8008ea0:	bfcc      	ite	gt
 8008ea2:	464f      	movgt	r7, r9
 8008ea4:	2701      	movle	r7, #1
 8008ea6:	f04f 0800 	mov.w	r8, #0
 8008eaa:	9a03      	ldr	r2, [sp, #12]
 8008eac:	4417      	add	r7, r2
 8008eae:	4659      	mov	r1, fp
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	9308      	str	r3, [sp, #32]
 8008eb6:	f000 fe3d 	bl	8009b34 <__lshift>
 8008eba:	4621      	mov	r1, r4
 8008ebc:	4683      	mov	fp, r0
 8008ebe:	f000 fea9 	bl	8009c14 <__mcmp>
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	dcb2      	bgt.n	8008e2c <_dtoa_r+0xac4>
 8008ec6:	d102      	bne.n	8008ece <_dtoa_r+0xb66>
 8008ec8:	9b08      	ldr	r3, [sp, #32]
 8008eca:	07db      	lsls	r3, r3, #31
 8008ecc:	d4ae      	bmi.n	8008e2c <_dtoa_r+0xac4>
 8008ece:	463b      	mov	r3, r7
 8008ed0:	461f      	mov	r7, r3
 8008ed2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ed6:	2a30      	cmp	r2, #48	; 0x30
 8008ed8:	d0fa      	beq.n	8008ed0 <_dtoa_r+0xb68>
 8008eda:	e6f9      	b.n	8008cd0 <_dtoa_r+0x968>
 8008edc:	9a03      	ldr	r2, [sp, #12]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d1a5      	bne.n	8008e2e <_dtoa_r+0xac6>
 8008ee2:	2331      	movs	r3, #49	; 0x31
 8008ee4:	f10a 0a01 	add.w	sl, sl, #1
 8008ee8:	e779      	b.n	8008dde <_dtoa_r+0xa76>
 8008eea:	4b14      	ldr	r3, [pc, #80]	; (8008f3c <_dtoa_r+0xbd4>)
 8008eec:	f7ff baa8 	b.w	8008440 <_dtoa_r+0xd8>
 8008ef0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f47f aa81 	bne.w	80083fa <_dtoa_r+0x92>
 8008ef8:	4b11      	ldr	r3, [pc, #68]	; (8008f40 <_dtoa_r+0xbd8>)
 8008efa:	f7ff baa1 	b.w	8008440 <_dtoa_r+0xd8>
 8008efe:	f1b9 0f00 	cmp.w	r9, #0
 8008f02:	dc03      	bgt.n	8008f0c <_dtoa_r+0xba4>
 8008f04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	f73f aecb 	bgt.w	8008ca2 <_dtoa_r+0x93a>
 8008f0c:	9f03      	ldr	r7, [sp, #12]
 8008f0e:	4621      	mov	r1, r4
 8008f10:	4658      	mov	r0, fp
 8008f12:	f7ff f99d 	bl	8008250 <quorem>
 8008f16:	9a03      	ldr	r2, [sp, #12]
 8008f18:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008f1c:	f807 3b01 	strb.w	r3, [r7], #1
 8008f20:	1aba      	subs	r2, r7, r2
 8008f22:	4591      	cmp	r9, r2
 8008f24:	ddba      	ble.n	8008e9c <_dtoa_r+0xb34>
 8008f26:	4659      	mov	r1, fp
 8008f28:	2300      	movs	r3, #0
 8008f2a:	220a      	movs	r2, #10
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	f000 fc0b 	bl	8009748 <__multadd>
 8008f32:	4683      	mov	fp, r0
 8008f34:	e7eb      	b.n	8008f0e <_dtoa_r+0xba6>
 8008f36:	bf00      	nop
 8008f38:	0800b387 	.word	0x0800b387
 8008f3c:	0800b290 	.word	0x0800b290
 8008f40:	0800b308 	.word	0x0800b308

08008f44 <rshift>:
 8008f44:	6903      	ldr	r3, [r0, #16]
 8008f46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f4a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008f4e:	f100 0414 	add.w	r4, r0, #20
 8008f52:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008f56:	dd46      	ble.n	8008fe6 <rshift+0xa2>
 8008f58:	f011 011f 	ands.w	r1, r1, #31
 8008f5c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008f60:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008f64:	d10c      	bne.n	8008f80 <rshift+0x3c>
 8008f66:	4629      	mov	r1, r5
 8008f68:	f100 0710 	add.w	r7, r0, #16
 8008f6c:	42b1      	cmp	r1, r6
 8008f6e:	d335      	bcc.n	8008fdc <rshift+0x98>
 8008f70:	1a9b      	subs	r3, r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	1eea      	subs	r2, r5, #3
 8008f76:	4296      	cmp	r6, r2
 8008f78:	bf38      	it	cc
 8008f7a:	2300      	movcc	r3, #0
 8008f7c:	4423      	add	r3, r4
 8008f7e:	e015      	b.n	8008fac <rshift+0x68>
 8008f80:	46a1      	mov	r9, r4
 8008f82:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008f86:	f1c1 0820 	rsb	r8, r1, #32
 8008f8a:	40cf      	lsrs	r7, r1
 8008f8c:	f105 0e04 	add.w	lr, r5, #4
 8008f90:	4576      	cmp	r6, lr
 8008f92:	46f4      	mov	ip, lr
 8008f94:	d816      	bhi.n	8008fc4 <rshift+0x80>
 8008f96:	1a9a      	subs	r2, r3, r2
 8008f98:	0092      	lsls	r2, r2, #2
 8008f9a:	3a04      	subs	r2, #4
 8008f9c:	3501      	adds	r5, #1
 8008f9e:	42ae      	cmp	r6, r5
 8008fa0:	bf38      	it	cc
 8008fa2:	2200      	movcc	r2, #0
 8008fa4:	18a3      	adds	r3, r4, r2
 8008fa6:	50a7      	str	r7, [r4, r2]
 8008fa8:	b107      	cbz	r7, 8008fac <rshift+0x68>
 8008faa:	3304      	adds	r3, #4
 8008fac:	42a3      	cmp	r3, r4
 8008fae:	eba3 0204 	sub.w	r2, r3, r4
 8008fb2:	bf08      	it	eq
 8008fb4:	2300      	moveq	r3, #0
 8008fb6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008fba:	6102      	str	r2, [r0, #16]
 8008fbc:	bf08      	it	eq
 8008fbe:	6143      	streq	r3, [r0, #20]
 8008fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fc4:	f8dc c000 	ldr.w	ip, [ip]
 8008fc8:	fa0c fc08 	lsl.w	ip, ip, r8
 8008fcc:	ea4c 0707 	orr.w	r7, ip, r7
 8008fd0:	f849 7b04 	str.w	r7, [r9], #4
 8008fd4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008fd8:	40cf      	lsrs	r7, r1
 8008fda:	e7d9      	b.n	8008f90 <rshift+0x4c>
 8008fdc:	f851 cb04 	ldr.w	ip, [r1], #4
 8008fe0:	f847 cf04 	str.w	ip, [r7, #4]!
 8008fe4:	e7c2      	b.n	8008f6c <rshift+0x28>
 8008fe6:	4623      	mov	r3, r4
 8008fe8:	e7e0      	b.n	8008fac <rshift+0x68>

08008fea <__hexdig_fun>:
 8008fea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008fee:	2b09      	cmp	r3, #9
 8008ff0:	d802      	bhi.n	8008ff8 <__hexdig_fun+0xe>
 8008ff2:	3820      	subs	r0, #32
 8008ff4:	b2c0      	uxtb	r0, r0
 8008ff6:	4770      	bx	lr
 8008ff8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008ffc:	2b05      	cmp	r3, #5
 8008ffe:	d801      	bhi.n	8009004 <__hexdig_fun+0x1a>
 8009000:	3847      	subs	r0, #71	; 0x47
 8009002:	e7f7      	b.n	8008ff4 <__hexdig_fun+0xa>
 8009004:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009008:	2b05      	cmp	r3, #5
 800900a:	d801      	bhi.n	8009010 <__hexdig_fun+0x26>
 800900c:	3827      	subs	r0, #39	; 0x27
 800900e:	e7f1      	b.n	8008ff4 <__hexdig_fun+0xa>
 8009010:	2000      	movs	r0, #0
 8009012:	4770      	bx	lr

08009014 <__gethex>:
 8009014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009018:	b08b      	sub	sp, #44	; 0x2c
 800901a:	9305      	str	r3, [sp, #20]
 800901c:	4bb2      	ldr	r3, [pc, #712]	; (80092e8 <__gethex+0x2d4>)
 800901e:	9002      	str	r0, [sp, #8]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	468b      	mov	fp, r1
 8009024:	4618      	mov	r0, r3
 8009026:	4690      	mov	r8, r2
 8009028:	9303      	str	r3, [sp, #12]
 800902a:	f7f7 f891 	bl	8000150 <strlen>
 800902e:	4682      	mov	sl, r0
 8009030:	9b03      	ldr	r3, [sp, #12]
 8009032:	f8db 2000 	ldr.w	r2, [fp]
 8009036:	4403      	add	r3, r0
 8009038:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800903c:	9306      	str	r3, [sp, #24]
 800903e:	1c93      	adds	r3, r2, #2
 8009040:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009044:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009048:	32fe      	adds	r2, #254	; 0xfe
 800904a:	18d1      	adds	r1, r2, r3
 800904c:	461f      	mov	r7, r3
 800904e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009052:	9101      	str	r1, [sp, #4]
 8009054:	2830      	cmp	r0, #48	; 0x30
 8009056:	d0f8      	beq.n	800904a <__gethex+0x36>
 8009058:	f7ff ffc7 	bl	8008fea <__hexdig_fun>
 800905c:	4604      	mov	r4, r0
 800905e:	2800      	cmp	r0, #0
 8009060:	d13a      	bne.n	80090d8 <__gethex+0xc4>
 8009062:	4652      	mov	r2, sl
 8009064:	4638      	mov	r0, r7
 8009066:	9903      	ldr	r1, [sp, #12]
 8009068:	f7fe fac6 	bl	80075f8 <strncmp>
 800906c:	4605      	mov	r5, r0
 800906e:	2800      	cmp	r0, #0
 8009070:	d166      	bne.n	8009140 <__gethex+0x12c>
 8009072:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009076:	eb07 060a 	add.w	r6, r7, sl
 800907a:	f7ff ffb6 	bl	8008fea <__hexdig_fun>
 800907e:	2800      	cmp	r0, #0
 8009080:	d060      	beq.n	8009144 <__gethex+0x130>
 8009082:	4633      	mov	r3, r6
 8009084:	7818      	ldrb	r0, [r3, #0]
 8009086:	461f      	mov	r7, r3
 8009088:	2830      	cmp	r0, #48	; 0x30
 800908a:	f103 0301 	add.w	r3, r3, #1
 800908e:	d0f9      	beq.n	8009084 <__gethex+0x70>
 8009090:	f7ff ffab 	bl	8008fea <__hexdig_fun>
 8009094:	2301      	movs	r3, #1
 8009096:	fab0 f480 	clz	r4, r0
 800909a:	4635      	mov	r5, r6
 800909c:	0964      	lsrs	r4, r4, #5
 800909e:	9301      	str	r3, [sp, #4]
 80090a0:	463a      	mov	r2, r7
 80090a2:	4616      	mov	r6, r2
 80090a4:	7830      	ldrb	r0, [r6, #0]
 80090a6:	3201      	adds	r2, #1
 80090a8:	f7ff ff9f 	bl	8008fea <__hexdig_fun>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d1f8      	bne.n	80090a2 <__gethex+0x8e>
 80090b0:	4652      	mov	r2, sl
 80090b2:	4630      	mov	r0, r6
 80090b4:	9903      	ldr	r1, [sp, #12]
 80090b6:	f7fe fa9f 	bl	80075f8 <strncmp>
 80090ba:	b980      	cbnz	r0, 80090de <__gethex+0xca>
 80090bc:	b94d      	cbnz	r5, 80090d2 <__gethex+0xbe>
 80090be:	eb06 050a 	add.w	r5, r6, sl
 80090c2:	462a      	mov	r2, r5
 80090c4:	4616      	mov	r6, r2
 80090c6:	7830      	ldrb	r0, [r6, #0]
 80090c8:	3201      	adds	r2, #1
 80090ca:	f7ff ff8e 	bl	8008fea <__hexdig_fun>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	d1f8      	bne.n	80090c4 <__gethex+0xb0>
 80090d2:	1bad      	subs	r5, r5, r6
 80090d4:	00ad      	lsls	r5, r5, #2
 80090d6:	e004      	b.n	80090e2 <__gethex+0xce>
 80090d8:	2400      	movs	r4, #0
 80090da:	4625      	mov	r5, r4
 80090dc:	e7e0      	b.n	80090a0 <__gethex+0x8c>
 80090de:	2d00      	cmp	r5, #0
 80090e0:	d1f7      	bne.n	80090d2 <__gethex+0xbe>
 80090e2:	7833      	ldrb	r3, [r6, #0]
 80090e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80090e8:	2b50      	cmp	r3, #80	; 0x50
 80090ea:	d139      	bne.n	8009160 <__gethex+0x14c>
 80090ec:	7873      	ldrb	r3, [r6, #1]
 80090ee:	2b2b      	cmp	r3, #43	; 0x2b
 80090f0:	d02a      	beq.n	8009148 <__gethex+0x134>
 80090f2:	2b2d      	cmp	r3, #45	; 0x2d
 80090f4:	d02c      	beq.n	8009150 <__gethex+0x13c>
 80090f6:	f04f 0900 	mov.w	r9, #0
 80090fa:	1c71      	adds	r1, r6, #1
 80090fc:	7808      	ldrb	r0, [r1, #0]
 80090fe:	f7ff ff74 	bl	8008fea <__hexdig_fun>
 8009102:	1e43      	subs	r3, r0, #1
 8009104:	b2db      	uxtb	r3, r3
 8009106:	2b18      	cmp	r3, #24
 8009108:	d82a      	bhi.n	8009160 <__gethex+0x14c>
 800910a:	f1a0 0210 	sub.w	r2, r0, #16
 800910e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009112:	f7ff ff6a 	bl	8008fea <__hexdig_fun>
 8009116:	1e43      	subs	r3, r0, #1
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b18      	cmp	r3, #24
 800911c:	d91b      	bls.n	8009156 <__gethex+0x142>
 800911e:	f1b9 0f00 	cmp.w	r9, #0
 8009122:	d000      	beq.n	8009126 <__gethex+0x112>
 8009124:	4252      	negs	r2, r2
 8009126:	4415      	add	r5, r2
 8009128:	f8cb 1000 	str.w	r1, [fp]
 800912c:	b1d4      	cbz	r4, 8009164 <__gethex+0x150>
 800912e:	9b01      	ldr	r3, [sp, #4]
 8009130:	2b00      	cmp	r3, #0
 8009132:	bf14      	ite	ne
 8009134:	2700      	movne	r7, #0
 8009136:	2706      	moveq	r7, #6
 8009138:	4638      	mov	r0, r7
 800913a:	b00b      	add	sp, #44	; 0x2c
 800913c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009140:	463e      	mov	r6, r7
 8009142:	4625      	mov	r5, r4
 8009144:	2401      	movs	r4, #1
 8009146:	e7cc      	b.n	80090e2 <__gethex+0xce>
 8009148:	f04f 0900 	mov.w	r9, #0
 800914c:	1cb1      	adds	r1, r6, #2
 800914e:	e7d5      	b.n	80090fc <__gethex+0xe8>
 8009150:	f04f 0901 	mov.w	r9, #1
 8009154:	e7fa      	b.n	800914c <__gethex+0x138>
 8009156:	230a      	movs	r3, #10
 8009158:	fb03 0202 	mla	r2, r3, r2, r0
 800915c:	3a10      	subs	r2, #16
 800915e:	e7d6      	b.n	800910e <__gethex+0xfa>
 8009160:	4631      	mov	r1, r6
 8009162:	e7e1      	b.n	8009128 <__gethex+0x114>
 8009164:	4621      	mov	r1, r4
 8009166:	1bf3      	subs	r3, r6, r7
 8009168:	3b01      	subs	r3, #1
 800916a:	2b07      	cmp	r3, #7
 800916c:	dc0a      	bgt.n	8009184 <__gethex+0x170>
 800916e:	9802      	ldr	r0, [sp, #8]
 8009170:	f000 fa88 	bl	8009684 <_Balloc>
 8009174:	4604      	mov	r4, r0
 8009176:	b940      	cbnz	r0, 800918a <__gethex+0x176>
 8009178:	4602      	mov	r2, r0
 800917a:	21de      	movs	r1, #222	; 0xde
 800917c:	4b5b      	ldr	r3, [pc, #364]	; (80092ec <__gethex+0x2d8>)
 800917e:	485c      	ldr	r0, [pc, #368]	; (80092f0 <__gethex+0x2dc>)
 8009180:	f001 f9a8 	bl	800a4d4 <__assert_func>
 8009184:	3101      	adds	r1, #1
 8009186:	105b      	asrs	r3, r3, #1
 8009188:	e7ef      	b.n	800916a <__gethex+0x156>
 800918a:	f04f 0b00 	mov.w	fp, #0
 800918e:	f100 0914 	add.w	r9, r0, #20
 8009192:	f1ca 0301 	rsb	r3, sl, #1
 8009196:	f8cd 9010 	str.w	r9, [sp, #16]
 800919a:	f8cd b004 	str.w	fp, [sp, #4]
 800919e:	9308      	str	r3, [sp, #32]
 80091a0:	42b7      	cmp	r7, r6
 80091a2:	d33f      	bcc.n	8009224 <__gethex+0x210>
 80091a4:	9f04      	ldr	r7, [sp, #16]
 80091a6:	9b01      	ldr	r3, [sp, #4]
 80091a8:	f847 3b04 	str.w	r3, [r7], #4
 80091ac:	eba7 0709 	sub.w	r7, r7, r9
 80091b0:	10bf      	asrs	r7, r7, #2
 80091b2:	6127      	str	r7, [r4, #16]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f000 fb57 	bl	8009868 <__hi0bits>
 80091ba:	017f      	lsls	r7, r7, #5
 80091bc:	f8d8 6000 	ldr.w	r6, [r8]
 80091c0:	1a3f      	subs	r7, r7, r0
 80091c2:	42b7      	cmp	r7, r6
 80091c4:	dd62      	ble.n	800928c <__gethex+0x278>
 80091c6:	1bbf      	subs	r7, r7, r6
 80091c8:	4639      	mov	r1, r7
 80091ca:	4620      	mov	r0, r4
 80091cc:	f000 fef1 	bl	8009fb2 <__any_on>
 80091d0:	4682      	mov	sl, r0
 80091d2:	b1a8      	cbz	r0, 8009200 <__gethex+0x1ec>
 80091d4:	f04f 0a01 	mov.w	sl, #1
 80091d8:	1e7b      	subs	r3, r7, #1
 80091da:	1159      	asrs	r1, r3, #5
 80091dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80091e0:	f003 021f 	and.w	r2, r3, #31
 80091e4:	fa0a f202 	lsl.w	r2, sl, r2
 80091e8:	420a      	tst	r2, r1
 80091ea:	d009      	beq.n	8009200 <__gethex+0x1ec>
 80091ec:	4553      	cmp	r3, sl
 80091ee:	dd05      	ble.n	80091fc <__gethex+0x1e8>
 80091f0:	4620      	mov	r0, r4
 80091f2:	1eb9      	subs	r1, r7, #2
 80091f4:	f000 fedd 	bl	8009fb2 <__any_on>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	d144      	bne.n	8009286 <__gethex+0x272>
 80091fc:	f04f 0a02 	mov.w	sl, #2
 8009200:	4639      	mov	r1, r7
 8009202:	4620      	mov	r0, r4
 8009204:	f7ff fe9e 	bl	8008f44 <rshift>
 8009208:	443d      	add	r5, r7
 800920a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800920e:	42ab      	cmp	r3, r5
 8009210:	da4a      	bge.n	80092a8 <__gethex+0x294>
 8009212:	4621      	mov	r1, r4
 8009214:	9802      	ldr	r0, [sp, #8]
 8009216:	f000 fa75 	bl	8009704 <_Bfree>
 800921a:	2300      	movs	r3, #0
 800921c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800921e:	27a3      	movs	r7, #163	; 0xa3
 8009220:	6013      	str	r3, [r2, #0]
 8009222:	e789      	b.n	8009138 <__gethex+0x124>
 8009224:	1e73      	subs	r3, r6, #1
 8009226:	9a06      	ldr	r2, [sp, #24]
 8009228:	9307      	str	r3, [sp, #28]
 800922a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800922e:	4293      	cmp	r3, r2
 8009230:	d019      	beq.n	8009266 <__gethex+0x252>
 8009232:	f1bb 0f20 	cmp.w	fp, #32
 8009236:	d107      	bne.n	8009248 <__gethex+0x234>
 8009238:	9b04      	ldr	r3, [sp, #16]
 800923a:	9a01      	ldr	r2, [sp, #4]
 800923c:	f843 2b04 	str.w	r2, [r3], #4
 8009240:	9304      	str	r3, [sp, #16]
 8009242:	2300      	movs	r3, #0
 8009244:	469b      	mov	fp, r3
 8009246:	9301      	str	r3, [sp, #4]
 8009248:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800924c:	f7ff fecd 	bl	8008fea <__hexdig_fun>
 8009250:	9b01      	ldr	r3, [sp, #4]
 8009252:	f000 000f 	and.w	r0, r0, #15
 8009256:	fa00 f00b 	lsl.w	r0, r0, fp
 800925a:	4303      	orrs	r3, r0
 800925c:	9301      	str	r3, [sp, #4]
 800925e:	f10b 0b04 	add.w	fp, fp, #4
 8009262:	9b07      	ldr	r3, [sp, #28]
 8009264:	e00d      	b.n	8009282 <__gethex+0x26e>
 8009266:	9a08      	ldr	r2, [sp, #32]
 8009268:	1e73      	subs	r3, r6, #1
 800926a:	4413      	add	r3, r2
 800926c:	42bb      	cmp	r3, r7
 800926e:	d3e0      	bcc.n	8009232 <__gethex+0x21e>
 8009270:	4618      	mov	r0, r3
 8009272:	4652      	mov	r2, sl
 8009274:	9903      	ldr	r1, [sp, #12]
 8009276:	9309      	str	r3, [sp, #36]	; 0x24
 8009278:	f7fe f9be 	bl	80075f8 <strncmp>
 800927c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800927e:	2800      	cmp	r0, #0
 8009280:	d1d7      	bne.n	8009232 <__gethex+0x21e>
 8009282:	461e      	mov	r6, r3
 8009284:	e78c      	b.n	80091a0 <__gethex+0x18c>
 8009286:	f04f 0a03 	mov.w	sl, #3
 800928a:	e7b9      	b.n	8009200 <__gethex+0x1ec>
 800928c:	da09      	bge.n	80092a2 <__gethex+0x28e>
 800928e:	1bf7      	subs	r7, r6, r7
 8009290:	4621      	mov	r1, r4
 8009292:	463a      	mov	r2, r7
 8009294:	9802      	ldr	r0, [sp, #8]
 8009296:	f000 fc4d 	bl	8009b34 <__lshift>
 800929a:	4604      	mov	r4, r0
 800929c:	1bed      	subs	r5, r5, r7
 800929e:	f100 0914 	add.w	r9, r0, #20
 80092a2:	f04f 0a00 	mov.w	sl, #0
 80092a6:	e7b0      	b.n	800920a <__gethex+0x1f6>
 80092a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80092ac:	42a8      	cmp	r0, r5
 80092ae:	dd72      	ble.n	8009396 <__gethex+0x382>
 80092b0:	1b45      	subs	r5, r0, r5
 80092b2:	42ae      	cmp	r6, r5
 80092b4:	dc35      	bgt.n	8009322 <__gethex+0x30e>
 80092b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d029      	beq.n	8009312 <__gethex+0x2fe>
 80092be:	2b03      	cmp	r3, #3
 80092c0:	d02b      	beq.n	800931a <__gethex+0x306>
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d11c      	bne.n	8009300 <__gethex+0x2ec>
 80092c6:	42ae      	cmp	r6, r5
 80092c8:	d11a      	bne.n	8009300 <__gethex+0x2ec>
 80092ca:	2e01      	cmp	r6, #1
 80092cc:	d112      	bne.n	80092f4 <__gethex+0x2e0>
 80092ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80092d2:	9a05      	ldr	r2, [sp, #20]
 80092d4:	2762      	movs	r7, #98	; 0x62
 80092d6:	6013      	str	r3, [r2, #0]
 80092d8:	2301      	movs	r3, #1
 80092da:	6123      	str	r3, [r4, #16]
 80092dc:	f8c9 3000 	str.w	r3, [r9]
 80092e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092e2:	601c      	str	r4, [r3, #0]
 80092e4:	e728      	b.n	8009138 <__gethex+0x124>
 80092e6:	bf00      	nop
 80092e8:	0800b400 	.word	0x0800b400
 80092ec:	0800b387 	.word	0x0800b387
 80092f0:	0800b398 	.word	0x0800b398
 80092f4:	4620      	mov	r0, r4
 80092f6:	1e71      	subs	r1, r6, #1
 80092f8:	f000 fe5b 	bl	8009fb2 <__any_on>
 80092fc:	2800      	cmp	r0, #0
 80092fe:	d1e6      	bne.n	80092ce <__gethex+0x2ba>
 8009300:	4621      	mov	r1, r4
 8009302:	9802      	ldr	r0, [sp, #8]
 8009304:	f000 f9fe 	bl	8009704 <_Bfree>
 8009308:	2300      	movs	r3, #0
 800930a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800930c:	2750      	movs	r7, #80	; 0x50
 800930e:	6013      	str	r3, [r2, #0]
 8009310:	e712      	b.n	8009138 <__gethex+0x124>
 8009312:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009314:	2b00      	cmp	r3, #0
 8009316:	d1f3      	bne.n	8009300 <__gethex+0x2ec>
 8009318:	e7d9      	b.n	80092ce <__gethex+0x2ba>
 800931a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1d6      	bne.n	80092ce <__gethex+0x2ba>
 8009320:	e7ee      	b.n	8009300 <__gethex+0x2ec>
 8009322:	1e6f      	subs	r7, r5, #1
 8009324:	f1ba 0f00 	cmp.w	sl, #0
 8009328:	d132      	bne.n	8009390 <__gethex+0x37c>
 800932a:	b127      	cbz	r7, 8009336 <__gethex+0x322>
 800932c:	4639      	mov	r1, r7
 800932e:	4620      	mov	r0, r4
 8009330:	f000 fe3f 	bl	8009fb2 <__any_on>
 8009334:	4682      	mov	sl, r0
 8009336:	2101      	movs	r1, #1
 8009338:	117b      	asrs	r3, r7, #5
 800933a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800933e:	f007 071f 	and.w	r7, r7, #31
 8009342:	fa01 f707 	lsl.w	r7, r1, r7
 8009346:	421f      	tst	r7, r3
 8009348:	f04f 0702 	mov.w	r7, #2
 800934c:	4629      	mov	r1, r5
 800934e:	4620      	mov	r0, r4
 8009350:	bf18      	it	ne
 8009352:	f04a 0a02 	orrne.w	sl, sl, #2
 8009356:	1b76      	subs	r6, r6, r5
 8009358:	f7ff fdf4 	bl	8008f44 <rshift>
 800935c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009360:	f1ba 0f00 	cmp.w	sl, #0
 8009364:	d048      	beq.n	80093f8 <__gethex+0x3e4>
 8009366:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800936a:	2b02      	cmp	r3, #2
 800936c:	d015      	beq.n	800939a <__gethex+0x386>
 800936e:	2b03      	cmp	r3, #3
 8009370:	d017      	beq.n	80093a2 <__gethex+0x38e>
 8009372:	2b01      	cmp	r3, #1
 8009374:	d109      	bne.n	800938a <__gethex+0x376>
 8009376:	f01a 0f02 	tst.w	sl, #2
 800937a:	d006      	beq.n	800938a <__gethex+0x376>
 800937c:	f8d9 0000 	ldr.w	r0, [r9]
 8009380:	ea4a 0a00 	orr.w	sl, sl, r0
 8009384:	f01a 0f01 	tst.w	sl, #1
 8009388:	d10e      	bne.n	80093a8 <__gethex+0x394>
 800938a:	f047 0710 	orr.w	r7, r7, #16
 800938e:	e033      	b.n	80093f8 <__gethex+0x3e4>
 8009390:	f04f 0a01 	mov.w	sl, #1
 8009394:	e7cf      	b.n	8009336 <__gethex+0x322>
 8009396:	2701      	movs	r7, #1
 8009398:	e7e2      	b.n	8009360 <__gethex+0x34c>
 800939a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800939c:	f1c3 0301 	rsb	r3, r3, #1
 80093a0:	9315      	str	r3, [sp, #84]	; 0x54
 80093a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d0f0      	beq.n	800938a <__gethex+0x376>
 80093a8:	f04f 0c00 	mov.w	ip, #0
 80093ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80093b0:	f104 0314 	add.w	r3, r4, #20
 80093b4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80093b8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80093bc:	4618      	mov	r0, r3
 80093be:	f853 2b04 	ldr.w	r2, [r3], #4
 80093c2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80093c6:	d01c      	beq.n	8009402 <__gethex+0x3ee>
 80093c8:	3201      	adds	r2, #1
 80093ca:	6002      	str	r2, [r0, #0]
 80093cc:	2f02      	cmp	r7, #2
 80093ce:	f104 0314 	add.w	r3, r4, #20
 80093d2:	d13d      	bne.n	8009450 <__gethex+0x43c>
 80093d4:	f8d8 2000 	ldr.w	r2, [r8]
 80093d8:	3a01      	subs	r2, #1
 80093da:	42b2      	cmp	r2, r6
 80093dc:	d10a      	bne.n	80093f4 <__gethex+0x3e0>
 80093de:	2201      	movs	r2, #1
 80093e0:	1171      	asrs	r1, r6, #5
 80093e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80093e6:	f006 061f 	and.w	r6, r6, #31
 80093ea:	fa02 f606 	lsl.w	r6, r2, r6
 80093ee:	421e      	tst	r6, r3
 80093f0:	bf18      	it	ne
 80093f2:	4617      	movne	r7, r2
 80093f4:	f047 0720 	orr.w	r7, r7, #32
 80093f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093fa:	601c      	str	r4, [r3, #0]
 80093fc:	9b05      	ldr	r3, [sp, #20]
 80093fe:	601d      	str	r5, [r3, #0]
 8009400:	e69a      	b.n	8009138 <__gethex+0x124>
 8009402:	4299      	cmp	r1, r3
 8009404:	f843 cc04 	str.w	ip, [r3, #-4]
 8009408:	d8d8      	bhi.n	80093bc <__gethex+0x3a8>
 800940a:	68a3      	ldr	r3, [r4, #8]
 800940c:	459b      	cmp	fp, r3
 800940e:	db17      	blt.n	8009440 <__gethex+0x42c>
 8009410:	6861      	ldr	r1, [r4, #4]
 8009412:	9802      	ldr	r0, [sp, #8]
 8009414:	3101      	adds	r1, #1
 8009416:	f000 f935 	bl	8009684 <_Balloc>
 800941a:	4681      	mov	r9, r0
 800941c:	b918      	cbnz	r0, 8009426 <__gethex+0x412>
 800941e:	4602      	mov	r2, r0
 8009420:	2184      	movs	r1, #132	; 0x84
 8009422:	4b19      	ldr	r3, [pc, #100]	; (8009488 <__gethex+0x474>)
 8009424:	e6ab      	b.n	800917e <__gethex+0x16a>
 8009426:	6922      	ldr	r2, [r4, #16]
 8009428:	f104 010c 	add.w	r1, r4, #12
 800942c:	3202      	adds	r2, #2
 800942e:	0092      	lsls	r2, r2, #2
 8009430:	300c      	adds	r0, #12
 8009432:	f000 f919 	bl	8009668 <memcpy>
 8009436:	4621      	mov	r1, r4
 8009438:	9802      	ldr	r0, [sp, #8]
 800943a:	f000 f963 	bl	8009704 <_Bfree>
 800943e:	464c      	mov	r4, r9
 8009440:	6923      	ldr	r3, [r4, #16]
 8009442:	1c5a      	adds	r2, r3, #1
 8009444:	6122      	str	r2, [r4, #16]
 8009446:	2201      	movs	r2, #1
 8009448:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800944c:	615a      	str	r2, [r3, #20]
 800944e:	e7bd      	b.n	80093cc <__gethex+0x3b8>
 8009450:	6922      	ldr	r2, [r4, #16]
 8009452:	455a      	cmp	r2, fp
 8009454:	dd0b      	ble.n	800946e <__gethex+0x45a>
 8009456:	2101      	movs	r1, #1
 8009458:	4620      	mov	r0, r4
 800945a:	f7ff fd73 	bl	8008f44 <rshift>
 800945e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009462:	3501      	adds	r5, #1
 8009464:	42ab      	cmp	r3, r5
 8009466:	f6ff aed4 	blt.w	8009212 <__gethex+0x1fe>
 800946a:	2701      	movs	r7, #1
 800946c:	e7c2      	b.n	80093f4 <__gethex+0x3e0>
 800946e:	f016 061f 	ands.w	r6, r6, #31
 8009472:	d0fa      	beq.n	800946a <__gethex+0x456>
 8009474:	4453      	add	r3, sl
 8009476:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800947a:	f000 f9f5 	bl	8009868 <__hi0bits>
 800947e:	f1c6 0620 	rsb	r6, r6, #32
 8009482:	42b0      	cmp	r0, r6
 8009484:	dbe7      	blt.n	8009456 <__gethex+0x442>
 8009486:	e7f0      	b.n	800946a <__gethex+0x456>
 8009488:	0800b387 	.word	0x0800b387

0800948c <L_shift>:
 800948c:	f1c2 0208 	rsb	r2, r2, #8
 8009490:	0092      	lsls	r2, r2, #2
 8009492:	b570      	push	{r4, r5, r6, lr}
 8009494:	f1c2 0620 	rsb	r6, r2, #32
 8009498:	6843      	ldr	r3, [r0, #4]
 800949a:	6804      	ldr	r4, [r0, #0]
 800949c:	fa03 f506 	lsl.w	r5, r3, r6
 80094a0:	432c      	orrs	r4, r5
 80094a2:	40d3      	lsrs	r3, r2
 80094a4:	6004      	str	r4, [r0, #0]
 80094a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80094aa:	4288      	cmp	r0, r1
 80094ac:	d3f4      	bcc.n	8009498 <L_shift+0xc>
 80094ae:	bd70      	pop	{r4, r5, r6, pc}

080094b0 <__match>:
 80094b0:	b530      	push	{r4, r5, lr}
 80094b2:	6803      	ldr	r3, [r0, #0]
 80094b4:	3301      	adds	r3, #1
 80094b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094ba:	b914      	cbnz	r4, 80094c2 <__match+0x12>
 80094bc:	6003      	str	r3, [r0, #0]
 80094be:	2001      	movs	r0, #1
 80094c0:	bd30      	pop	{r4, r5, pc}
 80094c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80094ca:	2d19      	cmp	r5, #25
 80094cc:	bf98      	it	ls
 80094ce:	3220      	addls	r2, #32
 80094d0:	42a2      	cmp	r2, r4
 80094d2:	d0f0      	beq.n	80094b6 <__match+0x6>
 80094d4:	2000      	movs	r0, #0
 80094d6:	e7f3      	b.n	80094c0 <__match+0x10>

080094d8 <__hexnan>:
 80094d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094dc:	2500      	movs	r5, #0
 80094de:	680b      	ldr	r3, [r1, #0]
 80094e0:	4682      	mov	sl, r0
 80094e2:	115e      	asrs	r6, r3, #5
 80094e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80094e8:	f013 031f 	ands.w	r3, r3, #31
 80094ec:	bf18      	it	ne
 80094ee:	3604      	addne	r6, #4
 80094f0:	1f37      	subs	r7, r6, #4
 80094f2:	46b9      	mov	r9, r7
 80094f4:	463c      	mov	r4, r7
 80094f6:	46ab      	mov	fp, r5
 80094f8:	b087      	sub	sp, #28
 80094fa:	4690      	mov	r8, r2
 80094fc:	6802      	ldr	r2, [r0, #0]
 80094fe:	9301      	str	r3, [sp, #4]
 8009500:	f846 5c04 	str.w	r5, [r6, #-4]
 8009504:	9502      	str	r5, [sp, #8]
 8009506:	7851      	ldrb	r1, [r2, #1]
 8009508:	1c53      	adds	r3, r2, #1
 800950a:	9303      	str	r3, [sp, #12]
 800950c:	b341      	cbz	r1, 8009560 <__hexnan+0x88>
 800950e:	4608      	mov	r0, r1
 8009510:	9205      	str	r2, [sp, #20]
 8009512:	9104      	str	r1, [sp, #16]
 8009514:	f7ff fd69 	bl	8008fea <__hexdig_fun>
 8009518:	2800      	cmp	r0, #0
 800951a:	d14f      	bne.n	80095bc <__hexnan+0xe4>
 800951c:	9904      	ldr	r1, [sp, #16]
 800951e:	9a05      	ldr	r2, [sp, #20]
 8009520:	2920      	cmp	r1, #32
 8009522:	d818      	bhi.n	8009556 <__hexnan+0x7e>
 8009524:	9b02      	ldr	r3, [sp, #8]
 8009526:	459b      	cmp	fp, r3
 8009528:	dd13      	ble.n	8009552 <__hexnan+0x7a>
 800952a:	454c      	cmp	r4, r9
 800952c:	d206      	bcs.n	800953c <__hexnan+0x64>
 800952e:	2d07      	cmp	r5, #7
 8009530:	dc04      	bgt.n	800953c <__hexnan+0x64>
 8009532:	462a      	mov	r2, r5
 8009534:	4649      	mov	r1, r9
 8009536:	4620      	mov	r0, r4
 8009538:	f7ff ffa8 	bl	800948c <L_shift>
 800953c:	4544      	cmp	r4, r8
 800953e:	d950      	bls.n	80095e2 <__hexnan+0x10a>
 8009540:	2300      	movs	r3, #0
 8009542:	f1a4 0904 	sub.w	r9, r4, #4
 8009546:	f844 3c04 	str.w	r3, [r4, #-4]
 800954a:	461d      	mov	r5, r3
 800954c:	464c      	mov	r4, r9
 800954e:	f8cd b008 	str.w	fp, [sp, #8]
 8009552:	9a03      	ldr	r2, [sp, #12]
 8009554:	e7d7      	b.n	8009506 <__hexnan+0x2e>
 8009556:	2929      	cmp	r1, #41	; 0x29
 8009558:	d156      	bne.n	8009608 <__hexnan+0x130>
 800955a:	3202      	adds	r2, #2
 800955c:	f8ca 2000 	str.w	r2, [sl]
 8009560:	f1bb 0f00 	cmp.w	fp, #0
 8009564:	d050      	beq.n	8009608 <__hexnan+0x130>
 8009566:	454c      	cmp	r4, r9
 8009568:	d206      	bcs.n	8009578 <__hexnan+0xa0>
 800956a:	2d07      	cmp	r5, #7
 800956c:	dc04      	bgt.n	8009578 <__hexnan+0xa0>
 800956e:	462a      	mov	r2, r5
 8009570:	4649      	mov	r1, r9
 8009572:	4620      	mov	r0, r4
 8009574:	f7ff ff8a 	bl	800948c <L_shift>
 8009578:	4544      	cmp	r4, r8
 800957a:	d934      	bls.n	80095e6 <__hexnan+0x10e>
 800957c:	4623      	mov	r3, r4
 800957e:	f1a8 0204 	sub.w	r2, r8, #4
 8009582:	f853 1b04 	ldr.w	r1, [r3], #4
 8009586:	429f      	cmp	r7, r3
 8009588:	f842 1f04 	str.w	r1, [r2, #4]!
 800958c:	d2f9      	bcs.n	8009582 <__hexnan+0xaa>
 800958e:	1b3b      	subs	r3, r7, r4
 8009590:	f023 0303 	bic.w	r3, r3, #3
 8009594:	3304      	adds	r3, #4
 8009596:	3401      	adds	r4, #1
 8009598:	3e03      	subs	r6, #3
 800959a:	42b4      	cmp	r4, r6
 800959c:	bf88      	it	hi
 800959e:	2304      	movhi	r3, #4
 80095a0:	2200      	movs	r2, #0
 80095a2:	4443      	add	r3, r8
 80095a4:	f843 2b04 	str.w	r2, [r3], #4
 80095a8:	429f      	cmp	r7, r3
 80095aa:	d2fb      	bcs.n	80095a4 <__hexnan+0xcc>
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	b91b      	cbnz	r3, 80095b8 <__hexnan+0xe0>
 80095b0:	4547      	cmp	r7, r8
 80095b2:	d127      	bne.n	8009604 <__hexnan+0x12c>
 80095b4:	2301      	movs	r3, #1
 80095b6:	603b      	str	r3, [r7, #0]
 80095b8:	2005      	movs	r0, #5
 80095ba:	e026      	b.n	800960a <__hexnan+0x132>
 80095bc:	3501      	adds	r5, #1
 80095be:	2d08      	cmp	r5, #8
 80095c0:	f10b 0b01 	add.w	fp, fp, #1
 80095c4:	dd06      	ble.n	80095d4 <__hexnan+0xfc>
 80095c6:	4544      	cmp	r4, r8
 80095c8:	d9c3      	bls.n	8009552 <__hexnan+0x7a>
 80095ca:	2300      	movs	r3, #0
 80095cc:	2501      	movs	r5, #1
 80095ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80095d2:	3c04      	subs	r4, #4
 80095d4:	6822      	ldr	r2, [r4, #0]
 80095d6:	f000 000f 	and.w	r0, r0, #15
 80095da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80095de:	6022      	str	r2, [r4, #0]
 80095e0:	e7b7      	b.n	8009552 <__hexnan+0x7a>
 80095e2:	2508      	movs	r5, #8
 80095e4:	e7b5      	b.n	8009552 <__hexnan+0x7a>
 80095e6:	9b01      	ldr	r3, [sp, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d0df      	beq.n	80095ac <__hexnan+0xd4>
 80095ec:	f04f 32ff 	mov.w	r2, #4294967295
 80095f0:	f1c3 0320 	rsb	r3, r3, #32
 80095f4:	fa22 f303 	lsr.w	r3, r2, r3
 80095f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80095fc:	401a      	ands	r2, r3
 80095fe:	f846 2c04 	str.w	r2, [r6, #-4]
 8009602:	e7d3      	b.n	80095ac <__hexnan+0xd4>
 8009604:	3f04      	subs	r7, #4
 8009606:	e7d1      	b.n	80095ac <__hexnan+0xd4>
 8009608:	2004      	movs	r0, #4
 800960a:	b007      	add	sp, #28
 800960c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009610 <_localeconv_r>:
 8009610:	4800      	ldr	r0, [pc, #0]	; (8009614 <_localeconv_r+0x4>)
 8009612:	4770      	bx	lr
 8009614:	20000170 	.word	0x20000170

08009618 <malloc>:
 8009618:	4b02      	ldr	r3, [pc, #8]	; (8009624 <malloc+0xc>)
 800961a:	4601      	mov	r1, r0
 800961c:	6818      	ldr	r0, [r3, #0]
 800961e:	f000 bd65 	b.w	800a0ec <_malloc_r>
 8009622:	bf00      	nop
 8009624:	20000018 	.word	0x20000018

08009628 <__ascii_mbtowc>:
 8009628:	b082      	sub	sp, #8
 800962a:	b901      	cbnz	r1, 800962e <__ascii_mbtowc+0x6>
 800962c:	a901      	add	r1, sp, #4
 800962e:	b142      	cbz	r2, 8009642 <__ascii_mbtowc+0x1a>
 8009630:	b14b      	cbz	r3, 8009646 <__ascii_mbtowc+0x1e>
 8009632:	7813      	ldrb	r3, [r2, #0]
 8009634:	600b      	str	r3, [r1, #0]
 8009636:	7812      	ldrb	r2, [r2, #0]
 8009638:	1e10      	subs	r0, r2, #0
 800963a:	bf18      	it	ne
 800963c:	2001      	movne	r0, #1
 800963e:	b002      	add	sp, #8
 8009640:	4770      	bx	lr
 8009642:	4610      	mov	r0, r2
 8009644:	e7fb      	b.n	800963e <__ascii_mbtowc+0x16>
 8009646:	f06f 0001 	mvn.w	r0, #1
 800964a:	e7f8      	b.n	800963e <__ascii_mbtowc+0x16>

0800964c <memchr>:
 800964c:	4603      	mov	r3, r0
 800964e:	b510      	push	{r4, lr}
 8009650:	b2c9      	uxtb	r1, r1
 8009652:	4402      	add	r2, r0
 8009654:	4293      	cmp	r3, r2
 8009656:	4618      	mov	r0, r3
 8009658:	d101      	bne.n	800965e <memchr+0x12>
 800965a:	2000      	movs	r0, #0
 800965c:	e003      	b.n	8009666 <memchr+0x1a>
 800965e:	7804      	ldrb	r4, [r0, #0]
 8009660:	3301      	adds	r3, #1
 8009662:	428c      	cmp	r4, r1
 8009664:	d1f6      	bne.n	8009654 <memchr+0x8>
 8009666:	bd10      	pop	{r4, pc}

08009668 <memcpy>:
 8009668:	440a      	add	r2, r1
 800966a:	4291      	cmp	r1, r2
 800966c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009670:	d100      	bne.n	8009674 <memcpy+0xc>
 8009672:	4770      	bx	lr
 8009674:	b510      	push	{r4, lr}
 8009676:	f811 4b01 	ldrb.w	r4, [r1], #1
 800967a:	4291      	cmp	r1, r2
 800967c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009680:	d1f9      	bne.n	8009676 <memcpy+0xe>
 8009682:	bd10      	pop	{r4, pc}

08009684 <_Balloc>:
 8009684:	b570      	push	{r4, r5, r6, lr}
 8009686:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009688:	4604      	mov	r4, r0
 800968a:	460d      	mov	r5, r1
 800968c:	b976      	cbnz	r6, 80096ac <_Balloc+0x28>
 800968e:	2010      	movs	r0, #16
 8009690:	f7ff ffc2 	bl	8009618 <malloc>
 8009694:	4602      	mov	r2, r0
 8009696:	6260      	str	r0, [r4, #36]	; 0x24
 8009698:	b920      	cbnz	r0, 80096a4 <_Balloc+0x20>
 800969a:	2166      	movs	r1, #102	; 0x66
 800969c:	4b17      	ldr	r3, [pc, #92]	; (80096fc <_Balloc+0x78>)
 800969e:	4818      	ldr	r0, [pc, #96]	; (8009700 <_Balloc+0x7c>)
 80096a0:	f000 ff18 	bl	800a4d4 <__assert_func>
 80096a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096a8:	6006      	str	r6, [r0, #0]
 80096aa:	60c6      	str	r6, [r0, #12]
 80096ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80096ae:	68f3      	ldr	r3, [r6, #12]
 80096b0:	b183      	cbz	r3, 80096d4 <_Balloc+0x50>
 80096b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80096ba:	b9b8      	cbnz	r0, 80096ec <_Balloc+0x68>
 80096bc:	2101      	movs	r1, #1
 80096be:	fa01 f605 	lsl.w	r6, r1, r5
 80096c2:	1d72      	adds	r2, r6, #5
 80096c4:	4620      	mov	r0, r4
 80096c6:	0092      	lsls	r2, r2, #2
 80096c8:	f000 fc94 	bl	8009ff4 <_calloc_r>
 80096cc:	b160      	cbz	r0, 80096e8 <_Balloc+0x64>
 80096ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80096d2:	e00e      	b.n	80096f2 <_Balloc+0x6e>
 80096d4:	2221      	movs	r2, #33	; 0x21
 80096d6:	2104      	movs	r1, #4
 80096d8:	4620      	mov	r0, r4
 80096da:	f000 fc8b 	bl	8009ff4 <_calloc_r>
 80096de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096e0:	60f0      	str	r0, [r6, #12]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1e4      	bne.n	80096b2 <_Balloc+0x2e>
 80096e8:	2000      	movs	r0, #0
 80096ea:	bd70      	pop	{r4, r5, r6, pc}
 80096ec:	6802      	ldr	r2, [r0, #0]
 80096ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80096f2:	2300      	movs	r3, #0
 80096f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096f8:	e7f7      	b.n	80096ea <_Balloc+0x66>
 80096fa:	bf00      	nop
 80096fc:	0800b315 	.word	0x0800b315
 8009700:	0800b414 	.word	0x0800b414

08009704 <_Bfree>:
 8009704:	b570      	push	{r4, r5, r6, lr}
 8009706:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009708:	4605      	mov	r5, r0
 800970a:	460c      	mov	r4, r1
 800970c:	b976      	cbnz	r6, 800972c <_Bfree+0x28>
 800970e:	2010      	movs	r0, #16
 8009710:	f7ff ff82 	bl	8009618 <malloc>
 8009714:	4602      	mov	r2, r0
 8009716:	6268      	str	r0, [r5, #36]	; 0x24
 8009718:	b920      	cbnz	r0, 8009724 <_Bfree+0x20>
 800971a:	218a      	movs	r1, #138	; 0x8a
 800971c:	4b08      	ldr	r3, [pc, #32]	; (8009740 <_Bfree+0x3c>)
 800971e:	4809      	ldr	r0, [pc, #36]	; (8009744 <_Bfree+0x40>)
 8009720:	f000 fed8 	bl	800a4d4 <__assert_func>
 8009724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009728:	6006      	str	r6, [r0, #0]
 800972a:	60c6      	str	r6, [r0, #12]
 800972c:	b13c      	cbz	r4, 800973e <_Bfree+0x3a>
 800972e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009730:	6862      	ldr	r2, [r4, #4]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009738:	6021      	str	r1, [r4, #0]
 800973a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800973e:	bd70      	pop	{r4, r5, r6, pc}
 8009740:	0800b315 	.word	0x0800b315
 8009744:	0800b414 	.word	0x0800b414

08009748 <__multadd>:
 8009748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800974c:	4607      	mov	r7, r0
 800974e:	460c      	mov	r4, r1
 8009750:	461e      	mov	r6, r3
 8009752:	2000      	movs	r0, #0
 8009754:	690d      	ldr	r5, [r1, #16]
 8009756:	f101 0c14 	add.w	ip, r1, #20
 800975a:	f8dc 3000 	ldr.w	r3, [ip]
 800975e:	3001      	adds	r0, #1
 8009760:	b299      	uxth	r1, r3
 8009762:	fb02 6101 	mla	r1, r2, r1, r6
 8009766:	0c1e      	lsrs	r6, r3, #16
 8009768:	0c0b      	lsrs	r3, r1, #16
 800976a:	fb02 3306 	mla	r3, r2, r6, r3
 800976e:	b289      	uxth	r1, r1
 8009770:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009774:	4285      	cmp	r5, r0
 8009776:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800977a:	f84c 1b04 	str.w	r1, [ip], #4
 800977e:	dcec      	bgt.n	800975a <__multadd+0x12>
 8009780:	b30e      	cbz	r6, 80097c6 <__multadd+0x7e>
 8009782:	68a3      	ldr	r3, [r4, #8]
 8009784:	42ab      	cmp	r3, r5
 8009786:	dc19      	bgt.n	80097bc <__multadd+0x74>
 8009788:	6861      	ldr	r1, [r4, #4]
 800978a:	4638      	mov	r0, r7
 800978c:	3101      	adds	r1, #1
 800978e:	f7ff ff79 	bl	8009684 <_Balloc>
 8009792:	4680      	mov	r8, r0
 8009794:	b928      	cbnz	r0, 80097a2 <__multadd+0x5a>
 8009796:	4602      	mov	r2, r0
 8009798:	21b5      	movs	r1, #181	; 0xb5
 800979a:	4b0c      	ldr	r3, [pc, #48]	; (80097cc <__multadd+0x84>)
 800979c:	480c      	ldr	r0, [pc, #48]	; (80097d0 <__multadd+0x88>)
 800979e:	f000 fe99 	bl	800a4d4 <__assert_func>
 80097a2:	6922      	ldr	r2, [r4, #16]
 80097a4:	f104 010c 	add.w	r1, r4, #12
 80097a8:	3202      	adds	r2, #2
 80097aa:	0092      	lsls	r2, r2, #2
 80097ac:	300c      	adds	r0, #12
 80097ae:	f7ff ff5b 	bl	8009668 <memcpy>
 80097b2:	4621      	mov	r1, r4
 80097b4:	4638      	mov	r0, r7
 80097b6:	f7ff ffa5 	bl	8009704 <_Bfree>
 80097ba:	4644      	mov	r4, r8
 80097bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80097c0:	3501      	adds	r5, #1
 80097c2:	615e      	str	r6, [r3, #20]
 80097c4:	6125      	str	r5, [r4, #16]
 80097c6:	4620      	mov	r0, r4
 80097c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097cc:	0800b387 	.word	0x0800b387
 80097d0:	0800b414 	.word	0x0800b414

080097d4 <__s2b>:
 80097d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097d8:	4615      	mov	r5, r2
 80097da:	2209      	movs	r2, #9
 80097dc:	461f      	mov	r7, r3
 80097de:	3308      	adds	r3, #8
 80097e0:	460c      	mov	r4, r1
 80097e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80097e6:	4606      	mov	r6, r0
 80097e8:	2201      	movs	r2, #1
 80097ea:	2100      	movs	r1, #0
 80097ec:	429a      	cmp	r2, r3
 80097ee:	db09      	blt.n	8009804 <__s2b+0x30>
 80097f0:	4630      	mov	r0, r6
 80097f2:	f7ff ff47 	bl	8009684 <_Balloc>
 80097f6:	b940      	cbnz	r0, 800980a <__s2b+0x36>
 80097f8:	4602      	mov	r2, r0
 80097fa:	21ce      	movs	r1, #206	; 0xce
 80097fc:	4b18      	ldr	r3, [pc, #96]	; (8009860 <__s2b+0x8c>)
 80097fe:	4819      	ldr	r0, [pc, #100]	; (8009864 <__s2b+0x90>)
 8009800:	f000 fe68 	bl	800a4d4 <__assert_func>
 8009804:	0052      	lsls	r2, r2, #1
 8009806:	3101      	adds	r1, #1
 8009808:	e7f0      	b.n	80097ec <__s2b+0x18>
 800980a:	9b08      	ldr	r3, [sp, #32]
 800980c:	2d09      	cmp	r5, #9
 800980e:	6143      	str	r3, [r0, #20]
 8009810:	f04f 0301 	mov.w	r3, #1
 8009814:	6103      	str	r3, [r0, #16]
 8009816:	dd16      	ble.n	8009846 <__s2b+0x72>
 8009818:	f104 0909 	add.w	r9, r4, #9
 800981c:	46c8      	mov	r8, r9
 800981e:	442c      	add	r4, r5
 8009820:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009824:	4601      	mov	r1, r0
 8009826:	220a      	movs	r2, #10
 8009828:	4630      	mov	r0, r6
 800982a:	3b30      	subs	r3, #48	; 0x30
 800982c:	f7ff ff8c 	bl	8009748 <__multadd>
 8009830:	45a0      	cmp	r8, r4
 8009832:	d1f5      	bne.n	8009820 <__s2b+0x4c>
 8009834:	f1a5 0408 	sub.w	r4, r5, #8
 8009838:	444c      	add	r4, r9
 800983a:	1b2d      	subs	r5, r5, r4
 800983c:	1963      	adds	r3, r4, r5
 800983e:	42bb      	cmp	r3, r7
 8009840:	db04      	blt.n	800984c <__s2b+0x78>
 8009842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009846:	2509      	movs	r5, #9
 8009848:	340a      	adds	r4, #10
 800984a:	e7f6      	b.n	800983a <__s2b+0x66>
 800984c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009850:	4601      	mov	r1, r0
 8009852:	220a      	movs	r2, #10
 8009854:	4630      	mov	r0, r6
 8009856:	3b30      	subs	r3, #48	; 0x30
 8009858:	f7ff ff76 	bl	8009748 <__multadd>
 800985c:	e7ee      	b.n	800983c <__s2b+0x68>
 800985e:	bf00      	nop
 8009860:	0800b387 	.word	0x0800b387
 8009864:	0800b414 	.word	0x0800b414

08009868 <__hi0bits>:
 8009868:	0c02      	lsrs	r2, r0, #16
 800986a:	0412      	lsls	r2, r2, #16
 800986c:	4603      	mov	r3, r0
 800986e:	b9ca      	cbnz	r2, 80098a4 <__hi0bits+0x3c>
 8009870:	0403      	lsls	r3, r0, #16
 8009872:	2010      	movs	r0, #16
 8009874:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009878:	bf04      	itt	eq
 800987a:	021b      	lsleq	r3, r3, #8
 800987c:	3008      	addeq	r0, #8
 800987e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009882:	bf04      	itt	eq
 8009884:	011b      	lsleq	r3, r3, #4
 8009886:	3004      	addeq	r0, #4
 8009888:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800988c:	bf04      	itt	eq
 800988e:	009b      	lsleq	r3, r3, #2
 8009890:	3002      	addeq	r0, #2
 8009892:	2b00      	cmp	r3, #0
 8009894:	db05      	blt.n	80098a2 <__hi0bits+0x3a>
 8009896:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800989a:	f100 0001 	add.w	r0, r0, #1
 800989e:	bf08      	it	eq
 80098a0:	2020      	moveq	r0, #32
 80098a2:	4770      	bx	lr
 80098a4:	2000      	movs	r0, #0
 80098a6:	e7e5      	b.n	8009874 <__hi0bits+0xc>

080098a8 <__lo0bits>:
 80098a8:	6803      	ldr	r3, [r0, #0]
 80098aa:	4602      	mov	r2, r0
 80098ac:	f013 0007 	ands.w	r0, r3, #7
 80098b0:	d00b      	beq.n	80098ca <__lo0bits+0x22>
 80098b2:	07d9      	lsls	r1, r3, #31
 80098b4:	d421      	bmi.n	80098fa <__lo0bits+0x52>
 80098b6:	0798      	lsls	r0, r3, #30
 80098b8:	bf49      	itett	mi
 80098ba:	085b      	lsrmi	r3, r3, #1
 80098bc:	089b      	lsrpl	r3, r3, #2
 80098be:	2001      	movmi	r0, #1
 80098c0:	6013      	strmi	r3, [r2, #0]
 80098c2:	bf5c      	itt	pl
 80098c4:	2002      	movpl	r0, #2
 80098c6:	6013      	strpl	r3, [r2, #0]
 80098c8:	4770      	bx	lr
 80098ca:	b299      	uxth	r1, r3
 80098cc:	b909      	cbnz	r1, 80098d2 <__lo0bits+0x2a>
 80098ce:	2010      	movs	r0, #16
 80098d0:	0c1b      	lsrs	r3, r3, #16
 80098d2:	b2d9      	uxtb	r1, r3
 80098d4:	b909      	cbnz	r1, 80098da <__lo0bits+0x32>
 80098d6:	3008      	adds	r0, #8
 80098d8:	0a1b      	lsrs	r3, r3, #8
 80098da:	0719      	lsls	r1, r3, #28
 80098dc:	bf04      	itt	eq
 80098de:	091b      	lsreq	r3, r3, #4
 80098e0:	3004      	addeq	r0, #4
 80098e2:	0799      	lsls	r1, r3, #30
 80098e4:	bf04      	itt	eq
 80098e6:	089b      	lsreq	r3, r3, #2
 80098e8:	3002      	addeq	r0, #2
 80098ea:	07d9      	lsls	r1, r3, #31
 80098ec:	d403      	bmi.n	80098f6 <__lo0bits+0x4e>
 80098ee:	085b      	lsrs	r3, r3, #1
 80098f0:	f100 0001 	add.w	r0, r0, #1
 80098f4:	d003      	beq.n	80098fe <__lo0bits+0x56>
 80098f6:	6013      	str	r3, [r2, #0]
 80098f8:	4770      	bx	lr
 80098fa:	2000      	movs	r0, #0
 80098fc:	4770      	bx	lr
 80098fe:	2020      	movs	r0, #32
 8009900:	4770      	bx	lr
	...

08009904 <__i2b>:
 8009904:	b510      	push	{r4, lr}
 8009906:	460c      	mov	r4, r1
 8009908:	2101      	movs	r1, #1
 800990a:	f7ff febb 	bl	8009684 <_Balloc>
 800990e:	4602      	mov	r2, r0
 8009910:	b928      	cbnz	r0, 800991e <__i2b+0x1a>
 8009912:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009916:	4b04      	ldr	r3, [pc, #16]	; (8009928 <__i2b+0x24>)
 8009918:	4804      	ldr	r0, [pc, #16]	; (800992c <__i2b+0x28>)
 800991a:	f000 fddb 	bl	800a4d4 <__assert_func>
 800991e:	2301      	movs	r3, #1
 8009920:	6144      	str	r4, [r0, #20]
 8009922:	6103      	str	r3, [r0, #16]
 8009924:	bd10      	pop	{r4, pc}
 8009926:	bf00      	nop
 8009928:	0800b387 	.word	0x0800b387
 800992c:	0800b414 	.word	0x0800b414

08009930 <__multiply>:
 8009930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009934:	4691      	mov	r9, r2
 8009936:	690a      	ldr	r2, [r1, #16]
 8009938:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800993c:	460c      	mov	r4, r1
 800993e:	429a      	cmp	r2, r3
 8009940:	bfbe      	ittt	lt
 8009942:	460b      	movlt	r3, r1
 8009944:	464c      	movlt	r4, r9
 8009946:	4699      	movlt	r9, r3
 8009948:	6927      	ldr	r7, [r4, #16]
 800994a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800994e:	68a3      	ldr	r3, [r4, #8]
 8009950:	6861      	ldr	r1, [r4, #4]
 8009952:	eb07 060a 	add.w	r6, r7, sl
 8009956:	42b3      	cmp	r3, r6
 8009958:	b085      	sub	sp, #20
 800995a:	bfb8      	it	lt
 800995c:	3101      	addlt	r1, #1
 800995e:	f7ff fe91 	bl	8009684 <_Balloc>
 8009962:	b930      	cbnz	r0, 8009972 <__multiply+0x42>
 8009964:	4602      	mov	r2, r0
 8009966:	f240 115d 	movw	r1, #349	; 0x15d
 800996a:	4b43      	ldr	r3, [pc, #268]	; (8009a78 <__multiply+0x148>)
 800996c:	4843      	ldr	r0, [pc, #268]	; (8009a7c <__multiply+0x14c>)
 800996e:	f000 fdb1 	bl	800a4d4 <__assert_func>
 8009972:	f100 0514 	add.w	r5, r0, #20
 8009976:	462b      	mov	r3, r5
 8009978:	2200      	movs	r2, #0
 800997a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800997e:	4543      	cmp	r3, r8
 8009980:	d321      	bcc.n	80099c6 <__multiply+0x96>
 8009982:	f104 0314 	add.w	r3, r4, #20
 8009986:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800998a:	f109 0314 	add.w	r3, r9, #20
 800998e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009992:	9202      	str	r2, [sp, #8]
 8009994:	1b3a      	subs	r2, r7, r4
 8009996:	3a15      	subs	r2, #21
 8009998:	f022 0203 	bic.w	r2, r2, #3
 800999c:	3204      	adds	r2, #4
 800999e:	f104 0115 	add.w	r1, r4, #21
 80099a2:	428f      	cmp	r7, r1
 80099a4:	bf38      	it	cc
 80099a6:	2204      	movcc	r2, #4
 80099a8:	9201      	str	r2, [sp, #4]
 80099aa:	9a02      	ldr	r2, [sp, #8]
 80099ac:	9303      	str	r3, [sp, #12]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d80c      	bhi.n	80099cc <__multiply+0x9c>
 80099b2:	2e00      	cmp	r6, #0
 80099b4:	dd03      	ble.n	80099be <__multiply+0x8e>
 80099b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d059      	beq.n	8009a72 <__multiply+0x142>
 80099be:	6106      	str	r6, [r0, #16]
 80099c0:	b005      	add	sp, #20
 80099c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c6:	f843 2b04 	str.w	r2, [r3], #4
 80099ca:	e7d8      	b.n	800997e <__multiply+0x4e>
 80099cc:	f8b3 a000 	ldrh.w	sl, [r3]
 80099d0:	f1ba 0f00 	cmp.w	sl, #0
 80099d4:	d023      	beq.n	8009a1e <__multiply+0xee>
 80099d6:	46a9      	mov	r9, r5
 80099d8:	f04f 0c00 	mov.w	ip, #0
 80099dc:	f104 0e14 	add.w	lr, r4, #20
 80099e0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80099e4:	f8d9 1000 	ldr.w	r1, [r9]
 80099e8:	fa1f fb82 	uxth.w	fp, r2
 80099ec:	b289      	uxth	r1, r1
 80099ee:	fb0a 110b 	mla	r1, sl, fp, r1
 80099f2:	4461      	add	r1, ip
 80099f4:	f8d9 c000 	ldr.w	ip, [r9]
 80099f8:	0c12      	lsrs	r2, r2, #16
 80099fa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80099fe:	fb0a c202 	mla	r2, sl, r2, ip
 8009a02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009a06:	b289      	uxth	r1, r1
 8009a08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009a0c:	4577      	cmp	r7, lr
 8009a0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009a12:	f849 1b04 	str.w	r1, [r9], #4
 8009a16:	d8e3      	bhi.n	80099e0 <__multiply+0xb0>
 8009a18:	9a01      	ldr	r2, [sp, #4]
 8009a1a:	f845 c002 	str.w	ip, [r5, r2]
 8009a1e:	9a03      	ldr	r2, [sp, #12]
 8009a20:	3304      	adds	r3, #4
 8009a22:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a26:	f1b9 0f00 	cmp.w	r9, #0
 8009a2a:	d020      	beq.n	8009a6e <__multiply+0x13e>
 8009a2c:	46ae      	mov	lr, r5
 8009a2e:	f04f 0a00 	mov.w	sl, #0
 8009a32:	6829      	ldr	r1, [r5, #0]
 8009a34:	f104 0c14 	add.w	ip, r4, #20
 8009a38:	f8bc b000 	ldrh.w	fp, [ip]
 8009a3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009a40:	b289      	uxth	r1, r1
 8009a42:	fb09 220b 	mla	r2, r9, fp, r2
 8009a46:	4492      	add	sl, r2
 8009a48:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009a4c:	f84e 1b04 	str.w	r1, [lr], #4
 8009a50:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009a54:	f8be 1000 	ldrh.w	r1, [lr]
 8009a58:	0c12      	lsrs	r2, r2, #16
 8009a5a:	fb09 1102 	mla	r1, r9, r2, r1
 8009a5e:	4567      	cmp	r7, ip
 8009a60:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009a64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a68:	d8e6      	bhi.n	8009a38 <__multiply+0x108>
 8009a6a:	9a01      	ldr	r2, [sp, #4]
 8009a6c:	50a9      	str	r1, [r5, r2]
 8009a6e:	3504      	adds	r5, #4
 8009a70:	e79b      	b.n	80099aa <__multiply+0x7a>
 8009a72:	3e01      	subs	r6, #1
 8009a74:	e79d      	b.n	80099b2 <__multiply+0x82>
 8009a76:	bf00      	nop
 8009a78:	0800b387 	.word	0x0800b387
 8009a7c:	0800b414 	.word	0x0800b414

08009a80 <__pow5mult>:
 8009a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a84:	4615      	mov	r5, r2
 8009a86:	f012 0203 	ands.w	r2, r2, #3
 8009a8a:	4606      	mov	r6, r0
 8009a8c:	460f      	mov	r7, r1
 8009a8e:	d007      	beq.n	8009aa0 <__pow5mult+0x20>
 8009a90:	4c25      	ldr	r4, [pc, #148]	; (8009b28 <__pow5mult+0xa8>)
 8009a92:	3a01      	subs	r2, #1
 8009a94:	2300      	movs	r3, #0
 8009a96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a9a:	f7ff fe55 	bl	8009748 <__multadd>
 8009a9e:	4607      	mov	r7, r0
 8009aa0:	10ad      	asrs	r5, r5, #2
 8009aa2:	d03d      	beq.n	8009b20 <__pow5mult+0xa0>
 8009aa4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009aa6:	b97c      	cbnz	r4, 8009ac8 <__pow5mult+0x48>
 8009aa8:	2010      	movs	r0, #16
 8009aaa:	f7ff fdb5 	bl	8009618 <malloc>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	6270      	str	r0, [r6, #36]	; 0x24
 8009ab2:	b928      	cbnz	r0, 8009ac0 <__pow5mult+0x40>
 8009ab4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009ab8:	4b1c      	ldr	r3, [pc, #112]	; (8009b2c <__pow5mult+0xac>)
 8009aba:	481d      	ldr	r0, [pc, #116]	; (8009b30 <__pow5mult+0xb0>)
 8009abc:	f000 fd0a 	bl	800a4d4 <__assert_func>
 8009ac0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ac4:	6004      	str	r4, [r0, #0]
 8009ac6:	60c4      	str	r4, [r0, #12]
 8009ac8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009acc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ad0:	b94c      	cbnz	r4, 8009ae6 <__pow5mult+0x66>
 8009ad2:	f240 2171 	movw	r1, #625	; 0x271
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	f7ff ff14 	bl	8009904 <__i2b>
 8009adc:	2300      	movs	r3, #0
 8009ade:	4604      	mov	r4, r0
 8009ae0:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ae4:	6003      	str	r3, [r0, #0]
 8009ae6:	f04f 0900 	mov.w	r9, #0
 8009aea:	07eb      	lsls	r3, r5, #31
 8009aec:	d50a      	bpl.n	8009b04 <__pow5mult+0x84>
 8009aee:	4639      	mov	r1, r7
 8009af0:	4622      	mov	r2, r4
 8009af2:	4630      	mov	r0, r6
 8009af4:	f7ff ff1c 	bl	8009930 <__multiply>
 8009af8:	4680      	mov	r8, r0
 8009afa:	4639      	mov	r1, r7
 8009afc:	4630      	mov	r0, r6
 8009afe:	f7ff fe01 	bl	8009704 <_Bfree>
 8009b02:	4647      	mov	r7, r8
 8009b04:	106d      	asrs	r5, r5, #1
 8009b06:	d00b      	beq.n	8009b20 <__pow5mult+0xa0>
 8009b08:	6820      	ldr	r0, [r4, #0]
 8009b0a:	b938      	cbnz	r0, 8009b1c <__pow5mult+0x9c>
 8009b0c:	4622      	mov	r2, r4
 8009b0e:	4621      	mov	r1, r4
 8009b10:	4630      	mov	r0, r6
 8009b12:	f7ff ff0d 	bl	8009930 <__multiply>
 8009b16:	6020      	str	r0, [r4, #0]
 8009b18:	f8c0 9000 	str.w	r9, [r0]
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	e7e4      	b.n	8009aea <__pow5mult+0x6a>
 8009b20:	4638      	mov	r0, r7
 8009b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b26:	bf00      	nop
 8009b28:	0800b560 	.word	0x0800b560
 8009b2c:	0800b315 	.word	0x0800b315
 8009b30:	0800b414 	.word	0x0800b414

08009b34 <__lshift>:
 8009b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b38:	460c      	mov	r4, r1
 8009b3a:	4607      	mov	r7, r0
 8009b3c:	4691      	mov	r9, r2
 8009b3e:	6923      	ldr	r3, [r4, #16]
 8009b40:	6849      	ldr	r1, [r1, #4]
 8009b42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b46:	68a3      	ldr	r3, [r4, #8]
 8009b48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b4c:	f108 0601 	add.w	r6, r8, #1
 8009b50:	42b3      	cmp	r3, r6
 8009b52:	db0b      	blt.n	8009b6c <__lshift+0x38>
 8009b54:	4638      	mov	r0, r7
 8009b56:	f7ff fd95 	bl	8009684 <_Balloc>
 8009b5a:	4605      	mov	r5, r0
 8009b5c:	b948      	cbnz	r0, 8009b72 <__lshift+0x3e>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009b64:	4b29      	ldr	r3, [pc, #164]	; (8009c0c <__lshift+0xd8>)
 8009b66:	482a      	ldr	r0, [pc, #168]	; (8009c10 <__lshift+0xdc>)
 8009b68:	f000 fcb4 	bl	800a4d4 <__assert_func>
 8009b6c:	3101      	adds	r1, #1
 8009b6e:	005b      	lsls	r3, r3, #1
 8009b70:	e7ee      	b.n	8009b50 <__lshift+0x1c>
 8009b72:	2300      	movs	r3, #0
 8009b74:	f100 0114 	add.w	r1, r0, #20
 8009b78:	f100 0210 	add.w	r2, r0, #16
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	4553      	cmp	r3, sl
 8009b80:	db37      	blt.n	8009bf2 <__lshift+0xbe>
 8009b82:	6920      	ldr	r0, [r4, #16]
 8009b84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b88:	f104 0314 	add.w	r3, r4, #20
 8009b8c:	f019 091f 	ands.w	r9, r9, #31
 8009b90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009b98:	d02f      	beq.n	8009bfa <__lshift+0xc6>
 8009b9a:	468a      	mov	sl, r1
 8009b9c:	f04f 0c00 	mov.w	ip, #0
 8009ba0:	f1c9 0e20 	rsb	lr, r9, #32
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	fa02 f209 	lsl.w	r2, r2, r9
 8009baa:	ea42 020c 	orr.w	r2, r2, ip
 8009bae:	f84a 2b04 	str.w	r2, [sl], #4
 8009bb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bb6:	4298      	cmp	r0, r3
 8009bb8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009bbc:	d8f2      	bhi.n	8009ba4 <__lshift+0x70>
 8009bbe:	1b03      	subs	r3, r0, r4
 8009bc0:	3b15      	subs	r3, #21
 8009bc2:	f023 0303 	bic.w	r3, r3, #3
 8009bc6:	3304      	adds	r3, #4
 8009bc8:	f104 0215 	add.w	r2, r4, #21
 8009bcc:	4290      	cmp	r0, r2
 8009bce:	bf38      	it	cc
 8009bd0:	2304      	movcc	r3, #4
 8009bd2:	f841 c003 	str.w	ip, [r1, r3]
 8009bd6:	f1bc 0f00 	cmp.w	ip, #0
 8009bda:	d001      	beq.n	8009be0 <__lshift+0xac>
 8009bdc:	f108 0602 	add.w	r6, r8, #2
 8009be0:	3e01      	subs	r6, #1
 8009be2:	4638      	mov	r0, r7
 8009be4:	4621      	mov	r1, r4
 8009be6:	612e      	str	r6, [r5, #16]
 8009be8:	f7ff fd8c 	bl	8009704 <_Bfree>
 8009bec:	4628      	mov	r0, r5
 8009bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	e7c1      	b.n	8009b7e <__lshift+0x4a>
 8009bfa:	3904      	subs	r1, #4
 8009bfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c00:	4298      	cmp	r0, r3
 8009c02:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c06:	d8f9      	bhi.n	8009bfc <__lshift+0xc8>
 8009c08:	e7ea      	b.n	8009be0 <__lshift+0xac>
 8009c0a:	bf00      	nop
 8009c0c:	0800b387 	.word	0x0800b387
 8009c10:	0800b414 	.word	0x0800b414

08009c14 <__mcmp>:
 8009c14:	4603      	mov	r3, r0
 8009c16:	690a      	ldr	r2, [r1, #16]
 8009c18:	6900      	ldr	r0, [r0, #16]
 8009c1a:	b530      	push	{r4, r5, lr}
 8009c1c:	1a80      	subs	r0, r0, r2
 8009c1e:	d10d      	bne.n	8009c3c <__mcmp+0x28>
 8009c20:	3314      	adds	r3, #20
 8009c22:	3114      	adds	r1, #20
 8009c24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009c28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009c2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009c30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009c34:	4295      	cmp	r5, r2
 8009c36:	d002      	beq.n	8009c3e <__mcmp+0x2a>
 8009c38:	d304      	bcc.n	8009c44 <__mcmp+0x30>
 8009c3a:	2001      	movs	r0, #1
 8009c3c:	bd30      	pop	{r4, r5, pc}
 8009c3e:	42a3      	cmp	r3, r4
 8009c40:	d3f4      	bcc.n	8009c2c <__mcmp+0x18>
 8009c42:	e7fb      	b.n	8009c3c <__mcmp+0x28>
 8009c44:	f04f 30ff 	mov.w	r0, #4294967295
 8009c48:	e7f8      	b.n	8009c3c <__mcmp+0x28>
	...

08009c4c <__mdiff>:
 8009c4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c50:	460d      	mov	r5, r1
 8009c52:	4607      	mov	r7, r0
 8009c54:	4611      	mov	r1, r2
 8009c56:	4628      	mov	r0, r5
 8009c58:	4614      	mov	r4, r2
 8009c5a:	f7ff ffdb 	bl	8009c14 <__mcmp>
 8009c5e:	1e06      	subs	r6, r0, #0
 8009c60:	d111      	bne.n	8009c86 <__mdiff+0x3a>
 8009c62:	4631      	mov	r1, r6
 8009c64:	4638      	mov	r0, r7
 8009c66:	f7ff fd0d 	bl	8009684 <_Balloc>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	b928      	cbnz	r0, 8009c7a <__mdiff+0x2e>
 8009c6e:	f240 2132 	movw	r1, #562	; 0x232
 8009c72:	4b3a      	ldr	r3, [pc, #232]	; (8009d5c <__mdiff+0x110>)
 8009c74:	483a      	ldr	r0, [pc, #232]	; (8009d60 <__mdiff+0x114>)
 8009c76:	f000 fc2d 	bl	800a4d4 <__assert_func>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009c80:	4610      	mov	r0, r2
 8009c82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c86:	bfa4      	itt	ge
 8009c88:	4623      	movge	r3, r4
 8009c8a:	462c      	movge	r4, r5
 8009c8c:	4638      	mov	r0, r7
 8009c8e:	6861      	ldr	r1, [r4, #4]
 8009c90:	bfa6      	itte	ge
 8009c92:	461d      	movge	r5, r3
 8009c94:	2600      	movge	r6, #0
 8009c96:	2601      	movlt	r6, #1
 8009c98:	f7ff fcf4 	bl	8009684 <_Balloc>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	b918      	cbnz	r0, 8009ca8 <__mdiff+0x5c>
 8009ca0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009ca4:	4b2d      	ldr	r3, [pc, #180]	; (8009d5c <__mdiff+0x110>)
 8009ca6:	e7e5      	b.n	8009c74 <__mdiff+0x28>
 8009ca8:	f102 0814 	add.w	r8, r2, #20
 8009cac:	46c2      	mov	sl, r8
 8009cae:	f04f 0c00 	mov.w	ip, #0
 8009cb2:	6927      	ldr	r7, [r4, #16]
 8009cb4:	60c6      	str	r6, [r0, #12]
 8009cb6:	692e      	ldr	r6, [r5, #16]
 8009cb8:	f104 0014 	add.w	r0, r4, #20
 8009cbc:	f105 0914 	add.w	r9, r5, #20
 8009cc0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009cc4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009cc8:	3410      	adds	r4, #16
 8009cca:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009cce:	f859 3b04 	ldr.w	r3, [r9], #4
 8009cd2:	fa1f f18b 	uxth.w	r1, fp
 8009cd6:	448c      	add	ip, r1
 8009cd8:	b299      	uxth	r1, r3
 8009cda:	0c1b      	lsrs	r3, r3, #16
 8009cdc:	ebac 0101 	sub.w	r1, ip, r1
 8009ce0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ce4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009ce8:	b289      	uxth	r1, r1
 8009cea:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009cee:	454e      	cmp	r6, r9
 8009cf0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009cf4:	f84a 3b04 	str.w	r3, [sl], #4
 8009cf8:	d8e7      	bhi.n	8009cca <__mdiff+0x7e>
 8009cfa:	1b73      	subs	r3, r6, r5
 8009cfc:	3b15      	subs	r3, #21
 8009cfe:	f023 0303 	bic.w	r3, r3, #3
 8009d02:	3515      	adds	r5, #21
 8009d04:	3304      	adds	r3, #4
 8009d06:	42ae      	cmp	r6, r5
 8009d08:	bf38      	it	cc
 8009d0a:	2304      	movcc	r3, #4
 8009d0c:	4418      	add	r0, r3
 8009d0e:	4443      	add	r3, r8
 8009d10:	461e      	mov	r6, r3
 8009d12:	4605      	mov	r5, r0
 8009d14:	4575      	cmp	r5, lr
 8009d16:	d30e      	bcc.n	8009d36 <__mdiff+0xea>
 8009d18:	f10e 0103 	add.w	r1, lr, #3
 8009d1c:	1a09      	subs	r1, r1, r0
 8009d1e:	f021 0103 	bic.w	r1, r1, #3
 8009d22:	3803      	subs	r0, #3
 8009d24:	4586      	cmp	lr, r0
 8009d26:	bf38      	it	cc
 8009d28:	2100      	movcc	r1, #0
 8009d2a:	4419      	add	r1, r3
 8009d2c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009d30:	b18b      	cbz	r3, 8009d56 <__mdiff+0x10a>
 8009d32:	6117      	str	r7, [r2, #16]
 8009d34:	e7a4      	b.n	8009c80 <__mdiff+0x34>
 8009d36:	f855 8b04 	ldr.w	r8, [r5], #4
 8009d3a:	fa1f f188 	uxth.w	r1, r8
 8009d3e:	4461      	add	r1, ip
 8009d40:	140c      	asrs	r4, r1, #16
 8009d42:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009d46:	b289      	uxth	r1, r1
 8009d48:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009d4c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009d50:	f846 1b04 	str.w	r1, [r6], #4
 8009d54:	e7de      	b.n	8009d14 <__mdiff+0xc8>
 8009d56:	3f01      	subs	r7, #1
 8009d58:	e7e8      	b.n	8009d2c <__mdiff+0xe0>
 8009d5a:	bf00      	nop
 8009d5c:	0800b387 	.word	0x0800b387
 8009d60:	0800b414 	.word	0x0800b414

08009d64 <__ulp>:
 8009d64:	4b11      	ldr	r3, [pc, #68]	; (8009dac <__ulp+0x48>)
 8009d66:	400b      	ands	r3, r1
 8009d68:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	dd02      	ble.n	8009d76 <__ulp+0x12>
 8009d70:	2000      	movs	r0, #0
 8009d72:	4619      	mov	r1, r3
 8009d74:	4770      	bx	lr
 8009d76:	425b      	negs	r3, r3
 8009d78:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009d7c:	f04f 0000 	mov.w	r0, #0
 8009d80:	f04f 0100 	mov.w	r1, #0
 8009d84:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009d88:	da04      	bge.n	8009d94 <__ulp+0x30>
 8009d8a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009d8e:	fa43 f102 	asr.w	r1, r3, r2
 8009d92:	4770      	bx	lr
 8009d94:	f1a2 0314 	sub.w	r3, r2, #20
 8009d98:	2b1e      	cmp	r3, #30
 8009d9a:	bfd6      	itet	le
 8009d9c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009da0:	2301      	movgt	r3, #1
 8009da2:	fa22 f303 	lsrle.w	r3, r2, r3
 8009da6:	4618      	mov	r0, r3
 8009da8:	4770      	bx	lr
 8009daa:	bf00      	nop
 8009dac:	7ff00000 	.word	0x7ff00000

08009db0 <__b2d>:
 8009db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009db4:	6907      	ldr	r7, [r0, #16]
 8009db6:	f100 0914 	add.w	r9, r0, #20
 8009dba:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009dbe:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009dc2:	f1a7 0804 	sub.w	r8, r7, #4
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	f7ff fd4e 	bl	8009868 <__hi0bits>
 8009dcc:	f1c0 0320 	rsb	r3, r0, #32
 8009dd0:	280a      	cmp	r0, #10
 8009dd2:	600b      	str	r3, [r1, #0]
 8009dd4:	491f      	ldr	r1, [pc, #124]	; (8009e54 <__b2d+0xa4>)
 8009dd6:	dc17      	bgt.n	8009e08 <__b2d+0x58>
 8009dd8:	45c1      	cmp	r9, r8
 8009dda:	bf28      	it	cs
 8009ddc:	2200      	movcs	r2, #0
 8009dde:	f1c0 0c0b 	rsb	ip, r0, #11
 8009de2:	fa26 f30c 	lsr.w	r3, r6, ip
 8009de6:	bf38      	it	cc
 8009de8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009dec:	ea43 0501 	orr.w	r5, r3, r1
 8009df0:	f100 0315 	add.w	r3, r0, #21
 8009df4:	fa06 f303 	lsl.w	r3, r6, r3
 8009df8:	fa22 f20c 	lsr.w	r2, r2, ip
 8009dfc:	ea43 0402 	orr.w	r4, r3, r2
 8009e00:	4620      	mov	r0, r4
 8009e02:	4629      	mov	r1, r5
 8009e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e08:	45c1      	cmp	r9, r8
 8009e0a:	bf2e      	itee	cs
 8009e0c:	2200      	movcs	r2, #0
 8009e0e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009e12:	f1a7 0808 	subcc.w	r8, r7, #8
 8009e16:	f1b0 030b 	subs.w	r3, r0, #11
 8009e1a:	d016      	beq.n	8009e4a <__b2d+0x9a>
 8009e1c:	f1c3 0720 	rsb	r7, r3, #32
 8009e20:	fa22 f107 	lsr.w	r1, r2, r7
 8009e24:	45c8      	cmp	r8, r9
 8009e26:	fa06 f603 	lsl.w	r6, r6, r3
 8009e2a:	ea46 0601 	orr.w	r6, r6, r1
 8009e2e:	bf94      	ite	ls
 8009e30:	2100      	movls	r1, #0
 8009e32:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009e36:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009e3a:	fa02 f003 	lsl.w	r0, r2, r3
 8009e3e:	40f9      	lsrs	r1, r7
 8009e40:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009e44:	ea40 0401 	orr.w	r4, r0, r1
 8009e48:	e7da      	b.n	8009e00 <__b2d+0x50>
 8009e4a:	4614      	mov	r4, r2
 8009e4c:	ea46 0501 	orr.w	r5, r6, r1
 8009e50:	e7d6      	b.n	8009e00 <__b2d+0x50>
 8009e52:	bf00      	nop
 8009e54:	3ff00000 	.word	0x3ff00000

08009e58 <__d2b>:
 8009e58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009e5c:	2101      	movs	r1, #1
 8009e5e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009e62:	4690      	mov	r8, r2
 8009e64:	461d      	mov	r5, r3
 8009e66:	f7ff fc0d 	bl	8009684 <_Balloc>
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	b930      	cbnz	r0, 8009e7c <__d2b+0x24>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	f240 310a 	movw	r1, #778	; 0x30a
 8009e74:	4b24      	ldr	r3, [pc, #144]	; (8009f08 <__d2b+0xb0>)
 8009e76:	4825      	ldr	r0, [pc, #148]	; (8009f0c <__d2b+0xb4>)
 8009e78:	f000 fb2c 	bl	800a4d4 <__assert_func>
 8009e7c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009e80:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009e84:	bb2d      	cbnz	r5, 8009ed2 <__d2b+0x7a>
 8009e86:	9301      	str	r3, [sp, #4]
 8009e88:	f1b8 0300 	subs.w	r3, r8, #0
 8009e8c:	d026      	beq.n	8009edc <__d2b+0x84>
 8009e8e:	4668      	mov	r0, sp
 8009e90:	9300      	str	r3, [sp, #0]
 8009e92:	f7ff fd09 	bl	80098a8 <__lo0bits>
 8009e96:	9900      	ldr	r1, [sp, #0]
 8009e98:	b1f0      	cbz	r0, 8009ed8 <__d2b+0x80>
 8009e9a:	9a01      	ldr	r2, [sp, #4]
 8009e9c:	f1c0 0320 	rsb	r3, r0, #32
 8009ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ea4:	430b      	orrs	r3, r1
 8009ea6:	40c2      	lsrs	r2, r0
 8009ea8:	6163      	str	r3, [r4, #20]
 8009eaa:	9201      	str	r2, [sp, #4]
 8009eac:	9b01      	ldr	r3, [sp, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	bf14      	ite	ne
 8009eb2:	2102      	movne	r1, #2
 8009eb4:	2101      	moveq	r1, #1
 8009eb6:	61a3      	str	r3, [r4, #24]
 8009eb8:	6121      	str	r1, [r4, #16]
 8009eba:	b1c5      	cbz	r5, 8009eee <__d2b+0x96>
 8009ebc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009ec0:	4405      	add	r5, r0
 8009ec2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ec6:	603d      	str	r5, [r7, #0]
 8009ec8:	6030      	str	r0, [r6, #0]
 8009eca:	4620      	mov	r0, r4
 8009ecc:	b002      	add	sp, #8
 8009ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ed6:	e7d6      	b.n	8009e86 <__d2b+0x2e>
 8009ed8:	6161      	str	r1, [r4, #20]
 8009eda:	e7e7      	b.n	8009eac <__d2b+0x54>
 8009edc:	a801      	add	r0, sp, #4
 8009ede:	f7ff fce3 	bl	80098a8 <__lo0bits>
 8009ee2:	2101      	movs	r1, #1
 8009ee4:	9b01      	ldr	r3, [sp, #4]
 8009ee6:	6121      	str	r1, [r4, #16]
 8009ee8:	6163      	str	r3, [r4, #20]
 8009eea:	3020      	adds	r0, #32
 8009eec:	e7e5      	b.n	8009eba <__d2b+0x62>
 8009eee:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009ef2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ef6:	6038      	str	r0, [r7, #0]
 8009ef8:	6918      	ldr	r0, [r3, #16]
 8009efa:	f7ff fcb5 	bl	8009868 <__hi0bits>
 8009efe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009f02:	6031      	str	r1, [r6, #0]
 8009f04:	e7e1      	b.n	8009eca <__d2b+0x72>
 8009f06:	bf00      	nop
 8009f08:	0800b387 	.word	0x0800b387
 8009f0c:	0800b414 	.word	0x0800b414

08009f10 <__ratio>:
 8009f10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f14:	4688      	mov	r8, r1
 8009f16:	4669      	mov	r1, sp
 8009f18:	4681      	mov	r9, r0
 8009f1a:	f7ff ff49 	bl	8009db0 <__b2d>
 8009f1e:	460f      	mov	r7, r1
 8009f20:	4604      	mov	r4, r0
 8009f22:	460d      	mov	r5, r1
 8009f24:	4640      	mov	r0, r8
 8009f26:	a901      	add	r1, sp, #4
 8009f28:	f7ff ff42 	bl	8009db0 <__b2d>
 8009f2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f30:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009f34:	468b      	mov	fp, r1
 8009f36:	eba3 0c02 	sub.w	ip, r3, r2
 8009f3a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009f3e:	1a9b      	subs	r3, r3, r2
 8009f40:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	bfd5      	itete	le
 8009f48:	460a      	movle	r2, r1
 8009f4a:	462a      	movgt	r2, r5
 8009f4c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009f50:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009f54:	bfd8      	it	le
 8009f56:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009f5a:	465b      	mov	r3, fp
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	4639      	mov	r1, r7
 8009f60:	4620      	mov	r0, r4
 8009f62:	f7f6 fbe3 	bl	800072c <__aeabi_ddiv>
 8009f66:	b003      	add	sp, #12
 8009f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f6c <__copybits>:
 8009f6c:	3901      	subs	r1, #1
 8009f6e:	b570      	push	{r4, r5, r6, lr}
 8009f70:	1149      	asrs	r1, r1, #5
 8009f72:	6914      	ldr	r4, [r2, #16]
 8009f74:	3101      	adds	r1, #1
 8009f76:	f102 0314 	add.w	r3, r2, #20
 8009f7a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009f7e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009f82:	1f05      	subs	r5, r0, #4
 8009f84:	42a3      	cmp	r3, r4
 8009f86:	d30c      	bcc.n	8009fa2 <__copybits+0x36>
 8009f88:	1aa3      	subs	r3, r4, r2
 8009f8a:	3b11      	subs	r3, #17
 8009f8c:	f023 0303 	bic.w	r3, r3, #3
 8009f90:	3211      	adds	r2, #17
 8009f92:	42a2      	cmp	r2, r4
 8009f94:	bf88      	it	hi
 8009f96:	2300      	movhi	r3, #0
 8009f98:	4418      	add	r0, r3
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	4288      	cmp	r0, r1
 8009f9e:	d305      	bcc.n	8009fac <__copybits+0x40>
 8009fa0:	bd70      	pop	{r4, r5, r6, pc}
 8009fa2:	f853 6b04 	ldr.w	r6, [r3], #4
 8009fa6:	f845 6f04 	str.w	r6, [r5, #4]!
 8009faa:	e7eb      	b.n	8009f84 <__copybits+0x18>
 8009fac:	f840 3b04 	str.w	r3, [r0], #4
 8009fb0:	e7f4      	b.n	8009f9c <__copybits+0x30>

08009fb2 <__any_on>:
 8009fb2:	f100 0214 	add.w	r2, r0, #20
 8009fb6:	6900      	ldr	r0, [r0, #16]
 8009fb8:	114b      	asrs	r3, r1, #5
 8009fba:	4298      	cmp	r0, r3
 8009fbc:	b510      	push	{r4, lr}
 8009fbe:	db11      	blt.n	8009fe4 <__any_on+0x32>
 8009fc0:	dd0a      	ble.n	8009fd8 <__any_on+0x26>
 8009fc2:	f011 011f 	ands.w	r1, r1, #31
 8009fc6:	d007      	beq.n	8009fd8 <__any_on+0x26>
 8009fc8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009fcc:	fa24 f001 	lsr.w	r0, r4, r1
 8009fd0:	fa00 f101 	lsl.w	r1, r0, r1
 8009fd4:	428c      	cmp	r4, r1
 8009fd6:	d10b      	bne.n	8009ff0 <__any_on+0x3e>
 8009fd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d803      	bhi.n	8009fe8 <__any_on+0x36>
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	bd10      	pop	{r4, pc}
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	e7f7      	b.n	8009fd8 <__any_on+0x26>
 8009fe8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009fec:	2900      	cmp	r1, #0
 8009fee:	d0f5      	beq.n	8009fdc <__any_on+0x2a>
 8009ff0:	2001      	movs	r0, #1
 8009ff2:	e7f6      	b.n	8009fe2 <__any_on+0x30>

08009ff4 <_calloc_r>:
 8009ff4:	b570      	push	{r4, r5, r6, lr}
 8009ff6:	fba1 5402 	umull	r5, r4, r1, r2
 8009ffa:	b934      	cbnz	r4, 800a00a <_calloc_r+0x16>
 8009ffc:	4629      	mov	r1, r5
 8009ffe:	f000 f875 	bl	800a0ec <_malloc_r>
 800a002:	4606      	mov	r6, r0
 800a004:	b928      	cbnz	r0, 800a012 <_calloc_r+0x1e>
 800a006:	4630      	mov	r0, r6
 800a008:	bd70      	pop	{r4, r5, r6, pc}
 800a00a:	220c      	movs	r2, #12
 800a00c:	2600      	movs	r6, #0
 800a00e:	6002      	str	r2, [r0, #0]
 800a010:	e7f9      	b.n	800a006 <_calloc_r+0x12>
 800a012:	462a      	mov	r2, r5
 800a014:	4621      	mov	r1, r4
 800a016:	f7fc fe67 	bl	8006ce8 <memset>
 800a01a:	e7f4      	b.n	800a006 <_calloc_r+0x12>

0800a01c <_free_r>:
 800a01c:	b538      	push	{r3, r4, r5, lr}
 800a01e:	4605      	mov	r5, r0
 800a020:	2900      	cmp	r1, #0
 800a022:	d040      	beq.n	800a0a6 <_free_r+0x8a>
 800a024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a028:	1f0c      	subs	r4, r1, #4
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	bfb8      	it	lt
 800a02e:	18e4      	addlt	r4, r4, r3
 800a030:	f000 fa9a 	bl	800a568 <__malloc_lock>
 800a034:	4a1c      	ldr	r2, [pc, #112]	; (800a0a8 <_free_r+0x8c>)
 800a036:	6813      	ldr	r3, [r2, #0]
 800a038:	b933      	cbnz	r3, 800a048 <_free_r+0x2c>
 800a03a:	6063      	str	r3, [r4, #4]
 800a03c:	6014      	str	r4, [r2, #0]
 800a03e:	4628      	mov	r0, r5
 800a040:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a044:	f000 ba96 	b.w	800a574 <__malloc_unlock>
 800a048:	42a3      	cmp	r3, r4
 800a04a:	d908      	bls.n	800a05e <_free_r+0x42>
 800a04c:	6820      	ldr	r0, [r4, #0]
 800a04e:	1821      	adds	r1, r4, r0
 800a050:	428b      	cmp	r3, r1
 800a052:	bf01      	itttt	eq
 800a054:	6819      	ldreq	r1, [r3, #0]
 800a056:	685b      	ldreq	r3, [r3, #4]
 800a058:	1809      	addeq	r1, r1, r0
 800a05a:	6021      	streq	r1, [r4, #0]
 800a05c:	e7ed      	b.n	800a03a <_free_r+0x1e>
 800a05e:	461a      	mov	r2, r3
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	b10b      	cbz	r3, 800a068 <_free_r+0x4c>
 800a064:	42a3      	cmp	r3, r4
 800a066:	d9fa      	bls.n	800a05e <_free_r+0x42>
 800a068:	6811      	ldr	r1, [r2, #0]
 800a06a:	1850      	adds	r0, r2, r1
 800a06c:	42a0      	cmp	r0, r4
 800a06e:	d10b      	bne.n	800a088 <_free_r+0x6c>
 800a070:	6820      	ldr	r0, [r4, #0]
 800a072:	4401      	add	r1, r0
 800a074:	1850      	adds	r0, r2, r1
 800a076:	4283      	cmp	r3, r0
 800a078:	6011      	str	r1, [r2, #0]
 800a07a:	d1e0      	bne.n	800a03e <_free_r+0x22>
 800a07c:	6818      	ldr	r0, [r3, #0]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	4401      	add	r1, r0
 800a082:	6011      	str	r1, [r2, #0]
 800a084:	6053      	str	r3, [r2, #4]
 800a086:	e7da      	b.n	800a03e <_free_r+0x22>
 800a088:	d902      	bls.n	800a090 <_free_r+0x74>
 800a08a:	230c      	movs	r3, #12
 800a08c:	602b      	str	r3, [r5, #0]
 800a08e:	e7d6      	b.n	800a03e <_free_r+0x22>
 800a090:	6820      	ldr	r0, [r4, #0]
 800a092:	1821      	adds	r1, r4, r0
 800a094:	428b      	cmp	r3, r1
 800a096:	bf01      	itttt	eq
 800a098:	6819      	ldreq	r1, [r3, #0]
 800a09a:	685b      	ldreq	r3, [r3, #4]
 800a09c:	1809      	addeq	r1, r1, r0
 800a09e:	6021      	streq	r1, [r4, #0]
 800a0a0:	6063      	str	r3, [r4, #4]
 800a0a2:	6054      	str	r4, [r2, #4]
 800a0a4:	e7cb      	b.n	800a03e <_free_r+0x22>
 800a0a6:	bd38      	pop	{r3, r4, r5, pc}
 800a0a8:	20001420 	.word	0x20001420

0800a0ac <sbrk_aligned>:
 800a0ac:	b570      	push	{r4, r5, r6, lr}
 800a0ae:	4e0e      	ldr	r6, [pc, #56]	; (800a0e8 <sbrk_aligned+0x3c>)
 800a0b0:	460c      	mov	r4, r1
 800a0b2:	6831      	ldr	r1, [r6, #0]
 800a0b4:	4605      	mov	r5, r0
 800a0b6:	b911      	cbnz	r1, 800a0be <sbrk_aligned+0x12>
 800a0b8:	f000 f9ee 	bl	800a498 <_sbrk_r>
 800a0bc:	6030      	str	r0, [r6, #0]
 800a0be:	4621      	mov	r1, r4
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	f000 f9e9 	bl	800a498 <_sbrk_r>
 800a0c6:	1c43      	adds	r3, r0, #1
 800a0c8:	d00a      	beq.n	800a0e0 <sbrk_aligned+0x34>
 800a0ca:	1cc4      	adds	r4, r0, #3
 800a0cc:	f024 0403 	bic.w	r4, r4, #3
 800a0d0:	42a0      	cmp	r0, r4
 800a0d2:	d007      	beq.n	800a0e4 <sbrk_aligned+0x38>
 800a0d4:	1a21      	subs	r1, r4, r0
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	f000 f9de 	bl	800a498 <_sbrk_r>
 800a0dc:	3001      	adds	r0, #1
 800a0de:	d101      	bne.n	800a0e4 <sbrk_aligned+0x38>
 800a0e0:	f04f 34ff 	mov.w	r4, #4294967295
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	bd70      	pop	{r4, r5, r6, pc}
 800a0e8:	20001424 	.word	0x20001424

0800a0ec <_malloc_r>:
 800a0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f0:	1ccd      	adds	r5, r1, #3
 800a0f2:	f025 0503 	bic.w	r5, r5, #3
 800a0f6:	3508      	adds	r5, #8
 800a0f8:	2d0c      	cmp	r5, #12
 800a0fa:	bf38      	it	cc
 800a0fc:	250c      	movcc	r5, #12
 800a0fe:	2d00      	cmp	r5, #0
 800a100:	4607      	mov	r7, r0
 800a102:	db01      	blt.n	800a108 <_malloc_r+0x1c>
 800a104:	42a9      	cmp	r1, r5
 800a106:	d905      	bls.n	800a114 <_malloc_r+0x28>
 800a108:	230c      	movs	r3, #12
 800a10a:	2600      	movs	r6, #0
 800a10c:	603b      	str	r3, [r7, #0]
 800a10e:	4630      	mov	r0, r6
 800a110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a114:	4e2e      	ldr	r6, [pc, #184]	; (800a1d0 <_malloc_r+0xe4>)
 800a116:	f000 fa27 	bl	800a568 <__malloc_lock>
 800a11a:	6833      	ldr	r3, [r6, #0]
 800a11c:	461c      	mov	r4, r3
 800a11e:	bb34      	cbnz	r4, 800a16e <_malloc_r+0x82>
 800a120:	4629      	mov	r1, r5
 800a122:	4638      	mov	r0, r7
 800a124:	f7ff ffc2 	bl	800a0ac <sbrk_aligned>
 800a128:	1c43      	adds	r3, r0, #1
 800a12a:	4604      	mov	r4, r0
 800a12c:	d14d      	bne.n	800a1ca <_malloc_r+0xde>
 800a12e:	6834      	ldr	r4, [r6, #0]
 800a130:	4626      	mov	r6, r4
 800a132:	2e00      	cmp	r6, #0
 800a134:	d140      	bne.n	800a1b8 <_malloc_r+0xcc>
 800a136:	6823      	ldr	r3, [r4, #0]
 800a138:	4631      	mov	r1, r6
 800a13a:	4638      	mov	r0, r7
 800a13c:	eb04 0803 	add.w	r8, r4, r3
 800a140:	f000 f9aa 	bl	800a498 <_sbrk_r>
 800a144:	4580      	cmp	r8, r0
 800a146:	d13a      	bne.n	800a1be <_malloc_r+0xd2>
 800a148:	6821      	ldr	r1, [r4, #0]
 800a14a:	3503      	adds	r5, #3
 800a14c:	1a6d      	subs	r5, r5, r1
 800a14e:	f025 0503 	bic.w	r5, r5, #3
 800a152:	3508      	adds	r5, #8
 800a154:	2d0c      	cmp	r5, #12
 800a156:	bf38      	it	cc
 800a158:	250c      	movcc	r5, #12
 800a15a:	4638      	mov	r0, r7
 800a15c:	4629      	mov	r1, r5
 800a15e:	f7ff ffa5 	bl	800a0ac <sbrk_aligned>
 800a162:	3001      	adds	r0, #1
 800a164:	d02b      	beq.n	800a1be <_malloc_r+0xd2>
 800a166:	6823      	ldr	r3, [r4, #0]
 800a168:	442b      	add	r3, r5
 800a16a:	6023      	str	r3, [r4, #0]
 800a16c:	e00e      	b.n	800a18c <_malloc_r+0xa0>
 800a16e:	6822      	ldr	r2, [r4, #0]
 800a170:	1b52      	subs	r2, r2, r5
 800a172:	d41e      	bmi.n	800a1b2 <_malloc_r+0xc6>
 800a174:	2a0b      	cmp	r2, #11
 800a176:	d916      	bls.n	800a1a6 <_malloc_r+0xba>
 800a178:	1961      	adds	r1, r4, r5
 800a17a:	42a3      	cmp	r3, r4
 800a17c:	6025      	str	r5, [r4, #0]
 800a17e:	bf18      	it	ne
 800a180:	6059      	strne	r1, [r3, #4]
 800a182:	6863      	ldr	r3, [r4, #4]
 800a184:	bf08      	it	eq
 800a186:	6031      	streq	r1, [r6, #0]
 800a188:	5162      	str	r2, [r4, r5]
 800a18a:	604b      	str	r3, [r1, #4]
 800a18c:	4638      	mov	r0, r7
 800a18e:	f104 060b 	add.w	r6, r4, #11
 800a192:	f000 f9ef 	bl	800a574 <__malloc_unlock>
 800a196:	f026 0607 	bic.w	r6, r6, #7
 800a19a:	1d23      	adds	r3, r4, #4
 800a19c:	1af2      	subs	r2, r6, r3
 800a19e:	d0b6      	beq.n	800a10e <_malloc_r+0x22>
 800a1a0:	1b9b      	subs	r3, r3, r6
 800a1a2:	50a3      	str	r3, [r4, r2]
 800a1a4:	e7b3      	b.n	800a10e <_malloc_r+0x22>
 800a1a6:	6862      	ldr	r2, [r4, #4]
 800a1a8:	42a3      	cmp	r3, r4
 800a1aa:	bf0c      	ite	eq
 800a1ac:	6032      	streq	r2, [r6, #0]
 800a1ae:	605a      	strne	r2, [r3, #4]
 800a1b0:	e7ec      	b.n	800a18c <_malloc_r+0xa0>
 800a1b2:	4623      	mov	r3, r4
 800a1b4:	6864      	ldr	r4, [r4, #4]
 800a1b6:	e7b2      	b.n	800a11e <_malloc_r+0x32>
 800a1b8:	4634      	mov	r4, r6
 800a1ba:	6876      	ldr	r6, [r6, #4]
 800a1bc:	e7b9      	b.n	800a132 <_malloc_r+0x46>
 800a1be:	230c      	movs	r3, #12
 800a1c0:	4638      	mov	r0, r7
 800a1c2:	603b      	str	r3, [r7, #0]
 800a1c4:	f000 f9d6 	bl	800a574 <__malloc_unlock>
 800a1c8:	e7a1      	b.n	800a10e <_malloc_r+0x22>
 800a1ca:	6025      	str	r5, [r4, #0]
 800a1cc:	e7de      	b.n	800a18c <_malloc_r+0xa0>
 800a1ce:	bf00      	nop
 800a1d0:	20001420 	.word	0x20001420

0800a1d4 <__ssputs_r>:
 800a1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1d8:	688e      	ldr	r6, [r1, #8]
 800a1da:	4682      	mov	sl, r0
 800a1dc:	429e      	cmp	r6, r3
 800a1de:	460c      	mov	r4, r1
 800a1e0:	4690      	mov	r8, r2
 800a1e2:	461f      	mov	r7, r3
 800a1e4:	d838      	bhi.n	800a258 <__ssputs_r+0x84>
 800a1e6:	898a      	ldrh	r2, [r1, #12]
 800a1e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a1ec:	d032      	beq.n	800a254 <__ssputs_r+0x80>
 800a1ee:	6825      	ldr	r5, [r4, #0]
 800a1f0:	6909      	ldr	r1, [r1, #16]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	eba5 0901 	sub.w	r9, r5, r1
 800a1f8:	6965      	ldr	r5, [r4, #20]
 800a1fa:	444b      	add	r3, r9
 800a1fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a200:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a204:	106d      	asrs	r5, r5, #1
 800a206:	429d      	cmp	r5, r3
 800a208:	bf38      	it	cc
 800a20a:	461d      	movcc	r5, r3
 800a20c:	0553      	lsls	r3, r2, #21
 800a20e:	d531      	bpl.n	800a274 <__ssputs_r+0xa0>
 800a210:	4629      	mov	r1, r5
 800a212:	f7ff ff6b 	bl	800a0ec <_malloc_r>
 800a216:	4606      	mov	r6, r0
 800a218:	b950      	cbnz	r0, 800a230 <__ssputs_r+0x5c>
 800a21a:	230c      	movs	r3, #12
 800a21c:	f04f 30ff 	mov.w	r0, #4294967295
 800a220:	f8ca 3000 	str.w	r3, [sl]
 800a224:	89a3      	ldrh	r3, [r4, #12]
 800a226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a22a:	81a3      	strh	r3, [r4, #12]
 800a22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a230:	464a      	mov	r2, r9
 800a232:	6921      	ldr	r1, [r4, #16]
 800a234:	f7ff fa18 	bl	8009668 <memcpy>
 800a238:	89a3      	ldrh	r3, [r4, #12]
 800a23a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a23e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a242:	81a3      	strh	r3, [r4, #12]
 800a244:	6126      	str	r6, [r4, #16]
 800a246:	444e      	add	r6, r9
 800a248:	6026      	str	r6, [r4, #0]
 800a24a:	463e      	mov	r6, r7
 800a24c:	6165      	str	r5, [r4, #20]
 800a24e:	eba5 0509 	sub.w	r5, r5, r9
 800a252:	60a5      	str	r5, [r4, #8]
 800a254:	42be      	cmp	r6, r7
 800a256:	d900      	bls.n	800a25a <__ssputs_r+0x86>
 800a258:	463e      	mov	r6, r7
 800a25a:	4632      	mov	r2, r6
 800a25c:	4641      	mov	r1, r8
 800a25e:	6820      	ldr	r0, [r4, #0]
 800a260:	f000 f968 	bl	800a534 <memmove>
 800a264:	68a3      	ldr	r3, [r4, #8]
 800a266:	2000      	movs	r0, #0
 800a268:	1b9b      	subs	r3, r3, r6
 800a26a:	60a3      	str	r3, [r4, #8]
 800a26c:	6823      	ldr	r3, [r4, #0]
 800a26e:	4433      	add	r3, r6
 800a270:	6023      	str	r3, [r4, #0]
 800a272:	e7db      	b.n	800a22c <__ssputs_r+0x58>
 800a274:	462a      	mov	r2, r5
 800a276:	f000 f983 	bl	800a580 <_realloc_r>
 800a27a:	4606      	mov	r6, r0
 800a27c:	2800      	cmp	r0, #0
 800a27e:	d1e1      	bne.n	800a244 <__ssputs_r+0x70>
 800a280:	4650      	mov	r0, sl
 800a282:	6921      	ldr	r1, [r4, #16]
 800a284:	f7ff feca 	bl	800a01c <_free_r>
 800a288:	e7c7      	b.n	800a21a <__ssputs_r+0x46>
	...

0800a28c <_svfiprintf_r>:
 800a28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a290:	4698      	mov	r8, r3
 800a292:	898b      	ldrh	r3, [r1, #12]
 800a294:	4607      	mov	r7, r0
 800a296:	061b      	lsls	r3, r3, #24
 800a298:	460d      	mov	r5, r1
 800a29a:	4614      	mov	r4, r2
 800a29c:	b09d      	sub	sp, #116	; 0x74
 800a29e:	d50e      	bpl.n	800a2be <_svfiprintf_r+0x32>
 800a2a0:	690b      	ldr	r3, [r1, #16]
 800a2a2:	b963      	cbnz	r3, 800a2be <_svfiprintf_r+0x32>
 800a2a4:	2140      	movs	r1, #64	; 0x40
 800a2a6:	f7ff ff21 	bl	800a0ec <_malloc_r>
 800a2aa:	6028      	str	r0, [r5, #0]
 800a2ac:	6128      	str	r0, [r5, #16]
 800a2ae:	b920      	cbnz	r0, 800a2ba <_svfiprintf_r+0x2e>
 800a2b0:	230c      	movs	r3, #12
 800a2b2:	603b      	str	r3, [r7, #0]
 800a2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2b8:	e0d1      	b.n	800a45e <_svfiprintf_r+0x1d2>
 800a2ba:	2340      	movs	r3, #64	; 0x40
 800a2bc:	616b      	str	r3, [r5, #20]
 800a2be:	2300      	movs	r3, #0
 800a2c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a2c2:	2320      	movs	r3, #32
 800a2c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2c8:	2330      	movs	r3, #48	; 0x30
 800a2ca:	f04f 0901 	mov.w	r9, #1
 800a2ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a478 <_svfiprintf_r+0x1ec>
 800a2d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2da:	4623      	mov	r3, r4
 800a2dc:	469a      	mov	sl, r3
 800a2de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2e2:	b10a      	cbz	r2, 800a2e8 <_svfiprintf_r+0x5c>
 800a2e4:	2a25      	cmp	r2, #37	; 0x25
 800a2e6:	d1f9      	bne.n	800a2dc <_svfiprintf_r+0x50>
 800a2e8:	ebba 0b04 	subs.w	fp, sl, r4
 800a2ec:	d00b      	beq.n	800a306 <_svfiprintf_r+0x7a>
 800a2ee:	465b      	mov	r3, fp
 800a2f0:	4622      	mov	r2, r4
 800a2f2:	4629      	mov	r1, r5
 800a2f4:	4638      	mov	r0, r7
 800a2f6:	f7ff ff6d 	bl	800a1d4 <__ssputs_r>
 800a2fa:	3001      	adds	r0, #1
 800a2fc:	f000 80aa 	beq.w	800a454 <_svfiprintf_r+0x1c8>
 800a300:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a302:	445a      	add	r2, fp
 800a304:	9209      	str	r2, [sp, #36]	; 0x24
 800a306:	f89a 3000 	ldrb.w	r3, [sl]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	f000 80a2 	beq.w	800a454 <_svfiprintf_r+0x1c8>
 800a310:	2300      	movs	r3, #0
 800a312:	f04f 32ff 	mov.w	r2, #4294967295
 800a316:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a31a:	f10a 0a01 	add.w	sl, sl, #1
 800a31e:	9304      	str	r3, [sp, #16]
 800a320:	9307      	str	r3, [sp, #28]
 800a322:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a326:	931a      	str	r3, [sp, #104]	; 0x68
 800a328:	4654      	mov	r4, sl
 800a32a:	2205      	movs	r2, #5
 800a32c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a330:	4851      	ldr	r0, [pc, #324]	; (800a478 <_svfiprintf_r+0x1ec>)
 800a332:	f7ff f98b 	bl	800964c <memchr>
 800a336:	9a04      	ldr	r2, [sp, #16]
 800a338:	b9d8      	cbnz	r0, 800a372 <_svfiprintf_r+0xe6>
 800a33a:	06d0      	lsls	r0, r2, #27
 800a33c:	bf44      	itt	mi
 800a33e:	2320      	movmi	r3, #32
 800a340:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a344:	0711      	lsls	r1, r2, #28
 800a346:	bf44      	itt	mi
 800a348:	232b      	movmi	r3, #43	; 0x2b
 800a34a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a34e:	f89a 3000 	ldrb.w	r3, [sl]
 800a352:	2b2a      	cmp	r3, #42	; 0x2a
 800a354:	d015      	beq.n	800a382 <_svfiprintf_r+0xf6>
 800a356:	4654      	mov	r4, sl
 800a358:	2000      	movs	r0, #0
 800a35a:	f04f 0c0a 	mov.w	ip, #10
 800a35e:	9a07      	ldr	r2, [sp, #28]
 800a360:	4621      	mov	r1, r4
 800a362:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a366:	3b30      	subs	r3, #48	; 0x30
 800a368:	2b09      	cmp	r3, #9
 800a36a:	d94e      	bls.n	800a40a <_svfiprintf_r+0x17e>
 800a36c:	b1b0      	cbz	r0, 800a39c <_svfiprintf_r+0x110>
 800a36e:	9207      	str	r2, [sp, #28]
 800a370:	e014      	b.n	800a39c <_svfiprintf_r+0x110>
 800a372:	eba0 0308 	sub.w	r3, r0, r8
 800a376:	fa09 f303 	lsl.w	r3, r9, r3
 800a37a:	4313      	orrs	r3, r2
 800a37c:	46a2      	mov	sl, r4
 800a37e:	9304      	str	r3, [sp, #16]
 800a380:	e7d2      	b.n	800a328 <_svfiprintf_r+0x9c>
 800a382:	9b03      	ldr	r3, [sp, #12]
 800a384:	1d19      	adds	r1, r3, #4
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	9103      	str	r1, [sp, #12]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	bfbb      	ittet	lt
 800a38e:	425b      	neglt	r3, r3
 800a390:	f042 0202 	orrlt.w	r2, r2, #2
 800a394:	9307      	strge	r3, [sp, #28]
 800a396:	9307      	strlt	r3, [sp, #28]
 800a398:	bfb8      	it	lt
 800a39a:	9204      	strlt	r2, [sp, #16]
 800a39c:	7823      	ldrb	r3, [r4, #0]
 800a39e:	2b2e      	cmp	r3, #46	; 0x2e
 800a3a0:	d10c      	bne.n	800a3bc <_svfiprintf_r+0x130>
 800a3a2:	7863      	ldrb	r3, [r4, #1]
 800a3a4:	2b2a      	cmp	r3, #42	; 0x2a
 800a3a6:	d135      	bne.n	800a414 <_svfiprintf_r+0x188>
 800a3a8:	9b03      	ldr	r3, [sp, #12]
 800a3aa:	3402      	adds	r4, #2
 800a3ac:	1d1a      	adds	r2, r3, #4
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	9203      	str	r2, [sp, #12]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	bfb8      	it	lt
 800a3b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3ba:	9305      	str	r3, [sp, #20]
 800a3bc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a47c <_svfiprintf_r+0x1f0>
 800a3c0:	2203      	movs	r2, #3
 800a3c2:	4650      	mov	r0, sl
 800a3c4:	7821      	ldrb	r1, [r4, #0]
 800a3c6:	f7ff f941 	bl	800964c <memchr>
 800a3ca:	b140      	cbz	r0, 800a3de <_svfiprintf_r+0x152>
 800a3cc:	2340      	movs	r3, #64	; 0x40
 800a3ce:	eba0 000a 	sub.w	r0, r0, sl
 800a3d2:	fa03 f000 	lsl.w	r0, r3, r0
 800a3d6:	9b04      	ldr	r3, [sp, #16]
 800a3d8:	3401      	adds	r4, #1
 800a3da:	4303      	orrs	r3, r0
 800a3dc:	9304      	str	r3, [sp, #16]
 800a3de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3e2:	2206      	movs	r2, #6
 800a3e4:	4826      	ldr	r0, [pc, #152]	; (800a480 <_svfiprintf_r+0x1f4>)
 800a3e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3ea:	f7ff f92f 	bl	800964c <memchr>
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	d038      	beq.n	800a464 <_svfiprintf_r+0x1d8>
 800a3f2:	4b24      	ldr	r3, [pc, #144]	; (800a484 <_svfiprintf_r+0x1f8>)
 800a3f4:	bb1b      	cbnz	r3, 800a43e <_svfiprintf_r+0x1b2>
 800a3f6:	9b03      	ldr	r3, [sp, #12]
 800a3f8:	3307      	adds	r3, #7
 800a3fa:	f023 0307 	bic.w	r3, r3, #7
 800a3fe:	3308      	adds	r3, #8
 800a400:	9303      	str	r3, [sp, #12]
 800a402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a404:	4433      	add	r3, r6
 800a406:	9309      	str	r3, [sp, #36]	; 0x24
 800a408:	e767      	b.n	800a2da <_svfiprintf_r+0x4e>
 800a40a:	460c      	mov	r4, r1
 800a40c:	2001      	movs	r0, #1
 800a40e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a412:	e7a5      	b.n	800a360 <_svfiprintf_r+0xd4>
 800a414:	2300      	movs	r3, #0
 800a416:	f04f 0c0a 	mov.w	ip, #10
 800a41a:	4619      	mov	r1, r3
 800a41c:	3401      	adds	r4, #1
 800a41e:	9305      	str	r3, [sp, #20]
 800a420:	4620      	mov	r0, r4
 800a422:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a426:	3a30      	subs	r2, #48	; 0x30
 800a428:	2a09      	cmp	r2, #9
 800a42a:	d903      	bls.n	800a434 <_svfiprintf_r+0x1a8>
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d0c5      	beq.n	800a3bc <_svfiprintf_r+0x130>
 800a430:	9105      	str	r1, [sp, #20]
 800a432:	e7c3      	b.n	800a3bc <_svfiprintf_r+0x130>
 800a434:	4604      	mov	r4, r0
 800a436:	2301      	movs	r3, #1
 800a438:	fb0c 2101 	mla	r1, ip, r1, r2
 800a43c:	e7f0      	b.n	800a420 <_svfiprintf_r+0x194>
 800a43e:	ab03      	add	r3, sp, #12
 800a440:	9300      	str	r3, [sp, #0]
 800a442:	462a      	mov	r2, r5
 800a444:	4638      	mov	r0, r7
 800a446:	4b10      	ldr	r3, [pc, #64]	; (800a488 <_svfiprintf_r+0x1fc>)
 800a448:	a904      	add	r1, sp, #16
 800a44a:	f7fc fcf3 	bl	8006e34 <_printf_float>
 800a44e:	1c42      	adds	r2, r0, #1
 800a450:	4606      	mov	r6, r0
 800a452:	d1d6      	bne.n	800a402 <_svfiprintf_r+0x176>
 800a454:	89ab      	ldrh	r3, [r5, #12]
 800a456:	065b      	lsls	r3, r3, #25
 800a458:	f53f af2c 	bmi.w	800a2b4 <_svfiprintf_r+0x28>
 800a45c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a45e:	b01d      	add	sp, #116	; 0x74
 800a460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a464:	ab03      	add	r3, sp, #12
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	462a      	mov	r2, r5
 800a46a:	4638      	mov	r0, r7
 800a46c:	4b06      	ldr	r3, [pc, #24]	; (800a488 <_svfiprintf_r+0x1fc>)
 800a46e:	a904      	add	r1, sp, #16
 800a470:	f7fc ff7c 	bl	800736c <_printf_i>
 800a474:	e7eb      	b.n	800a44e <_svfiprintf_r+0x1c2>
 800a476:	bf00      	nop
 800a478:	0800b56c 	.word	0x0800b56c
 800a47c:	0800b572 	.word	0x0800b572
 800a480:	0800b576 	.word	0x0800b576
 800a484:	08006e35 	.word	0x08006e35
 800a488:	0800a1d5 	.word	0x0800a1d5

0800a48c <nan>:
 800a48c:	2000      	movs	r0, #0
 800a48e:	4901      	ldr	r1, [pc, #4]	; (800a494 <nan+0x8>)
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	7ff80000 	.word	0x7ff80000

0800a498 <_sbrk_r>:
 800a498:	b538      	push	{r3, r4, r5, lr}
 800a49a:	2300      	movs	r3, #0
 800a49c:	4d05      	ldr	r5, [pc, #20]	; (800a4b4 <_sbrk_r+0x1c>)
 800a49e:	4604      	mov	r4, r0
 800a4a0:	4608      	mov	r0, r1
 800a4a2:	602b      	str	r3, [r5, #0]
 800a4a4:	f7f9 f856 	bl	8003554 <_sbrk>
 800a4a8:	1c43      	adds	r3, r0, #1
 800a4aa:	d102      	bne.n	800a4b2 <_sbrk_r+0x1a>
 800a4ac:	682b      	ldr	r3, [r5, #0]
 800a4ae:	b103      	cbz	r3, 800a4b2 <_sbrk_r+0x1a>
 800a4b0:	6023      	str	r3, [r4, #0]
 800a4b2:	bd38      	pop	{r3, r4, r5, pc}
 800a4b4:	20001428 	.word	0x20001428

0800a4b8 <__ascii_wctomb>:
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	4608      	mov	r0, r1
 800a4bc:	b141      	cbz	r1, 800a4d0 <__ascii_wctomb+0x18>
 800a4be:	2aff      	cmp	r2, #255	; 0xff
 800a4c0:	d904      	bls.n	800a4cc <__ascii_wctomb+0x14>
 800a4c2:	228a      	movs	r2, #138	; 0x8a
 800a4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c8:	601a      	str	r2, [r3, #0]
 800a4ca:	4770      	bx	lr
 800a4cc:	2001      	movs	r0, #1
 800a4ce:	700a      	strb	r2, [r1, #0]
 800a4d0:	4770      	bx	lr
	...

0800a4d4 <__assert_func>:
 800a4d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4d6:	4614      	mov	r4, r2
 800a4d8:	461a      	mov	r2, r3
 800a4da:	4b09      	ldr	r3, [pc, #36]	; (800a500 <__assert_func+0x2c>)
 800a4dc:	4605      	mov	r5, r0
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	68d8      	ldr	r0, [r3, #12]
 800a4e2:	b14c      	cbz	r4, 800a4f8 <__assert_func+0x24>
 800a4e4:	4b07      	ldr	r3, [pc, #28]	; (800a504 <__assert_func+0x30>)
 800a4e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4ea:	9100      	str	r1, [sp, #0]
 800a4ec:	462b      	mov	r3, r5
 800a4ee:	4906      	ldr	r1, [pc, #24]	; (800a508 <__assert_func+0x34>)
 800a4f0:	f000 f80e 	bl	800a510 <fiprintf>
 800a4f4:	f000 fa8a 	bl	800aa0c <abort>
 800a4f8:	4b04      	ldr	r3, [pc, #16]	; (800a50c <__assert_func+0x38>)
 800a4fa:	461c      	mov	r4, r3
 800a4fc:	e7f3      	b.n	800a4e6 <__assert_func+0x12>
 800a4fe:	bf00      	nop
 800a500:	20000018 	.word	0x20000018
 800a504:	0800b57d 	.word	0x0800b57d
 800a508:	0800b58a 	.word	0x0800b58a
 800a50c:	0800b5b8 	.word	0x0800b5b8

0800a510 <fiprintf>:
 800a510:	b40e      	push	{r1, r2, r3}
 800a512:	b503      	push	{r0, r1, lr}
 800a514:	4601      	mov	r1, r0
 800a516:	ab03      	add	r3, sp, #12
 800a518:	4805      	ldr	r0, [pc, #20]	; (800a530 <fiprintf+0x20>)
 800a51a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a51e:	6800      	ldr	r0, [r0, #0]
 800a520:	9301      	str	r3, [sp, #4]
 800a522:	f000 f883 	bl	800a62c <_vfiprintf_r>
 800a526:	b002      	add	sp, #8
 800a528:	f85d eb04 	ldr.w	lr, [sp], #4
 800a52c:	b003      	add	sp, #12
 800a52e:	4770      	bx	lr
 800a530:	20000018 	.word	0x20000018

0800a534 <memmove>:
 800a534:	4288      	cmp	r0, r1
 800a536:	b510      	push	{r4, lr}
 800a538:	eb01 0402 	add.w	r4, r1, r2
 800a53c:	d902      	bls.n	800a544 <memmove+0x10>
 800a53e:	4284      	cmp	r4, r0
 800a540:	4623      	mov	r3, r4
 800a542:	d807      	bhi.n	800a554 <memmove+0x20>
 800a544:	1e43      	subs	r3, r0, #1
 800a546:	42a1      	cmp	r1, r4
 800a548:	d008      	beq.n	800a55c <memmove+0x28>
 800a54a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a54e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a552:	e7f8      	b.n	800a546 <memmove+0x12>
 800a554:	4601      	mov	r1, r0
 800a556:	4402      	add	r2, r0
 800a558:	428a      	cmp	r2, r1
 800a55a:	d100      	bne.n	800a55e <memmove+0x2a>
 800a55c:	bd10      	pop	{r4, pc}
 800a55e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a562:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a566:	e7f7      	b.n	800a558 <memmove+0x24>

0800a568 <__malloc_lock>:
 800a568:	4801      	ldr	r0, [pc, #4]	; (800a570 <__malloc_lock+0x8>)
 800a56a:	f000 bc0b 	b.w	800ad84 <__retarget_lock_acquire_recursive>
 800a56e:	bf00      	nop
 800a570:	2000142c 	.word	0x2000142c

0800a574 <__malloc_unlock>:
 800a574:	4801      	ldr	r0, [pc, #4]	; (800a57c <__malloc_unlock+0x8>)
 800a576:	f000 bc06 	b.w	800ad86 <__retarget_lock_release_recursive>
 800a57a:	bf00      	nop
 800a57c:	2000142c 	.word	0x2000142c

0800a580 <_realloc_r>:
 800a580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a584:	4680      	mov	r8, r0
 800a586:	4614      	mov	r4, r2
 800a588:	460e      	mov	r6, r1
 800a58a:	b921      	cbnz	r1, 800a596 <_realloc_r+0x16>
 800a58c:	4611      	mov	r1, r2
 800a58e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a592:	f7ff bdab 	b.w	800a0ec <_malloc_r>
 800a596:	b92a      	cbnz	r2, 800a5a4 <_realloc_r+0x24>
 800a598:	f7ff fd40 	bl	800a01c <_free_r>
 800a59c:	4625      	mov	r5, r4
 800a59e:	4628      	mov	r0, r5
 800a5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a4:	f000 fc56 	bl	800ae54 <_malloc_usable_size_r>
 800a5a8:	4284      	cmp	r4, r0
 800a5aa:	4607      	mov	r7, r0
 800a5ac:	d802      	bhi.n	800a5b4 <_realloc_r+0x34>
 800a5ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5b2:	d812      	bhi.n	800a5da <_realloc_r+0x5a>
 800a5b4:	4621      	mov	r1, r4
 800a5b6:	4640      	mov	r0, r8
 800a5b8:	f7ff fd98 	bl	800a0ec <_malloc_r>
 800a5bc:	4605      	mov	r5, r0
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	d0ed      	beq.n	800a59e <_realloc_r+0x1e>
 800a5c2:	42bc      	cmp	r4, r7
 800a5c4:	4622      	mov	r2, r4
 800a5c6:	4631      	mov	r1, r6
 800a5c8:	bf28      	it	cs
 800a5ca:	463a      	movcs	r2, r7
 800a5cc:	f7ff f84c 	bl	8009668 <memcpy>
 800a5d0:	4631      	mov	r1, r6
 800a5d2:	4640      	mov	r0, r8
 800a5d4:	f7ff fd22 	bl	800a01c <_free_r>
 800a5d8:	e7e1      	b.n	800a59e <_realloc_r+0x1e>
 800a5da:	4635      	mov	r5, r6
 800a5dc:	e7df      	b.n	800a59e <_realloc_r+0x1e>

0800a5de <__sfputc_r>:
 800a5de:	6893      	ldr	r3, [r2, #8]
 800a5e0:	b410      	push	{r4}
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	6093      	str	r3, [r2, #8]
 800a5e8:	da07      	bge.n	800a5fa <__sfputc_r+0x1c>
 800a5ea:	6994      	ldr	r4, [r2, #24]
 800a5ec:	42a3      	cmp	r3, r4
 800a5ee:	db01      	blt.n	800a5f4 <__sfputc_r+0x16>
 800a5f0:	290a      	cmp	r1, #10
 800a5f2:	d102      	bne.n	800a5fa <__sfputc_r+0x1c>
 800a5f4:	bc10      	pop	{r4}
 800a5f6:	f000 b949 	b.w	800a88c <__swbuf_r>
 800a5fa:	6813      	ldr	r3, [r2, #0]
 800a5fc:	1c58      	adds	r0, r3, #1
 800a5fe:	6010      	str	r0, [r2, #0]
 800a600:	7019      	strb	r1, [r3, #0]
 800a602:	4608      	mov	r0, r1
 800a604:	bc10      	pop	{r4}
 800a606:	4770      	bx	lr

0800a608 <__sfputs_r>:
 800a608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a60a:	4606      	mov	r6, r0
 800a60c:	460f      	mov	r7, r1
 800a60e:	4614      	mov	r4, r2
 800a610:	18d5      	adds	r5, r2, r3
 800a612:	42ac      	cmp	r4, r5
 800a614:	d101      	bne.n	800a61a <__sfputs_r+0x12>
 800a616:	2000      	movs	r0, #0
 800a618:	e007      	b.n	800a62a <__sfputs_r+0x22>
 800a61a:	463a      	mov	r2, r7
 800a61c:	4630      	mov	r0, r6
 800a61e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a622:	f7ff ffdc 	bl	800a5de <__sfputc_r>
 800a626:	1c43      	adds	r3, r0, #1
 800a628:	d1f3      	bne.n	800a612 <__sfputs_r+0xa>
 800a62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a62c <_vfiprintf_r>:
 800a62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a630:	460d      	mov	r5, r1
 800a632:	4614      	mov	r4, r2
 800a634:	4698      	mov	r8, r3
 800a636:	4606      	mov	r6, r0
 800a638:	b09d      	sub	sp, #116	; 0x74
 800a63a:	b118      	cbz	r0, 800a644 <_vfiprintf_r+0x18>
 800a63c:	6983      	ldr	r3, [r0, #24]
 800a63e:	b90b      	cbnz	r3, 800a644 <_vfiprintf_r+0x18>
 800a640:	f000 fb02 	bl	800ac48 <__sinit>
 800a644:	4b89      	ldr	r3, [pc, #548]	; (800a86c <_vfiprintf_r+0x240>)
 800a646:	429d      	cmp	r5, r3
 800a648:	d11b      	bne.n	800a682 <_vfiprintf_r+0x56>
 800a64a:	6875      	ldr	r5, [r6, #4]
 800a64c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a64e:	07d9      	lsls	r1, r3, #31
 800a650:	d405      	bmi.n	800a65e <_vfiprintf_r+0x32>
 800a652:	89ab      	ldrh	r3, [r5, #12]
 800a654:	059a      	lsls	r2, r3, #22
 800a656:	d402      	bmi.n	800a65e <_vfiprintf_r+0x32>
 800a658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a65a:	f000 fb93 	bl	800ad84 <__retarget_lock_acquire_recursive>
 800a65e:	89ab      	ldrh	r3, [r5, #12]
 800a660:	071b      	lsls	r3, r3, #28
 800a662:	d501      	bpl.n	800a668 <_vfiprintf_r+0x3c>
 800a664:	692b      	ldr	r3, [r5, #16]
 800a666:	b9eb      	cbnz	r3, 800a6a4 <_vfiprintf_r+0x78>
 800a668:	4629      	mov	r1, r5
 800a66a:	4630      	mov	r0, r6
 800a66c:	f000 f960 	bl	800a930 <__swsetup_r>
 800a670:	b1c0      	cbz	r0, 800a6a4 <_vfiprintf_r+0x78>
 800a672:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a674:	07dc      	lsls	r4, r3, #31
 800a676:	d50e      	bpl.n	800a696 <_vfiprintf_r+0x6a>
 800a678:	f04f 30ff 	mov.w	r0, #4294967295
 800a67c:	b01d      	add	sp, #116	; 0x74
 800a67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a682:	4b7b      	ldr	r3, [pc, #492]	; (800a870 <_vfiprintf_r+0x244>)
 800a684:	429d      	cmp	r5, r3
 800a686:	d101      	bne.n	800a68c <_vfiprintf_r+0x60>
 800a688:	68b5      	ldr	r5, [r6, #8]
 800a68a:	e7df      	b.n	800a64c <_vfiprintf_r+0x20>
 800a68c:	4b79      	ldr	r3, [pc, #484]	; (800a874 <_vfiprintf_r+0x248>)
 800a68e:	429d      	cmp	r5, r3
 800a690:	bf08      	it	eq
 800a692:	68f5      	ldreq	r5, [r6, #12]
 800a694:	e7da      	b.n	800a64c <_vfiprintf_r+0x20>
 800a696:	89ab      	ldrh	r3, [r5, #12]
 800a698:	0598      	lsls	r0, r3, #22
 800a69a:	d4ed      	bmi.n	800a678 <_vfiprintf_r+0x4c>
 800a69c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a69e:	f000 fb72 	bl	800ad86 <__retarget_lock_release_recursive>
 800a6a2:	e7e9      	b.n	800a678 <_vfiprintf_r+0x4c>
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6a8:	2320      	movs	r3, #32
 800a6aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6ae:	2330      	movs	r3, #48	; 0x30
 800a6b0:	f04f 0901 	mov.w	r9, #1
 800a6b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6b8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a878 <_vfiprintf_r+0x24c>
 800a6bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6c0:	4623      	mov	r3, r4
 800a6c2:	469a      	mov	sl, r3
 800a6c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6c8:	b10a      	cbz	r2, 800a6ce <_vfiprintf_r+0xa2>
 800a6ca:	2a25      	cmp	r2, #37	; 0x25
 800a6cc:	d1f9      	bne.n	800a6c2 <_vfiprintf_r+0x96>
 800a6ce:	ebba 0b04 	subs.w	fp, sl, r4
 800a6d2:	d00b      	beq.n	800a6ec <_vfiprintf_r+0xc0>
 800a6d4:	465b      	mov	r3, fp
 800a6d6:	4622      	mov	r2, r4
 800a6d8:	4629      	mov	r1, r5
 800a6da:	4630      	mov	r0, r6
 800a6dc:	f7ff ff94 	bl	800a608 <__sfputs_r>
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	f000 80aa 	beq.w	800a83a <_vfiprintf_r+0x20e>
 800a6e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6e8:	445a      	add	r2, fp
 800a6ea:	9209      	str	r2, [sp, #36]	; 0x24
 800a6ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f000 80a2 	beq.w	800a83a <_vfiprintf_r+0x20e>
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a700:	f10a 0a01 	add.w	sl, sl, #1
 800a704:	9304      	str	r3, [sp, #16]
 800a706:	9307      	str	r3, [sp, #28]
 800a708:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a70c:	931a      	str	r3, [sp, #104]	; 0x68
 800a70e:	4654      	mov	r4, sl
 800a710:	2205      	movs	r2, #5
 800a712:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a716:	4858      	ldr	r0, [pc, #352]	; (800a878 <_vfiprintf_r+0x24c>)
 800a718:	f7fe ff98 	bl	800964c <memchr>
 800a71c:	9a04      	ldr	r2, [sp, #16]
 800a71e:	b9d8      	cbnz	r0, 800a758 <_vfiprintf_r+0x12c>
 800a720:	06d1      	lsls	r1, r2, #27
 800a722:	bf44      	itt	mi
 800a724:	2320      	movmi	r3, #32
 800a726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a72a:	0713      	lsls	r3, r2, #28
 800a72c:	bf44      	itt	mi
 800a72e:	232b      	movmi	r3, #43	; 0x2b
 800a730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a734:	f89a 3000 	ldrb.w	r3, [sl]
 800a738:	2b2a      	cmp	r3, #42	; 0x2a
 800a73a:	d015      	beq.n	800a768 <_vfiprintf_r+0x13c>
 800a73c:	4654      	mov	r4, sl
 800a73e:	2000      	movs	r0, #0
 800a740:	f04f 0c0a 	mov.w	ip, #10
 800a744:	9a07      	ldr	r2, [sp, #28]
 800a746:	4621      	mov	r1, r4
 800a748:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a74c:	3b30      	subs	r3, #48	; 0x30
 800a74e:	2b09      	cmp	r3, #9
 800a750:	d94e      	bls.n	800a7f0 <_vfiprintf_r+0x1c4>
 800a752:	b1b0      	cbz	r0, 800a782 <_vfiprintf_r+0x156>
 800a754:	9207      	str	r2, [sp, #28]
 800a756:	e014      	b.n	800a782 <_vfiprintf_r+0x156>
 800a758:	eba0 0308 	sub.w	r3, r0, r8
 800a75c:	fa09 f303 	lsl.w	r3, r9, r3
 800a760:	4313      	orrs	r3, r2
 800a762:	46a2      	mov	sl, r4
 800a764:	9304      	str	r3, [sp, #16]
 800a766:	e7d2      	b.n	800a70e <_vfiprintf_r+0xe2>
 800a768:	9b03      	ldr	r3, [sp, #12]
 800a76a:	1d19      	adds	r1, r3, #4
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	9103      	str	r1, [sp, #12]
 800a770:	2b00      	cmp	r3, #0
 800a772:	bfbb      	ittet	lt
 800a774:	425b      	neglt	r3, r3
 800a776:	f042 0202 	orrlt.w	r2, r2, #2
 800a77a:	9307      	strge	r3, [sp, #28]
 800a77c:	9307      	strlt	r3, [sp, #28]
 800a77e:	bfb8      	it	lt
 800a780:	9204      	strlt	r2, [sp, #16]
 800a782:	7823      	ldrb	r3, [r4, #0]
 800a784:	2b2e      	cmp	r3, #46	; 0x2e
 800a786:	d10c      	bne.n	800a7a2 <_vfiprintf_r+0x176>
 800a788:	7863      	ldrb	r3, [r4, #1]
 800a78a:	2b2a      	cmp	r3, #42	; 0x2a
 800a78c:	d135      	bne.n	800a7fa <_vfiprintf_r+0x1ce>
 800a78e:	9b03      	ldr	r3, [sp, #12]
 800a790:	3402      	adds	r4, #2
 800a792:	1d1a      	adds	r2, r3, #4
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	9203      	str	r2, [sp, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	bfb8      	it	lt
 800a79c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7a0:	9305      	str	r3, [sp, #20]
 800a7a2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a87c <_vfiprintf_r+0x250>
 800a7a6:	2203      	movs	r2, #3
 800a7a8:	4650      	mov	r0, sl
 800a7aa:	7821      	ldrb	r1, [r4, #0]
 800a7ac:	f7fe ff4e 	bl	800964c <memchr>
 800a7b0:	b140      	cbz	r0, 800a7c4 <_vfiprintf_r+0x198>
 800a7b2:	2340      	movs	r3, #64	; 0x40
 800a7b4:	eba0 000a 	sub.w	r0, r0, sl
 800a7b8:	fa03 f000 	lsl.w	r0, r3, r0
 800a7bc:	9b04      	ldr	r3, [sp, #16]
 800a7be:	3401      	adds	r4, #1
 800a7c0:	4303      	orrs	r3, r0
 800a7c2:	9304      	str	r3, [sp, #16]
 800a7c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7c8:	2206      	movs	r2, #6
 800a7ca:	482d      	ldr	r0, [pc, #180]	; (800a880 <_vfiprintf_r+0x254>)
 800a7cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7d0:	f7fe ff3c 	bl	800964c <memchr>
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	d03f      	beq.n	800a858 <_vfiprintf_r+0x22c>
 800a7d8:	4b2a      	ldr	r3, [pc, #168]	; (800a884 <_vfiprintf_r+0x258>)
 800a7da:	bb1b      	cbnz	r3, 800a824 <_vfiprintf_r+0x1f8>
 800a7dc:	9b03      	ldr	r3, [sp, #12]
 800a7de:	3307      	adds	r3, #7
 800a7e0:	f023 0307 	bic.w	r3, r3, #7
 800a7e4:	3308      	adds	r3, #8
 800a7e6:	9303      	str	r3, [sp, #12]
 800a7e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ea:	443b      	add	r3, r7
 800a7ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ee:	e767      	b.n	800a6c0 <_vfiprintf_r+0x94>
 800a7f0:	460c      	mov	r4, r1
 800a7f2:	2001      	movs	r0, #1
 800a7f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7f8:	e7a5      	b.n	800a746 <_vfiprintf_r+0x11a>
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	f04f 0c0a 	mov.w	ip, #10
 800a800:	4619      	mov	r1, r3
 800a802:	3401      	adds	r4, #1
 800a804:	9305      	str	r3, [sp, #20]
 800a806:	4620      	mov	r0, r4
 800a808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a80c:	3a30      	subs	r2, #48	; 0x30
 800a80e:	2a09      	cmp	r2, #9
 800a810:	d903      	bls.n	800a81a <_vfiprintf_r+0x1ee>
 800a812:	2b00      	cmp	r3, #0
 800a814:	d0c5      	beq.n	800a7a2 <_vfiprintf_r+0x176>
 800a816:	9105      	str	r1, [sp, #20]
 800a818:	e7c3      	b.n	800a7a2 <_vfiprintf_r+0x176>
 800a81a:	4604      	mov	r4, r0
 800a81c:	2301      	movs	r3, #1
 800a81e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a822:	e7f0      	b.n	800a806 <_vfiprintf_r+0x1da>
 800a824:	ab03      	add	r3, sp, #12
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	462a      	mov	r2, r5
 800a82a:	4630      	mov	r0, r6
 800a82c:	4b16      	ldr	r3, [pc, #88]	; (800a888 <_vfiprintf_r+0x25c>)
 800a82e:	a904      	add	r1, sp, #16
 800a830:	f7fc fb00 	bl	8006e34 <_printf_float>
 800a834:	4607      	mov	r7, r0
 800a836:	1c78      	adds	r0, r7, #1
 800a838:	d1d6      	bne.n	800a7e8 <_vfiprintf_r+0x1bc>
 800a83a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a83c:	07d9      	lsls	r1, r3, #31
 800a83e:	d405      	bmi.n	800a84c <_vfiprintf_r+0x220>
 800a840:	89ab      	ldrh	r3, [r5, #12]
 800a842:	059a      	lsls	r2, r3, #22
 800a844:	d402      	bmi.n	800a84c <_vfiprintf_r+0x220>
 800a846:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a848:	f000 fa9d 	bl	800ad86 <__retarget_lock_release_recursive>
 800a84c:	89ab      	ldrh	r3, [r5, #12]
 800a84e:	065b      	lsls	r3, r3, #25
 800a850:	f53f af12 	bmi.w	800a678 <_vfiprintf_r+0x4c>
 800a854:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a856:	e711      	b.n	800a67c <_vfiprintf_r+0x50>
 800a858:	ab03      	add	r3, sp, #12
 800a85a:	9300      	str	r3, [sp, #0]
 800a85c:	462a      	mov	r2, r5
 800a85e:	4630      	mov	r0, r6
 800a860:	4b09      	ldr	r3, [pc, #36]	; (800a888 <_vfiprintf_r+0x25c>)
 800a862:	a904      	add	r1, sp, #16
 800a864:	f7fc fd82 	bl	800736c <_printf_i>
 800a868:	e7e4      	b.n	800a834 <_vfiprintf_r+0x208>
 800a86a:	bf00      	nop
 800a86c:	0800b6dc 	.word	0x0800b6dc
 800a870:	0800b6fc 	.word	0x0800b6fc
 800a874:	0800b6bc 	.word	0x0800b6bc
 800a878:	0800b56c 	.word	0x0800b56c
 800a87c:	0800b572 	.word	0x0800b572
 800a880:	0800b576 	.word	0x0800b576
 800a884:	08006e35 	.word	0x08006e35
 800a888:	0800a609 	.word	0x0800a609

0800a88c <__swbuf_r>:
 800a88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a88e:	460e      	mov	r6, r1
 800a890:	4614      	mov	r4, r2
 800a892:	4605      	mov	r5, r0
 800a894:	b118      	cbz	r0, 800a89e <__swbuf_r+0x12>
 800a896:	6983      	ldr	r3, [r0, #24]
 800a898:	b90b      	cbnz	r3, 800a89e <__swbuf_r+0x12>
 800a89a:	f000 f9d5 	bl	800ac48 <__sinit>
 800a89e:	4b21      	ldr	r3, [pc, #132]	; (800a924 <__swbuf_r+0x98>)
 800a8a0:	429c      	cmp	r4, r3
 800a8a2:	d12b      	bne.n	800a8fc <__swbuf_r+0x70>
 800a8a4:	686c      	ldr	r4, [r5, #4]
 800a8a6:	69a3      	ldr	r3, [r4, #24]
 800a8a8:	60a3      	str	r3, [r4, #8]
 800a8aa:	89a3      	ldrh	r3, [r4, #12]
 800a8ac:	071a      	lsls	r2, r3, #28
 800a8ae:	d52f      	bpl.n	800a910 <__swbuf_r+0x84>
 800a8b0:	6923      	ldr	r3, [r4, #16]
 800a8b2:	b36b      	cbz	r3, 800a910 <__swbuf_r+0x84>
 800a8b4:	6923      	ldr	r3, [r4, #16]
 800a8b6:	6820      	ldr	r0, [r4, #0]
 800a8b8:	b2f6      	uxtb	r6, r6
 800a8ba:	1ac0      	subs	r0, r0, r3
 800a8bc:	6963      	ldr	r3, [r4, #20]
 800a8be:	4637      	mov	r7, r6
 800a8c0:	4283      	cmp	r3, r0
 800a8c2:	dc04      	bgt.n	800a8ce <__swbuf_r+0x42>
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	f000 f92a 	bl	800ab20 <_fflush_r>
 800a8cc:	bb30      	cbnz	r0, 800a91c <__swbuf_r+0x90>
 800a8ce:	68a3      	ldr	r3, [r4, #8]
 800a8d0:	3001      	adds	r0, #1
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	60a3      	str	r3, [r4, #8]
 800a8d6:	6823      	ldr	r3, [r4, #0]
 800a8d8:	1c5a      	adds	r2, r3, #1
 800a8da:	6022      	str	r2, [r4, #0]
 800a8dc:	701e      	strb	r6, [r3, #0]
 800a8de:	6963      	ldr	r3, [r4, #20]
 800a8e0:	4283      	cmp	r3, r0
 800a8e2:	d004      	beq.n	800a8ee <__swbuf_r+0x62>
 800a8e4:	89a3      	ldrh	r3, [r4, #12]
 800a8e6:	07db      	lsls	r3, r3, #31
 800a8e8:	d506      	bpl.n	800a8f8 <__swbuf_r+0x6c>
 800a8ea:	2e0a      	cmp	r6, #10
 800a8ec:	d104      	bne.n	800a8f8 <__swbuf_r+0x6c>
 800a8ee:	4621      	mov	r1, r4
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	f000 f915 	bl	800ab20 <_fflush_r>
 800a8f6:	b988      	cbnz	r0, 800a91c <__swbuf_r+0x90>
 800a8f8:	4638      	mov	r0, r7
 800a8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8fc:	4b0a      	ldr	r3, [pc, #40]	; (800a928 <__swbuf_r+0x9c>)
 800a8fe:	429c      	cmp	r4, r3
 800a900:	d101      	bne.n	800a906 <__swbuf_r+0x7a>
 800a902:	68ac      	ldr	r4, [r5, #8]
 800a904:	e7cf      	b.n	800a8a6 <__swbuf_r+0x1a>
 800a906:	4b09      	ldr	r3, [pc, #36]	; (800a92c <__swbuf_r+0xa0>)
 800a908:	429c      	cmp	r4, r3
 800a90a:	bf08      	it	eq
 800a90c:	68ec      	ldreq	r4, [r5, #12]
 800a90e:	e7ca      	b.n	800a8a6 <__swbuf_r+0x1a>
 800a910:	4621      	mov	r1, r4
 800a912:	4628      	mov	r0, r5
 800a914:	f000 f80c 	bl	800a930 <__swsetup_r>
 800a918:	2800      	cmp	r0, #0
 800a91a:	d0cb      	beq.n	800a8b4 <__swbuf_r+0x28>
 800a91c:	f04f 37ff 	mov.w	r7, #4294967295
 800a920:	e7ea      	b.n	800a8f8 <__swbuf_r+0x6c>
 800a922:	bf00      	nop
 800a924:	0800b6dc 	.word	0x0800b6dc
 800a928:	0800b6fc 	.word	0x0800b6fc
 800a92c:	0800b6bc 	.word	0x0800b6bc

0800a930 <__swsetup_r>:
 800a930:	4b32      	ldr	r3, [pc, #200]	; (800a9fc <__swsetup_r+0xcc>)
 800a932:	b570      	push	{r4, r5, r6, lr}
 800a934:	681d      	ldr	r5, [r3, #0]
 800a936:	4606      	mov	r6, r0
 800a938:	460c      	mov	r4, r1
 800a93a:	b125      	cbz	r5, 800a946 <__swsetup_r+0x16>
 800a93c:	69ab      	ldr	r3, [r5, #24]
 800a93e:	b913      	cbnz	r3, 800a946 <__swsetup_r+0x16>
 800a940:	4628      	mov	r0, r5
 800a942:	f000 f981 	bl	800ac48 <__sinit>
 800a946:	4b2e      	ldr	r3, [pc, #184]	; (800aa00 <__swsetup_r+0xd0>)
 800a948:	429c      	cmp	r4, r3
 800a94a:	d10f      	bne.n	800a96c <__swsetup_r+0x3c>
 800a94c:	686c      	ldr	r4, [r5, #4]
 800a94e:	89a3      	ldrh	r3, [r4, #12]
 800a950:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a954:	0719      	lsls	r1, r3, #28
 800a956:	d42c      	bmi.n	800a9b2 <__swsetup_r+0x82>
 800a958:	06dd      	lsls	r5, r3, #27
 800a95a:	d411      	bmi.n	800a980 <__swsetup_r+0x50>
 800a95c:	2309      	movs	r3, #9
 800a95e:	6033      	str	r3, [r6, #0]
 800a960:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a964:	f04f 30ff 	mov.w	r0, #4294967295
 800a968:	81a3      	strh	r3, [r4, #12]
 800a96a:	e03e      	b.n	800a9ea <__swsetup_r+0xba>
 800a96c:	4b25      	ldr	r3, [pc, #148]	; (800aa04 <__swsetup_r+0xd4>)
 800a96e:	429c      	cmp	r4, r3
 800a970:	d101      	bne.n	800a976 <__swsetup_r+0x46>
 800a972:	68ac      	ldr	r4, [r5, #8]
 800a974:	e7eb      	b.n	800a94e <__swsetup_r+0x1e>
 800a976:	4b24      	ldr	r3, [pc, #144]	; (800aa08 <__swsetup_r+0xd8>)
 800a978:	429c      	cmp	r4, r3
 800a97a:	bf08      	it	eq
 800a97c:	68ec      	ldreq	r4, [r5, #12]
 800a97e:	e7e6      	b.n	800a94e <__swsetup_r+0x1e>
 800a980:	0758      	lsls	r0, r3, #29
 800a982:	d512      	bpl.n	800a9aa <__swsetup_r+0x7a>
 800a984:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a986:	b141      	cbz	r1, 800a99a <__swsetup_r+0x6a>
 800a988:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a98c:	4299      	cmp	r1, r3
 800a98e:	d002      	beq.n	800a996 <__swsetup_r+0x66>
 800a990:	4630      	mov	r0, r6
 800a992:	f7ff fb43 	bl	800a01c <_free_r>
 800a996:	2300      	movs	r3, #0
 800a998:	6363      	str	r3, [r4, #52]	; 0x34
 800a99a:	89a3      	ldrh	r3, [r4, #12]
 800a99c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a9a0:	81a3      	strh	r3, [r4, #12]
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	6063      	str	r3, [r4, #4]
 800a9a6:	6923      	ldr	r3, [r4, #16]
 800a9a8:	6023      	str	r3, [r4, #0]
 800a9aa:	89a3      	ldrh	r3, [r4, #12]
 800a9ac:	f043 0308 	orr.w	r3, r3, #8
 800a9b0:	81a3      	strh	r3, [r4, #12]
 800a9b2:	6923      	ldr	r3, [r4, #16]
 800a9b4:	b94b      	cbnz	r3, 800a9ca <__swsetup_r+0x9a>
 800a9b6:	89a3      	ldrh	r3, [r4, #12]
 800a9b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a9bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9c0:	d003      	beq.n	800a9ca <__swsetup_r+0x9a>
 800a9c2:	4621      	mov	r1, r4
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	f000 fa05 	bl	800add4 <__smakebuf_r>
 800a9ca:	89a0      	ldrh	r0, [r4, #12]
 800a9cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9d0:	f010 0301 	ands.w	r3, r0, #1
 800a9d4:	d00a      	beq.n	800a9ec <__swsetup_r+0xbc>
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	60a3      	str	r3, [r4, #8]
 800a9da:	6963      	ldr	r3, [r4, #20]
 800a9dc:	425b      	negs	r3, r3
 800a9de:	61a3      	str	r3, [r4, #24]
 800a9e0:	6923      	ldr	r3, [r4, #16]
 800a9e2:	b943      	cbnz	r3, 800a9f6 <__swsetup_r+0xc6>
 800a9e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a9e8:	d1ba      	bne.n	800a960 <__swsetup_r+0x30>
 800a9ea:	bd70      	pop	{r4, r5, r6, pc}
 800a9ec:	0781      	lsls	r1, r0, #30
 800a9ee:	bf58      	it	pl
 800a9f0:	6963      	ldrpl	r3, [r4, #20]
 800a9f2:	60a3      	str	r3, [r4, #8]
 800a9f4:	e7f4      	b.n	800a9e0 <__swsetup_r+0xb0>
 800a9f6:	2000      	movs	r0, #0
 800a9f8:	e7f7      	b.n	800a9ea <__swsetup_r+0xba>
 800a9fa:	bf00      	nop
 800a9fc:	20000018 	.word	0x20000018
 800aa00:	0800b6dc 	.word	0x0800b6dc
 800aa04:	0800b6fc 	.word	0x0800b6fc
 800aa08:	0800b6bc 	.word	0x0800b6bc

0800aa0c <abort>:
 800aa0c:	2006      	movs	r0, #6
 800aa0e:	b508      	push	{r3, lr}
 800aa10:	f000 fa50 	bl	800aeb4 <raise>
 800aa14:	2001      	movs	r0, #1
 800aa16:	f7f8 fd2a 	bl	800346e <_exit>
	...

0800aa1c <__sflush_r>:
 800aa1c:	898a      	ldrh	r2, [r1, #12]
 800aa1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa20:	4605      	mov	r5, r0
 800aa22:	0710      	lsls	r0, r2, #28
 800aa24:	460c      	mov	r4, r1
 800aa26:	d457      	bmi.n	800aad8 <__sflush_r+0xbc>
 800aa28:	684b      	ldr	r3, [r1, #4]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	dc04      	bgt.n	800aa38 <__sflush_r+0x1c>
 800aa2e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	dc01      	bgt.n	800aa38 <__sflush_r+0x1c>
 800aa34:	2000      	movs	r0, #0
 800aa36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa3a:	2e00      	cmp	r6, #0
 800aa3c:	d0fa      	beq.n	800aa34 <__sflush_r+0x18>
 800aa3e:	2300      	movs	r3, #0
 800aa40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa44:	682f      	ldr	r7, [r5, #0]
 800aa46:	602b      	str	r3, [r5, #0]
 800aa48:	d032      	beq.n	800aab0 <__sflush_r+0x94>
 800aa4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa4c:	89a3      	ldrh	r3, [r4, #12]
 800aa4e:	075a      	lsls	r2, r3, #29
 800aa50:	d505      	bpl.n	800aa5e <__sflush_r+0x42>
 800aa52:	6863      	ldr	r3, [r4, #4]
 800aa54:	1ac0      	subs	r0, r0, r3
 800aa56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa58:	b10b      	cbz	r3, 800aa5e <__sflush_r+0x42>
 800aa5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa5c:	1ac0      	subs	r0, r0, r3
 800aa5e:	2300      	movs	r3, #0
 800aa60:	4602      	mov	r2, r0
 800aa62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa64:	4628      	mov	r0, r5
 800aa66:	6a21      	ldr	r1, [r4, #32]
 800aa68:	47b0      	blx	r6
 800aa6a:	1c43      	adds	r3, r0, #1
 800aa6c:	89a3      	ldrh	r3, [r4, #12]
 800aa6e:	d106      	bne.n	800aa7e <__sflush_r+0x62>
 800aa70:	6829      	ldr	r1, [r5, #0]
 800aa72:	291d      	cmp	r1, #29
 800aa74:	d82c      	bhi.n	800aad0 <__sflush_r+0xb4>
 800aa76:	4a29      	ldr	r2, [pc, #164]	; (800ab1c <__sflush_r+0x100>)
 800aa78:	40ca      	lsrs	r2, r1
 800aa7a:	07d6      	lsls	r6, r2, #31
 800aa7c:	d528      	bpl.n	800aad0 <__sflush_r+0xb4>
 800aa7e:	2200      	movs	r2, #0
 800aa80:	6062      	str	r2, [r4, #4]
 800aa82:	6922      	ldr	r2, [r4, #16]
 800aa84:	04d9      	lsls	r1, r3, #19
 800aa86:	6022      	str	r2, [r4, #0]
 800aa88:	d504      	bpl.n	800aa94 <__sflush_r+0x78>
 800aa8a:	1c42      	adds	r2, r0, #1
 800aa8c:	d101      	bne.n	800aa92 <__sflush_r+0x76>
 800aa8e:	682b      	ldr	r3, [r5, #0]
 800aa90:	b903      	cbnz	r3, 800aa94 <__sflush_r+0x78>
 800aa92:	6560      	str	r0, [r4, #84]	; 0x54
 800aa94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa96:	602f      	str	r7, [r5, #0]
 800aa98:	2900      	cmp	r1, #0
 800aa9a:	d0cb      	beq.n	800aa34 <__sflush_r+0x18>
 800aa9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aaa0:	4299      	cmp	r1, r3
 800aaa2:	d002      	beq.n	800aaaa <__sflush_r+0x8e>
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	f7ff fab9 	bl	800a01c <_free_r>
 800aaaa:	2000      	movs	r0, #0
 800aaac:	6360      	str	r0, [r4, #52]	; 0x34
 800aaae:	e7c2      	b.n	800aa36 <__sflush_r+0x1a>
 800aab0:	6a21      	ldr	r1, [r4, #32]
 800aab2:	2301      	movs	r3, #1
 800aab4:	4628      	mov	r0, r5
 800aab6:	47b0      	blx	r6
 800aab8:	1c41      	adds	r1, r0, #1
 800aaba:	d1c7      	bne.n	800aa4c <__sflush_r+0x30>
 800aabc:	682b      	ldr	r3, [r5, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d0c4      	beq.n	800aa4c <__sflush_r+0x30>
 800aac2:	2b1d      	cmp	r3, #29
 800aac4:	d001      	beq.n	800aaca <__sflush_r+0xae>
 800aac6:	2b16      	cmp	r3, #22
 800aac8:	d101      	bne.n	800aace <__sflush_r+0xb2>
 800aaca:	602f      	str	r7, [r5, #0]
 800aacc:	e7b2      	b.n	800aa34 <__sflush_r+0x18>
 800aace:	89a3      	ldrh	r3, [r4, #12]
 800aad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aad4:	81a3      	strh	r3, [r4, #12]
 800aad6:	e7ae      	b.n	800aa36 <__sflush_r+0x1a>
 800aad8:	690f      	ldr	r7, [r1, #16]
 800aada:	2f00      	cmp	r7, #0
 800aadc:	d0aa      	beq.n	800aa34 <__sflush_r+0x18>
 800aade:	0793      	lsls	r3, r2, #30
 800aae0:	bf18      	it	ne
 800aae2:	2300      	movne	r3, #0
 800aae4:	680e      	ldr	r6, [r1, #0]
 800aae6:	bf08      	it	eq
 800aae8:	694b      	ldreq	r3, [r1, #20]
 800aaea:	1bf6      	subs	r6, r6, r7
 800aaec:	600f      	str	r7, [r1, #0]
 800aaee:	608b      	str	r3, [r1, #8]
 800aaf0:	2e00      	cmp	r6, #0
 800aaf2:	dd9f      	ble.n	800aa34 <__sflush_r+0x18>
 800aaf4:	4633      	mov	r3, r6
 800aaf6:	463a      	mov	r2, r7
 800aaf8:	4628      	mov	r0, r5
 800aafa:	6a21      	ldr	r1, [r4, #32]
 800aafc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ab00:	47e0      	blx	ip
 800ab02:	2800      	cmp	r0, #0
 800ab04:	dc06      	bgt.n	800ab14 <__sflush_r+0xf8>
 800ab06:	89a3      	ldrh	r3, [r4, #12]
 800ab08:	f04f 30ff 	mov.w	r0, #4294967295
 800ab0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab10:	81a3      	strh	r3, [r4, #12]
 800ab12:	e790      	b.n	800aa36 <__sflush_r+0x1a>
 800ab14:	4407      	add	r7, r0
 800ab16:	1a36      	subs	r6, r6, r0
 800ab18:	e7ea      	b.n	800aaf0 <__sflush_r+0xd4>
 800ab1a:	bf00      	nop
 800ab1c:	20400001 	.word	0x20400001

0800ab20 <_fflush_r>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	690b      	ldr	r3, [r1, #16]
 800ab24:	4605      	mov	r5, r0
 800ab26:	460c      	mov	r4, r1
 800ab28:	b913      	cbnz	r3, 800ab30 <_fflush_r+0x10>
 800ab2a:	2500      	movs	r5, #0
 800ab2c:	4628      	mov	r0, r5
 800ab2e:	bd38      	pop	{r3, r4, r5, pc}
 800ab30:	b118      	cbz	r0, 800ab3a <_fflush_r+0x1a>
 800ab32:	6983      	ldr	r3, [r0, #24]
 800ab34:	b90b      	cbnz	r3, 800ab3a <_fflush_r+0x1a>
 800ab36:	f000 f887 	bl	800ac48 <__sinit>
 800ab3a:	4b14      	ldr	r3, [pc, #80]	; (800ab8c <_fflush_r+0x6c>)
 800ab3c:	429c      	cmp	r4, r3
 800ab3e:	d11b      	bne.n	800ab78 <_fflush_r+0x58>
 800ab40:	686c      	ldr	r4, [r5, #4]
 800ab42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d0ef      	beq.n	800ab2a <_fflush_r+0xa>
 800ab4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab4c:	07d0      	lsls	r0, r2, #31
 800ab4e:	d404      	bmi.n	800ab5a <_fflush_r+0x3a>
 800ab50:	0599      	lsls	r1, r3, #22
 800ab52:	d402      	bmi.n	800ab5a <_fflush_r+0x3a>
 800ab54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab56:	f000 f915 	bl	800ad84 <__retarget_lock_acquire_recursive>
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	f7ff ff5d 	bl	800aa1c <__sflush_r>
 800ab62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab64:	4605      	mov	r5, r0
 800ab66:	07da      	lsls	r2, r3, #31
 800ab68:	d4e0      	bmi.n	800ab2c <_fflush_r+0xc>
 800ab6a:	89a3      	ldrh	r3, [r4, #12]
 800ab6c:	059b      	lsls	r3, r3, #22
 800ab6e:	d4dd      	bmi.n	800ab2c <_fflush_r+0xc>
 800ab70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab72:	f000 f908 	bl	800ad86 <__retarget_lock_release_recursive>
 800ab76:	e7d9      	b.n	800ab2c <_fflush_r+0xc>
 800ab78:	4b05      	ldr	r3, [pc, #20]	; (800ab90 <_fflush_r+0x70>)
 800ab7a:	429c      	cmp	r4, r3
 800ab7c:	d101      	bne.n	800ab82 <_fflush_r+0x62>
 800ab7e:	68ac      	ldr	r4, [r5, #8]
 800ab80:	e7df      	b.n	800ab42 <_fflush_r+0x22>
 800ab82:	4b04      	ldr	r3, [pc, #16]	; (800ab94 <_fflush_r+0x74>)
 800ab84:	429c      	cmp	r4, r3
 800ab86:	bf08      	it	eq
 800ab88:	68ec      	ldreq	r4, [r5, #12]
 800ab8a:	e7da      	b.n	800ab42 <_fflush_r+0x22>
 800ab8c:	0800b6dc 	.word	0x0800b6dc
 800ab90:	0800b6fc 	.word	0x0800b6fc
 800ab94:	0800b6bc 	.word	0x0800b6bc

0800ab98 <std>:
 800ab98:	2300      	movs	r3, #0
 800ab9a:	b510      	push	{r4, lr}
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	e9c0 3300 	strd	r3, r3, [r0]
 800aba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aba6:	6083      	str	r3, [r0, #8]
 800aba8:	8181      	strh	r1, [r0, #12]
 800abaa:	6643      	str	r3, [r0, #100]	; 0x64
 800abac:	81c2      	strh	r2, [r0, #14]
 800abae:	6183      	str	r3, [r0, #24]
 800abb0:	4619      	mov	r1, r3
 800abb2:	2208      	movs	r2, #8
 800abb4:	305c      	adds	r0, #92	; 0x5c
 800abb6:	f7fc f897 	bl	8006ce8 <memset>
 800abba:	4b05      	ldr	r3, [pc, #20]	; (800abd0 <std+0x38>)
 800abbc:	6224      	str	r4, [r4, #32]
 800abbe:	6263      	str	r3, [r4, #36]	; 0x24
 800abc0:	4b04      	ldr	r3, [pc, #16]	; (800abd4 <std+0x3c>)
 800abc2:	62a3      	str	r3, [r4, #40]	; 0x28
 800abc4:	4b04      	ldr	r3, [pc, #16]	; (800abd8 <std+0x40>)
 800abc6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800abc8:	4b04      	ldr	r3, [pc, #16]	; (800abdc <std+0x44>)
 800abca:	6323      	str	r3, [r4, #48]	; 0x30
 800abcc:	bd10      	pop	{r4, pc}
 800abce:	bf00      	nop
 800abd0:	0800aeed 	.word	0x0800aeed
 800abd4:	0800af0f 	.word	0x0800af0f
 800abd8:	0800af47 	.word	0x0800af47
 800abdc:	0800af6b 	.word	0x0800af6b

0800abe0 <_cleanup_r>:
 800abe0:	4901      	ldr	r1, [pc, #4]	; (800abe8 <_cleanup_r+0x8>)
 800abe2:	f000 b8af 	b.w	800ad44 <_fwalk_reent>
 800abe6:	bf00      	nop
 800abe8:	0800ab21 	.word	0x0800ab21

0800abec <__sfmoreglue>:
 800abec:	2268      	movs	r2, #104	; 0x68
 800abee:	b570      	push	{r4, r5, r6, lr}
 800abf0:	1e4d      	subs	r5, r1, #1
 800abf2:	4355      	muls	r5, r2
 800abf4:	460e      	mov	r6, r1
 800abf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800abfa:	f7ff fa77 	bl	800a0ec <_malloc_r>
 800abfe:	4604      	mov	r4, r0
 800ac00:	b140      	cbz	r0, 800ac14 <__sfmoreglue+0x28>
 800ac02:	2100      	movs	r1, #0
 800ac04:	e9c0 1600 	strd	r1, r6, [r0]
 800ac08:	300c      	adds	r0, #12
 800ac0a:	60a0      	str	r0, [r4, #8]
 800ac0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac10:	f7fc f86a 	bl	8006ce8 <memset>
 800ac14:	4620      	mov	r0, r4
 800ac16:	bd70      	pop	{r4, r5, r6, pc}

0800ac18 <__sfp_lock_acquire>:
 800ac18:	4801      	ldr	r0, [pc, #4]	; (800ac20 <__sfp_lock_acquire+0x8>)
 800ac1a:	f000 b8b3 	b.w	800ad84 <__retarget_lock_acquire_recursive>
 800ac1e:	bf00      	nop
 800ac20:	2000142d 	.word	0x2000142d

0800ac24 <__sfp_lock_release>:
 800ac24:	4801      	ldr	r0, [pc, #4]	; (800ac2c <__sfp_lock_release+0x8>)
 800ac26:	f000 b8ae 	b.w	800ad86 <__retarget_lock_release_recursive>
 800ac2a:	bf00      	nop
 800ac2c:	2000142d 	.word	0x2000142d

0800ac30 <__sinit_lock_acquire>:
 800ac30:	4801      	ldr	r0, [pc, #4]	; (800ac38 <__sinit_lock_acquire+0x8>)
 800ac32:	f000 b8a7 	b.w	800ad84 <__retarget_lock_acquire_recursive>
 800ac36:	bf00      	nop
 800ac38:	2000142e 	.word	0x2000142e

0800ac3c <__sinit_lock_release>:
 800ac3c:	4801      	ldr	r0, [pc, #4]	; (800ac44 <__sinit_lock_release+0x8>)
 800ac3e:	f000 b8a2 	b.w	800ad86 <__retarget_lock_release_recursive>
 800ac42:	bf00      	nop
 800ac44:	2000142e 	.word	0x2000142e

0800ac48 <__sinit>:
 800ac48:	b510      	push	{r4, lr}
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	f7ff fff0 	bl	800ac30 <__sinit_lock_acquire>
 800ac50:	69a3      	ldr	r3, [r4, #24]
 800ac52:	b11b      	cbz	r3, 800ac5c <__sinit+0x14>
 800ac54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac58:	f7ff bff0 	b.w	800ac3c <__sinit_lock_release>
 800ac5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac60:	6523      	str	r3, [r4, #80]	; 0x50
 800ac62:	4b13      	ldr	r3, [pc, #76]	; (800acb0 <__sinit+0x68>)
 800ac64:	4a13      	ldr	r2, [pc, #76]	; (800acb4 <__sinit+0x6c>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac6a:	42a3      	cmp	r3, r4
 800ac6c:	bf08      	it	eq
 800ac6e:	2301      	moveq	r3, #1
 800ac70:	4620      	mov	r0, r4
 800ac72:	bf08      	it	eq
 800ac74:	61a3      	streq	r3, [r4, #24]
 800ac76:	f000 f81f 	bl	800acb8 <__sfp>
 800ac7a:	6060      	str	r0, [r4, #4]
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f000 f81b 	bl	800acb8 <__sfp>
 800ac82:	60a0      	str	r0, [r4, #8]
 800ac84:	4620      	mov	r0, r4
 800ac86:	f000 f817 	bl	800acb8 <__sfp>
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	2104      	movs	r1, #4
 800ac8e:	60e0      	str	r0, [r4, #12]
 800ac90:	6860      	ldr	r0, [r4, #4]
 800ac92:	f7ff ff81 	bl	800ab98 <std>
 800ac96:	2201      	movs	r2, #1
 800ac98:	2109      	movs	r1, #9
 800ac9a:	68a0      	ldr	r0, [r4, #8]
 800ac9c:	f7ff ff7c 	bl	800ab98 <std>
 800aca0:	2202      	movs	r2, #2
 800aca2:	2112      	movs	r1, #18
 800aca4:	68e0      	ldr	r0, [r4, #12]
 800aca6:	f7ff ff77 	bl	800ab98 <std>
 800acaa:	2301      	movs	r3, #1
 800acac:	61a3      	str	r3, [r4, #24]
 800acae:	e7d1      	b.n	800ac54 <__sinit+0xc>
 800acb0:	0800b27c 	.word	0x0800b27c
 800acb4:	0800abe1 	.word	0x0800abe1

0800acb8 <__sfp>:
 800acb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acba:	4607      	mov	r7, r0
 800acbc:	f7ff ffac 	bl	800ac18 <__sfp_lock_acquire>
 800acc0:	4b1e      	ldr	r3, [pc, #120]	; (800ad3c <__sfp+0x84>)
 800acc2:	681e      	ldr	r6, [r3, #0]
 800acc4:	69b3      	ldr	r3, [r6, #24]
 800acc6:	b913      	cbnz	r3, 800acce <__sfp+0x16>
 800acc8:	4630      	mov	r0, r6
 800acca:	f7ff ffbd 	bl	800ac48 <__sinit>
 800acce:	3648      	adds	r6, #72	; 0x48
 800acd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800acd4:	3b01      	subs	r3, #1
 800acd6:	d503      	bpl.n	800ace0 <__sfp+0x28>
 800acd8:	6833      	ldr	r3, [r6, #0]
 800acda:	b30b      	cbz	r3, 800ad20 <__sfp+0x68>
 800acdc:	6836      	ldr	r6, [r6, #0]
 800acde:	e7f7      	b.n	800acd0 <__sfp+0x18>
 800ace0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ace4:	b9d5      	cbnz	r5, 800ad1c <__sfp+0x64>
 800ace6:	4b16      	ldr	r3, [pc, #88]	; (800ad40 <__sfp+0x88>)
 800ace8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800acec:	60e3      	str	r3, [r4, #12]
 800acee:	6665      	str	r5, [r4, #100]	; 0x64
 800acf0:	f000 f847 	bl	800ad82 <__retarget_lock_init_recursive>
 800acf4:	f7ff ff96 	bl	800ac24 <__sfp_lock_release>
 800acf8:	2208      	movs	r2, #8
 800acfa:	4629      	mov	r1, r5
 800acfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad04:	6025      	str	r5, [r4, #0]
 800ad06:	61a5      	str	r5, [r4, #24]
 800ad08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad0c:	f7fb ffec 	bl	8006ce8 <memset>
 800ad10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad18:	4620      	mov	r0, r4
 800ad1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad1c:	3468      	adds	r4, #104	; 0x68
 800ad1e:	e7d9      	b.n	800acd4 <__sfp+0x1c>
 800ad20:	2104      	movs	r1, #4
 800ad22:	4638      	mov	r0, r7
 800ad24:	f7ff ff62 	bl	800abec <__sfmoreglue>
 800ad28:	4604      	mov	r4, r0
 800ad2a:	6030      	str	r0, [r6, #0]
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	d1d5      	bne.n	800acdc <__sfp+0x24>
 800ad30:	f7ff ff78 	bl	800ac24 <__sfp_lock_release>
 800ad34:	230c      	movs	r3, #12
 800ad36:	603b      	str	r3, [r7, #0]
 800ad38:	e7ee      	b.n	800ad18 <__sfp+0x60>
 800ad3a:	bf00      	nop
 800ad3c:	0800b27c 	.word	0x0800b27c
 800ad40:	ffff0001 	.word	0xffff0001

0800ad44 <_fwalk_reent>:
 800ad44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad48:	4606      	mov	r6, r0
 800ad4a:	4688      	mov	r8, r1
 800ad4c:	2700      	movs	r7, #0
 800ad4e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad56:	f1b9 0901 	subs.w	r9, r9, #1
 800ad5a:	d505      	bpl.n	800ad68 <_fwalk_reent+0x24>
 800ad5c:	6824      	ldr	r4, [r4, #0]
 800ad5e:	2c00      	cmp	r4, #0
 800ad60:	d1f7      	bne.n	800ad52 <_fwalk_reent+0xe>
 800ad62:	4638      	mov	r0, r7
 800ad64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad68:	89ab      	ldrh	r3, [r5, #12]
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d907      	bls.n	800ad7e <_fwalk_reent+0x3a>
 800ad6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad72:	3301      	adds	r3, #1
 800ad74:	d003      	beq.n	800ad7e <_fwalk_reent+0x3a>
 800ad76:	4629      	mov	r1, r5
 800ad78:	4630      	mov	r0, r6
 800ad7a:	47c0      	blx	r8
 800ad7c:	4307      	orrs	r7, r0
 800ad7e:	3568      	adds	r5, #104	; 0x68
 800ad80:	e7e9      	b.n	800ad56 <_fwalk_reent+0x12>

0800ad82 <__retarget_lock_init_recursive>:
 800ad82:	4770      	bx	lr

0800ad84 <__retarget_lock_acquire_recursive>:
 800ad84:	4770      	bx	lr

0800ad86 <__retarget_lock_release_recursive>:
 800ad86:	4770      	bx	lr

0800ad88 <__swhatbuf_r>:
 800ad88:	b570      	push	{r4, r5, r6, lr}
 800ad8a:	460e      	mov	r6, r1
 800ad8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad90:	4614      	mov	r4, r2
 800ad92:	2900      	cmp	r1, #0
 800ad94:	461d      	mov	r5, r3
 800ad96:	b096      	sub	sp, #88	; 0x58
 800ad98:	da08      	bge.n	800adac <__swhatbuf_r+0x24>
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ada0:	602a      	str	r2, [r5, #0]
 800ada2:	061a      	lsls	r2, r3, #24
 800ada4:	d410      	bmi.n	800adc8 <__swhatbuf_r+0x40>
 800ada6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adaa:	e00e      	b.n	800adca <__swhatbuf_r+0x42>
 800adac:	466a      	mov	r2, sp
 800adae:	f000 f903 	bl	800afb8 <_fstat_r>
 800adb2:	2800      	cmp	r0, #0
 800adb4:	dbf1      	blt.n	800ad9a <__swhatbuf_r+0x12>
 800adb6:	9a01      	ldr	r2, [sp, #4]
 800adb8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800adbc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800adc0:	425a      	negs	r2, r3
 800adc2:	415a      	adcs	r2, r3
 800adc4:	602a      	str	r2, [r5, #0]
 800adc6:	e7ee      	b.n	800ada6 <__swhatbuf_r+0x1e>
 800adc8:	2340      	movs	r3, #64	; 0x40
 800adca:	2000      	movs	r0, #0
 800adcc:	6023      	str	r3, [r4, #0]
 800adce:	b016      	add	sp, #88	; 0x58
 800add0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800add4 <__smakebuf_r>:
 800add4:	898b      	ldrh	r3, [r1, #12]
 800add6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800add8:	079d      	lsls	r5, r3, #30
 800adda:	4606      	mov	r6, r0
 800addc:	460c      	mov	r4, r1
 800adde:	d507      	bpl.n	800adf0 <__smakebuf_r+0x1c>
 800ade0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	6123      	str	r3, [r4, #16]
 800ade8:	2301      	movs	r3, #1
 800adea:	6163      	str	r3, [r4, #20]
 800adec:	b002      	add	sp, #8
 800adee:	bd70      	pop	{r4, r5, r6, pc}
 800adf0:	466a      	mov	r2, sp
 800adf2:	ab01      	add	r3, sp, #4
 800adf4:	f7ff ffc8 	bl	800ad88 <__swhatbuf_r>
 800adf8:	9900      	ldr	r1, [sp, #0]
 800adfa:	4605      	mov	r5, r0
 800adfc:	4630      	mov	r0, r6
 800adfe:	f7ff f975 	bl	800a0ec <_malloc_r>
 800ae02:	b948      	cbnz	r0, 800ae18 <__smakebuf_r+0x44>
 800ae04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae08:	059a      	lsls	r2, r3, #22
 800ae0a:	d4ef      	bmi.n	800adec <__smakebuf_r+0x18>
 800ae0c:	f023 0303 	bic.w	r3, r3, #3
 800ae10:	f043 0302 	orr.w	r3, r3, #2
 800ae14:	81a3      	strh	r3, [r4, #12]
 800ae16:	e7e3      	b.n	800ade0 <__smakebuf_r+0xc>
 800ae18:	4b0d      	ldr	r3, [pc, #52]	; (800ae50 <__smakebuf_r+0x7c>)
 800ae1a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae1c:	89a3      	ldrh	r3, [r4, #12]
 800ae1e:	6020      	str	r0, [r4, #0]
 800ae20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae24:	81a3      	strh	r3, [r4, #12]
 800ae26:	9b00      	ldr	r3, [sp, #0]
 800ae28:	6120      	str	r0, [r4, #16]
 800ae2a:	6163      	str	r3, [r4, #20]
 800ae2c:	9b01      	ldr	r3, [sp, #4]
 800ae2e:	b15b      	cbz	r3, 800ae48 <__smakebuf_r+0x74>
 800ae30:	4630      	mov	r0, r6
 800ae32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae36:	f000 f8d1 	bl	800afdc <_isatty_r>
 800ae3a:	b128      	cbz	r0, 800ae48 <__smakebuf_r+0x74>
 800ae3c:	89a3      	ldrh	r3, [r4, #12]
 800ae3e:	f023 0303 	bic.w	r3, r3, #3
 800ae42:	f043 0301 	orr.w	r3, r3, #1
 800ae46:	81a3      	strh	r3, [r4, #12]
 800ae48:	89a0      	ldrh	r0, [r4, #12]
 800ae4a:	4305      	orrs	r5, r0
 800ae4c:	81a5      	strh	r5, [r4, #12]
 800ae4e:	e7cd      	b.n	800adec <__smakebuf_r+0x18>
 800ae50:	0800abe1 	.word	0x0800abe1

0800ae54 <_malloc_usable_size_r>:
 800ae54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae58:	1f18      	subs	r0, r3, #4
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	bfbc      	itt	lt
 800ae5e:	580b      	ldrlt	r3, [r1, r0]
 800ae60:	18c0      	addlt	r0, r0, r3
 800ae62:	4770      	bx	lr

0800ae64 <_raise_r>:
 800ae64:	291f      	cmp	r1, #31
 800ae66:	b538      	push	{r3, r4, r5, lr}
 800ae68:	4604      	mov	r4, r0
 800ae6a:	460d      	mov	r5, r1
 800ae6c:	d904      	bls.n	800ae78 <_raise_r+0x14>
 800ae6e:	2316      	movs	r3, #22
 800ae70:	6003      	str	r3, [r0, #0]
 800ae72:	f04f 30ff 	mov.w	r0, #4294967295
 800ae76:	bd38      	pop	{r3, r4, r5, pc}
 800ae78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ae7a:	b112      	cbz	r2, 800ae82 <_raise_r+0x1e>
 800ae7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae80:	b94b      	cbnz	r3, 800ae96 <_raise_r+0x32>
 800ae82:	4620      	mov	r0, r4
 800ae84:	f000 f830 	bl	800aee8 <_getpid_r>
 800ae88:	462a      	mov	r2, r5
 800ae8a:	4601      	mov	r1, r0
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae92:	f000 b817 	b.w	800aec4 <_kill_r>
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d00a      	beq.n	800aeb0 <_raise_r+0x4c>
 800ae9a:	1c59      	adds	r1, r3, #1
 800ae9c:	d103      	bne.n	800aea6 <_raise_r+0x42>
 800ae9e:	2316      	movs	r3, #22
 800aea0:	6003      	str	r3, [r0, #0]
 800aea2:	2001      	movs	r0, #1
 800aea4:	e7e7      	b.n	800ae76 <_raise_r+0x12>
 800aea6:	2400      	movs	r4, #0
 800aea8:	4628      	mov	r0, r5
 800aeaa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aeae:	4798      	blx	r3
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	e7e0      	b.n	800ae76 <_raise_r+0x12>

0800aeb4 <raise>:
 800aeb4:	4b02      	ldr	r3, [pc, #8]	; (800aec0 <raise+0xc>)
 800aeb6:	4601      	mov	r1, r0
 800aeb8:	6818      	ldr	r0, [r3, #0]
 800aeba:	f7ff bfd3 	b.w	800ae64 <_raise_r>
 800aebe:	bf00      	nop
 800aec0:	20000018 	.word	0x20000018

0800aec4 <_kill_r>:
 800aec4:	b538      	push	{r3, r4, r5, lr}
 800aec6:	2300      	movs	r3, #0
 800aec8:	4d06      	ldr	r5, [pc, #24]	; (800aee4 <_kill_r+0x20>)
 800aeca:	4604      	mov	r4, r0
 800aecc:	4608      	mov	r0, r1
 800aece:	4611      	mov	r1, r2
 800aed0:	602b      	str	r3, [r5, #0]
 800aed2:	f7f8 fabc 	bl	800344e <_kill>
 800aed6:	1c43      	adds	r3, r0, #1
 800aed8:	d102      	bne.n	800aee0 <_kill_r+0x1c>
 800aeda:	682b      	ldr	r3, [r5, #0]
 800aedc:	b103      	cbz	r3, 800aee0 <_kill_r+0x1c>
 800aede:	6023      	str	r3, [r4, #0]
 800aee0:	bd38      	pop	{r3, r4, r5, pc}
 800aee2:	bf00      	nop
 800aee4:	20001428 	.word	0x20001428

0800aee8 <_getpid_r>:
 800aee8:	f7f8 baaa 	b.w	8003440 <_getpid>

0800aeec <__sread>:
 800aeec:	b510      	push	{r4, lr}
 800aeee:	460c      	mov	r4, r1
 800aef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aef4:	f000 f894 	bl	800b020 <_read_r>
 800aef8:	2800      	cmp	r0, #0
 800aefa:	bfab      	itete	ge
 800aefc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aefe:	89a3      	ldrhlt	r3, [r4, #12]
 800af00:	181b      	addge	r3, r3, r0
 800af02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af06:	bfac      	ite	ge
 800af08:	6563      	strge	r3, [r4, #84]	; 0x54
 800af0a:	81a3      	strhlt	r3, [r4, #12]
 800af0c:	bd10      	pop	{r4, pc}

0800af0e <__swrite>:
 800af0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af12:	461f      	mov	r7, r3
 800af14:	898b      	ldrh	r3, [r1, #12]
 800af16:	4605      	mov	r5, r0
 800af18:	05db      	lsls	r3, r3, #23
 800af1a:	460c      	mov	r4, r1
 800af1c:	4616      	mov	r6, r2
 800af1e:	d505      	bpl.n	800af2c <__swrite+0x1e>
 800af20:	2302      	movs	r3, #2
 800af22:	2200      	movs	r2, #0
 800af24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af28:	f000 f868 	bl	800affc <_lseek_r>
 800af2c:	89a3      	ldrh	r3, [r4, #12]
 800af2e:	4632      	mov	r2, r6
 800af30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af34:	81a3      	strh	r3, [r4, #12]
 800af36:	4628      	mov	r0, r5
 800af38:	463b      	mov	r3, r7
 800af3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af42:	f000 b817 	b.w	800af74 <_write_r>

0800af46 <__sseek>:
 800af46:	b510      	push	{r4, lr}
 800af48:	460c      	mov	r4, r1
 800af4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af4e:	f000 f855 	bl	800affc <_lseek_r>
 800af52:	1c43      	adds	r3, r0, #1
 800af54:	89a3      	ldrh	r3, [r4, #12]
 800af56:	bf15      	itete	ne
 800af58:	6560      	strne	r0, [r4, #84]	; 0x54
 800af5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af62:	81a3      	strheq	r3, [r4, #12]
 800af64:	bf18      	it	ne
 800af66:	81a3      	strhne	r3, [r4, #12]
 800af68:	bd10      	pop	{r4, pc}

0800af6a <__sclose>:
 800af6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af6e:	f000 b813 	b.w	800af98 <_close_r>
	...

0800af74 <_write_r>:
 800af74:	b538      	push	{r3, r4, r5, lr}
 800af76:	4604      	mov	r4, r0
 800af78:	4608      	mov	r0, r1
 800af7a:	4611      	mov	r1, r2
 800af7c:	2200      	movs	r2, #0
 800af7e:	4d05      	ldr	r5, [pc, #20]	; (800af94 <_write_r+0x20>)
 800af80:	602a      	str	r2, [r5, #0]
 800af82:	461a      	mov	r2, r3
 800af84:	f7f8 fa9a 	bl	80034bc <_write>
 800af88:	1c43      	adds	r3, r0, #1
 800af8a:	d102      	bne.n	800af92 <_write_r+0x1e>
 800af8c:	682b      	ldr	r3, [r5, #0]
 800af8e:	b103      	cbz	r3, 800af92 <_write_r+0x1e>
 800af90:	6023      	str	r3, [r4, #0]
 800af92:	bd38      	pop	{r3, r4, r5, pc}
 800af94:	20001428 	.word	0x20001428

0800af98 <_close_r>:
 800af98:	b538      	push	{r3, r4, r5, lr}
 800af9a:	2300      	movs	r3, #0
 800af9c:	4d05      	ldr	r5, [pc, #20]	; (800afb4 <_close_r+0x1c>)
 800af9e:	4604      	mov	r4, r0
 800afa0:	4608      	mov	r0, r1
 800afa2:	602b      	str	r3, [r5, #0]
 800afa4:	f7f8 faa6 	bl	80034f4 <_close>
 800afa8:	1c43      	adds	r3, r0, #1
 800afaa:	d102      	bne.n	800afb2 <_close_r+0x1a>
 800afac:	682b      	ldr	r3, [r5, #0]
 800afae:	b103      	cbz	r3, 800afb2 <_close_r+0x1a>
 800afb0:	6023      	str	r3, [r4, #0]
 800afb2:	bd38      	pop	{r3, r4, r5, pc}
 800afb4:	20001428 	.word	0x20001428

0800afb8 <_fstat_r>:
 800afb8:	b538      	push	{r3, r4, r5, lr}
 800afba:	2300      	movs	r3, #0
 800afbc:	4d06      	ldr	r5, [pc, #24]	; (800afd8 <_fstat_r+0x20>)
 800afbe:	4604      	mov	r4, r0
 800afc0:	4608      	mov	r0, r1
 800afc2:	4611      	mov	r1, r2
 800afc4:	602b      	str	r3, [r5, #0]
 800afc6:	f7f8 faa0 	bl	800350a <_fstat>
 800afca:	1c43      	adds	r3, r0, #1
 800afcc:	d102      	bne.n	800afd4 <_fstat_r+0x1c>
 800afce:	682b      	ldr	r3, [r5, #0]
 800afd0:	b103      	cbz	r3, 800afd4 <_fstat_r+0x1c>
 800afd2:	6023      	str	r3, [r4, #0]
 800afd4:	bd38      	pop	{r3, r4, r5, pc}
 800afd6:	bf00      	nop
 800afd8:	20001428 	.word	0x20001428

0800afdc <_isatty_r>:
 800afdc:	b538      	push	{r3, r4, r5, lr}
 800afde:	2300      	movs	r3, #0
 800afe0:	4d05      	ldr	r5, [pc, #20]	; (800aff8 <_isatty_r+0x1c>)
 800afe2:	4604      	mov	r4, r0
 800afe4:	4608      	mov	r0, r1
 800afe6:	602b      	str	r3, [r5, #0]
 800afe8:	f7f8 fa9e 	bl	8003528 <_isatty>
 800afec:	1c43      	adds	r3, r0, #1
 800afee:	d102      	bne.n	800aff6 <_isatty_r+0x1a>
 800aff0:	682b      	ldr	r3, [r5, #0]
 800aff2:	b103      	cbz	r3, 800aff6 <_isatty_r+0x1a>
 800aff4:	6023      	str	r3, [r4, #0]
 800aff6:	bd38      	pop	{r3, r4, r5, pc}
 800aff8:	20001428 	.word	0x20001428

0800affc <_lseek_r>:
 800affc:	b538      	push	{r3, r4, r5, lr}
 800affe:	4604      	mov	r4, r0
 800b000:	4608      	mov	r0, r1
 800b002:	4611      	mov	r1, r2
 800b004:	2200      	movs	r2, #0
 800b006:	4d05      	ldr	r5, [pc, #20]	; (800b01c <_lseek_r+0x20>)
 800b008:	602a      	str	r2, [r5, #0]
 800b00a:	461a      	mov	r2, r3
 800b00c:	f7f8 fa96 	bl	800353c <_lseek>
 800b010:	1c43      	adds	r3, r0, #1
 800b012:	d102      	bne.n	800b01a <_lseek_r+0x1e>
 800b014:	682b      	ldr	r3, [r5, #0]
 800b016:	b103      	cbz	r3, 800b01a <_lseek_r+0x1e>
 800b018:	6023      	str	r3, [r4, #0]
 800b01a:	bd38      	pop	{r3, r4, r5, pc}
 800b01c:	20001428 	.word	0x20001428

0800b020 <_read_r>:
 800b020:	b538      	push	{r3, r4, r5, lr}
 800b022:	4604      	mov	r4, r0
 800b024:	4608      	mov	r0, r1
 800b026:	4611      	mov	r1, r2
 800b028:	2200      	movs	r2, #0
 800b02a:	4d05      	ldr	r5, [pc, #20]	; (800b040 <_read_r+0x20>)
 800b02c:	602a      	str	r2, [r5, #0]
 800b02e:	461a      	mov	r2, r3
 800b030:	f7f8 fa27 	bl	8003482 <_read>
 800b034:	1c43      	adds	r3, r0, #1
 800b036:	d102      	bne.n	800b03e <_read_r+0x1e>
 800b038:	682b      	ldr	r3, [r5, #0]
 800b03a:	b103      	cbz	r3, 800b03e <_read_r+0x1e>
 800b03c:	6023      	str	r3, [r4, #0]
 800b03e:	bd38      	pop	{r3, r4, r5, pc}
 800b040:	20001428 	.word	0x20001428

0800b044 <_init>:
 800b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b046:	bf00      	nop
 800b048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b04a:	bc08      	pop	{r3}
 800b04c:	469e      	mov	lr, r3
 800b04e:	4770      	bx	lr

0800b050 <_fini>:
 800b050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b052:	bf00      	nop
 800b054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b056:	bc08      	pop	{r3}
 800b058:	469e      	mov	lr, r3
 800b05a:	4770      	bx	lr
